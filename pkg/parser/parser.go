// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"strings"
)

type yySymType struct {
	yys      int
	val      interface{}
	vals     []interface{}
	str      string
	integer  int64
	boolean  bool
	bytes    []byte
	cmd      Command
	variable struct {
		name  string
		value interface{}
	}
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57396
	yyEofCode  = 57344
	AND        = 57387
	ASSERT     = 57361
	BODY       = 57374
	CONNECT    = 57369
	CONTAIN    = 57384
	CONTAINS   = 57383
	DEBUG      = 57359
	DELETE     = 57368
	END        = 57360
	EOF        = 57347
	EOL        = 57346
	EQUAL      = 57376
	EQUALS     = 57375
	FALSE      = 57352
	FLOAT      = 57350
	GE         = 57380
	GET        = 57364
	GT         = 57379
	HEAD       = 57365
	HEADER     = 57373
	HTTP       = 57356
	IDENTIFIER = 57394
	INCLUDE    = 57362
	INTEGER    = 57349
	INTO       = 57393
	IS         = 57391
	ISNOT      = 57392
	KEYWORD    = 57354
	LE         = 57382
	LT         = 57381
	MATCH      = 57390
	MATCHES    = 57389
	MUST       = 57357
	NOTEQUAL   = 57378
	NOTEQUALS  = 57377
	NULL       = 57353
	OPTIONS    = 57370
	OR         = 57388
	PATCH      = 57372
	POST       = 57366
	PUT        = 57367
	SET        = 57355
	SHOULD     = 57358
	SLEEP      = 57363
	STARTSWITH = 57385
	STRING     = 57348
	TRACE      = 57371
	TRUE       = 57351
	TYPE       = 57395
	WHEN       = 57386
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -96
)

var (
	yyPrec = map[int]int{
		'|': 0,
		'&': 1,
		'+': 2,
		'-': 2,
		'*': 3,
		'/': 3,
		'%': 3,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (71x)
		57361: 1,  // ASSERT (71x)
		57359: 2,  // DEBUG (71x)
		57360: 3,  // END (71x)
		57356: 4,  // HTTP (71x)
		57362: 5,  // INCLUDE (71x)
		57357: 6,  // MUST (71x)
		57355: 7,  // SET (71x)
		57358: 8,  // SHOULD (71x)
		57363: 9,  // SLEEP (71x)
		57386: 10, // WHEN (66x)
		57393: 11, // INTO (65x)
		57394: 12, // IDENTIFIER (61x)
		123:   13, // '{' (60x)
		36:    14, // '$' (59x)
		57348: 15, // STRING (53x)
		57387: 16, // AND (42x)
		57388: 17, // OR (42x)
		91:    18, // '[' (41x)
		57350: 19, // FLOAT (41x)
		57349: 20, // INTEGER (41x)
		57353: 21, // NULL (41x)
		57395: 22, // TYPE (41x)
		40:    23, // '(' (37x)
		41:    24, // ')' (37x)
		57352: 25, // FALSE (30x)
		57351: 26, // TRUE (30x)
		57422: 27, // variable (30x)
		37:    28, // '%' (29x)
		42:    29, // '*' (29x)
		43:    30, // '+' (29x)
		45:    31, // '-' (29x)
		47:    32, // '/' (29x)
		57384: 33, // CONTAIN (24x)
		57383: 34, // CONTAINS (24x)
		57376: 35, // EQUAL (24x)
		57375: 36, // EQUALS (24x)
		57380: 37, // GE (24x)
		57379: 38, // GT (24x)
		57391: 39, // IS (24x)
		57392: 40, // ISNOT (24x)
		57382: 41, // LE (24x)
		57381: 42, // LT (24x)
		57390: 43, // MATCH (24x)
		57389: 44, // MATCHES (24x)
		57378: 45, // NOTEQUAL (24x)
		57377: 46, // NOTEQUALS (24x)
		57385: 47, // STARTSWITH (24x)
		57398: 48, // any_value (23x)
		57399: 49, // array (23x)
		57407: 50, // expr (19x)
		93:    51, // ']' (16x)
		44:    52, // ',' (15x)
		57421: 53, // true_false (12x)
		57374: 54, // BODY (11x)
		57401: 55, // boolean_exp (11x)
		57408: 56, // expr_opr (11x)
		57373: 57, // HEADER (11x)
		57416: 58, // operator (4x)
		57420: 59, // string_var (3x)
		125:   60, // '}' (2x)
		57410: 61, // http_command_param (2x)
		57397: 62, // any_command (1x)
		57400: 63, // assert_command (1x)
		57402: 64, // comma_separated_values (1x)
		57403: 65, // command (1x)
		57404: 66, // command_with_condition_opt (1x)
		57369: 67, // CONNECT (1x)
		57405: 68, // debug_command (1x)
		57368: 69, // DELETE (1x)
		57406: 70, // end_command (1x)
		57364: 71, // GET (1x)
		57365: 72, // HEAD (1x)
		57409: 73, // http_command (1x)
		57411: 74, // http_command_params (1x)
		57412: 75, // http_method (1x)
		57413: 76, // include_command (1x)
		57414: 77, // multi_variable (1x)
		57415: 78, // must_command (1x)
		57370: 79, // OPTIONS (1x)
		57372: 80, // PATCH (1x)
		57366: 81, // POST (1x)
		57367: 82, // PUT (1x)
		57417: 83, // set_command (1x)
		57418: 84, // should_command (1x)
		57419: 85, // sleep_command (1x)
		57371: 86, // TRACE (1x)
		57396: 87, // $default (0x)
		38:    88, // '&' (0x)
		124:   89, // '|' (0x)
		57347: 90, // EOF (0x)
		57346: 91, // EOL (0x)
		57345: 92, // error (0x)
		57354: 93, // KEYWORD (0x)
	}

	yySymNames = []string{
		"$end",
		"ASSERT",
		"DEBUG",
		"END",
		"HTTP",
		"INCLUDE",
		"MUST",
		"SET",
		"SHOULD",
		"SLEEP",
		"WHEN",
		"INTO",
		"IDENTIFIER",
		"'{'",
		"'$'",
		"STRING",
		"AND",
		"OR",
		"'['",
		"FLOAT",
		"INTEGER",
		"NULL",
		"TYPE",
		"'('",
		"')'",
		"FALSE",
		"TRUE",
		"variable",
		"'%'",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"CONTAIN",
		"CONTAINS",
		"EQUAL",
		"EQUALS",
		"GE",
		"GT",
		"IS",
		"ISNOT",
		"LE",
		"LT",
		"MATCH",
		"MATCHES",
		"NOTEQUAL",
		"NOTEQUALS",
		"STARTSWITH",
		"any_value",
		"array",
		"expr",
		"']'",
		"','",
		"true_false",
		"BODY",
		"boolean_exp",
		"expr_opr",
		"HEADER",
		"operator",
		"string_var",
		"'}'",
		"http_command_param",
		"any_command",
		"assert_command",
		"comma_separated_values",
		"command",
		"command_with_condition_opt",
		"CONNECT",
		"debug_command",
		"DELETE",
		"end_command",
		"GET",
		"HEAD",
		"http_command",
		"http_command_params",
		"http_method",
		"include_command",
		"multi_variable",
		"must_command",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"set_command",
		"should_command",
		"sleep_command",
		"TRACE",
		"$default",
		"'&'",
		"'|'",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {62, 0},
		2:  {62, 2},
		3:  {66, 5},
		4:  {66, 3},
		5:  {66, 3},
		6:  {66, 1},
		7:  {65, 1},
		8:  {65, 1},
		9:  {65, 1},
		10: {65, 1},
		11: {65, 1},
		12: {65, 1},
		13: {65, 1},
		14: {65, 1},
		15: {65, 1},
		16: {85, 2},
		17: {76, 2},
		18: {68, 2},
		19: {70, 3},
		20: {70, 2},
		21: {70, 1},
		22: {63, 2},
		23: {78, 2},
		24: {84, 2},
		25: {83, 3},
		26: {83, 3},
		27: {83, 3},
		28: {73, 4},
		29: {73, 3},
		30: {74, 1},
		31: {74, 2},
		32: {61, 2},
		33: {61, 2},
		34: {75, 1},
		35: {75, 1},
		36: {75, 1},
		37: {75, 1},
		38: {75, 1},
		39: {75, 1},
		40: {75, 1},
		41: {75, 1},
		42: {75, 1},
		43: {77, 1},
		44: {77, 2},
		45: {48, 1},
		46: {48, 1},
		47: {48, 1},
		48: {48, 1},
		49: {48, 1},
		50: {48, 1},
		51: {48, 1},
		52: {27, 5},
		53: {27, 2},
		54: {27, 1},
		55: {58, 1},
		56: {58, 1},
		57: {58, 1},
		58: {58, 1},
		59: {58, 1},
		60: {58, 1},
		61: {58, 1},
		62: {58, 1},
		63: {58, 1},
		64: {58, 1},
		65: {58, 1},
		66: {58, 1},
		67: {58, 1},
		68: {58, 1},
		69: {58, 1},
		70: {55, 3},
		71: {55, 1},
		72: {55, 3},
		73: {55, 3},
		74: {55, 1},
		75: {53, 1},
		76: {53, 1},
		77: {56, 3},
		78: {56, 3},
		79: {56, 3},
		80: {56, 3},
		81: {56, 3},
		82: {56, 3},
		83: {59, 1},
		84: {59, 1},
		85: {50, 3},
		86: {50, 3},
		87: {50, 3},
		88: {50, 3},
		89: {50, 3},
		90: {50, 3},
		91: {50, 1},
		92: {49, 2},
		93: {49, 3},
		94: {64, 1},
		95: {64, 3},
	}

	yyXErrors = map[yyXError]string{
		yyXError{33, -1}:  "expected '{'",
		yyXError{40, -1}:  "expected '}'",
		yyXError{41, -1}:  "expected '}'",
		yyXError{34, -1}:  "expected IDENTIFIER",
		yyXError{39, -1}:  "expected IDENTIFIER",
		yyXError{0, -1}:   "expected any_command or one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{110, -1}: "expected any_value or expr or one of ['$', '(', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{89, -1}:  "expected any_value or expr or true_false or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{13, -1}:  "expected any_value or one of ['$', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{14, -1}:  "expected any_value or one of ['$', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{72, -1}:  "expected any_value or one of ['$', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{50, -1}:  "expected array or boolean_exp or expr or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{60, -1}:  "expected boolean_exp or expr or expr_opr or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{16, -1}:  "expected boolean_exp or one of [$end, '$', '(', '[', '{', ASSERT, DEBUG, END, FALSE, FLOAT, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, MUST, NULL, SET, SHOULD, SLEEP, STRING, TRUE, TYPE, WHEN]",
		yyXError{17, -1}:  "expected boolean_exp or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{18, -1}:  "expected boolean_exp or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{19, -1}:  "expected boolean_exp or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{115, -1}: "expected boolean_exp or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{116, -1}: "expected boolean_exp or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{123, -1}: "expected boolean_exp or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{132, -1}: "expected boolean_exp or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{135, -1}: "expected boolean_exp or one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{66, -1}:  "expected comma_separated_values or one of ['$', '[', ']', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{1, -1}:   "expected command_with_condition_opt or one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{93, -1}:  "expected expr or one of ['$', '(', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{97, -1}:  "expected expr or one of ['$', '(', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{98, -1}:  "expected expr or one of ['$', '(', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{99, -1}:  "expected expr or one of ['$', '(', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{100, -1}: "expected expr or one of ['$', '(', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{101, -1}: "expected expr or one of ['$', '(', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{43, -1}:  "expected http_command_param or one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{32, -1}:  "expected http_command_params or one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{21, -1}:  "expected http_method or one of [CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE]",
		yyXError{15, -1}:  "expected multi_variable or one of ['$', '{', IDENTIFIER]",
		yyXError{35, -1}:  "expected one of [$end, '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, BODY, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FALSE, FLOAT, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, TRUE, TYPE, WHEN]",
		yyXError{38, -1}:  "expected one of [$end, '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, BODY, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FALSE, FLOAT, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, TRUE, TYPE, WHEN]",
		yyXError{42, -1}:  "expected one of [$end, '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, BODY, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FALSE, FLOAT, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, TRUE, TYPE, WHEN]",
		yyXError{127, -1}: "expected one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{128, -1}: "expected one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{54, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{55, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{56, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{57, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{58, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{59, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{67, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{68, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{71, -1}:  "expected one of [$end, '%', ')', '*', '+', ',', '-', '/', ']', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{95, -1}:  "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{96, -1}:  "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{102, -1}: "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{103, -1}: "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{104, -1}: "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{105, -1}: "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{106, -1}: "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{90, -1}:  "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{92, -1}:  "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{111, -1}: "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{112, -1}: "expected one of [$end, '%', ')', '*', '+', '-', '/', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{51, -1}:  "expected one of [$end, '%', '*', '+', '-', '/', ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{61, -1}:  "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{63, -1}:  "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{64, -1}:  "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{65, -1}:  "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{91, -1}:  "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{113, -1}: "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{114, -1}: "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{118, -1}: "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{119, -1}: "expected one of [$end, ')', AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{53, -1}:  "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{120, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{121, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{122, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{124, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{125, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{133, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, OR, SET, SHOULD, SLEEP]",
		yyXError{136, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, OR, SET, SHOULD, SLEEP]",
		yyXError{36, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{37, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{44, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{47, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{48, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{49, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{3, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{4, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{5, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{6, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{7, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{8, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{9, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{10, -1}:  "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{11, -1}:  "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{12, -1}:  "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{129, -1}: "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{130, -1}: "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{134, -1}: "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{2, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{74, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{75, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{76, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{77, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{78, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{79, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{80, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{81, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{82, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{83, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{84, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{85, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{86, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{87, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{88, -1}:  "expected one of ['$', '(', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{23, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{24, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{25, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{26, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{27, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{28, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{29, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{30, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{31, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{94, -1}:  "expected one of ['%', ')', '*', '+', '-', '/']",
		yyXError{107, -1}: "expected one of [')', AND, OR]",
		yyXError{108, -1}: "expected one of [')', AND, OR]",
		yyXError{69, -1}:  "expected one of [',', ']']",
		yyXError{70, -1}:  "expected one of [',', ']']",
		yyXError{73, -1}:  "expected one of [',', ']']",
		yyXError{62, -1}:  "expected operator or one of [$end, '%', ')', '*', '+', '-', '/', ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{52, -1}:  "expected operator or one of [$end, '%', '*', '+', '-', '/', ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{109, -1}: "expected operator or one of ['%', ')', '*', '+', '-', '/', CONTAIN, CONTAINS, EQUAL, EQUALS, GE, GT, IS, ISNOT, LE, LT, MATCH, MATCHES, NOTEQUAL, NOTEQUALS, STARTSWITH]",
		yyXError{117, -1}: "expected operator or one of ['%', '*', '+', '-', '/', CONTAIN, CONTAINS, EQUAL, EQUALS, GE, GT, IS, ISNOT, LE, LT, MATCH, MATCHES, NOTEQUAL, NOTEQUALS, STARTSWITH]",
		yyXError{22, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{45, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{46, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{126, -1}: "expected variable or one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{20, -1}:  "expected variable or one of ['$', '{', IDENTIFIER]",
		yyXError{131, -1}: "expected variable or one of ['$', '{', IDENTIFIER]",
	}

	yyParseTab = [137][]uint16{
		// 0
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 62: 97},
		{96, 113, 111, 112, 117, 110, 114, 116, 115, 109, 63: 104, 65: 99, 98, 68: 102, 70: 103, 73: 101, 76: 107, 78: 105, 83: 100, 106, 108},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 228, 227},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		// 5
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		// 10
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 27: 151, 48: 226, 163},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 27: 151, 48: 225, 163},
		// 15
		{12: 131, 129, 130, 27: 223, 77: 222},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 219, 75, 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 220, 159},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 218, 159},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 217, 159},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 216, 159},
		// 20
		{12: 131, 129, 130, 27: 146},
		{67: 124, 69: 123, 71: 119, 120, 75: 118, 79: 125, 127, 121, 122, 86: 126},
		{12: 131, 129, 130, 132, 27: 133, 59: 128},
		{12: 62, 62, 62, 62},
		{12: 61, 61, 61, 61},
		// 25
		{12: 60, 60, 60, 60},
		{12: 59, 59, 59, 59},
		{12: 58, 58, 58, 58},
		{12: 57, 57, 57, 57},
		{12: 56, 56, 56, 56},
		// 30
		{12: 55, 55, 55, 55},
		{12: 54, 54, 54, 54},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 54: 142, 57: 141, 61: 140, 74: 139},
		{13: 135},
		{12: 134},
		// 35
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 28: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 51: 42, 42, 54: 42, 57: 42},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 54: 13, 57: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 54: 12, 57: 12},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 28: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 51: 43, 43, 54: 43, 57: 43},
		{12: 136},
		// 40
		{60: 137},
		{60: 138},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 28: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 51: 44, 44, 54: 44, 57: 44},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 54: 142, 57: 141, 61: 145},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 54: 66, 57: 66},
		// 45
		{12: 131, 129, 130, 132, 27: 133, 59: 144},
		{12: 131, 129, 130, 132, 27: 133, 59: 143},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 54: 63, 57: 63},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 54: 64, 57: 64},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 54: 65, 57: 65},
		// 50
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 147, 148, 53: 157, 55: 149, 159},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 28: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 28: 197, 195, 193, 194, 196, 179, 178, 171, 170, 175, 174, 183, 184, 177, 176, 181, 182, 173, 172, 180, 58: 206},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 16: 211, 212},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 16: 51, 51, 24: 51, 28: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51: 51, 51},
		// 55
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 16: 50, 50, 24: 50, 28: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51: 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 16: 49, 49, 24: 49, 28: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 51: 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 16: 48, 48, 24: 48, 28: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 51: 48, 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 16: 47, 47, 24: 47, 28: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 51: 47, 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 16: 46, 46, 24: 46, 28: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 51: 46, 46},
		// 60
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 205, 53: 157, 55: 203, 204},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 16: 25, 25, 24: 25},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 24: 5, 28: 5, 5, 5, 5, 5, 179, 178, 171, 170, 175, 174, 183, 184, 177, 176, 181, 182, 173, 172, 180, 58: 185},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 16: 22, 22, 24: 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 16: 21, 21, 24: 21},
		// 65
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16: 20, 20, 24: 20},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 27: 151, 48: 166, 163, 51: 164, 64: 165},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 16: 45, 45, 24: 45, 28: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 51: 45, 45},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16: 4, 4, 24: 4, 28: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 51: 4, 4},
		{51: 167, 168},
		// 70
		{51: 2, 2},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 16: 3, 3, 24: 3, 28: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 51: 3, 3},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 27: 151, 48: 169, 163},
		{51: 1, 1},
		{12: 41, 41, 41, 41, 18: 41, 41, 41, 41, 41, 41, 25: 41, 41},
		// 75
		{12: 40, 40, 40, 40, 18: 40, 40, 40, 40, 40, 40, 25: 40, 40},
		{12: 39, 39, 39, 39, 18: 39, 39, 39, 39, 39, 39, 25: 39, 39},
		{12: 38, 38, 38, 38, 18: 38, 38, 38, 38, 38, 38, 25: 38, 38},
		{12: 37, 37, 37, 37, 18: 37, 37, 37, 37, 37, 37, 25: 37, 37},
		{12: 36, 36, 36, 36, 18: 36, 36, 36, 36, 36, 36, 25: 36, 36},
		// 80
		{12: 35, 35, 35, 35, 18: 35, 35, 35, 35, 35, 35, 25: 35, 35},
		{12: 34, 34, 34, 34, 18: 34, 34, 34, 34, 34, 34, 25: 34, 34},
		{12: 33, 33, 33, 33, 18: 33, 33, 33, 33, 33, 33, 25: 33, 33},
		{12: 32, 32, 32, 32, 18: 32, 32, 32, 32, 32, 32, 25: 32, 32},
		{12: 31, 31, 31, 31, 18: 31, 31, 31, 31, 31, 31, 25: 31, 31},
		// 85
		{12: 30, 30, 30, 30, 18: 30, 30, 30, 30, 30, 30, 25: 30, 30},
		{12: 29, 29, 29, 29, 18: 29, 29, 29, 29, 29, 29, 25: 29, 29},
		{12: 28, 28, 28, 28, 18: 28, 28, 28, 28, 28, 28, 25: 28, 28},
		{12: 27, 27, 27, 27, 18: 27, 27, 27, 27, 27, 27, 25: 27, 27},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 189, 25: 161, 160, 151, 48: 186, 163, 188, 53: 187},
		// 90
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 16: 24, 24, 24: 24, 28: 5, 5, 5, 5, 5},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 16: 23, 23, 24: 23},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16: 17, 17, 24: 17, 28: 197, 195, 193, 194, 196},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 189, 27: 151, 48: 191, 163, 190},
		{24: 192, 28: 197, 195, 193, 194, 196},
		// 95
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16: 5, 5, 24: 5, 28: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 16: 11, 11, 24: 11, 28: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 189, 27: 151, 48: 191, 163, 202},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 189, 27: 151, 48: 191, 163, 201},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 189, 27: 151, 48: 191, 163, 200},
		// 100
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 189, 27: 151, 48: 191, 163, 199},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 189, 27: 151, 48: 191, 163, 198},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 16: 6, 6, 24: 6, 28: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 16: 7, 7, 24: 7, 28: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16: 8, 8, 24: 8, 28: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		// 105
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 16: 9, 9, 24: 9, 28: 197, 195, 9, 9, 196, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 16: 10, 10, 24: 10, 28: 197, 195, 10, 10, 196, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{16: 211, 212, 24: 210},
		{16: 22, 22, 24: 209},
		{24: 192, 28: 197, 195, 193, 194, 196, 179, 178, 171, 170, 175, 174, 183, 184, 177, 176, 181, 182, 173, 172, 180, 58: 206},
		// 110
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 189, 27: 151, 48: 208, 163, 207},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16: 18, 18, 24: 18, 28: 197, 195, 193, 194, 196},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16: 16, 16, 24: 16, 28: 5, 5, 5, 5, 5},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 16: 19, 19, 24: 19},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 16: 26, 26, 24: 26},
		// 115
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 215, 159},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 214, 159},
		{28: 197, 195, 193, 194, 196, 179, 178, 171, 170, 175, 174, 183, 184, 177, 176, 181, 182, 173, 172, 180, 58: 206},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16: 211, 212, 24: 14},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16: 211, 212, 24: 15},
		// 120
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 16: 211, 212},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 16: 211, 212},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 16: 211, 212},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 221, 159},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 16: 211, 212},
		// 125
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 16: 211, 212},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 131, 129, 130, 27: 224},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		// 130
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{12: 131, 129, 130, 27: 230},
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 229, 159},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 16: 211, 212},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 231},
		// 135
		{12: 131, 129, 130, 150, 18: 162, 153, 152, 155, 154, 156, 25: 161, 160, 151, 48: 158, 163, 213, 53: 157, 55: 232, 159},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 16: 211, 212},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 92

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 3:
		{
			//run command put result into variable WHEN boolean_exp is true
			if strings.Contains(yyS[yypt-2].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}

			if yyS[yypt-0].boolean {
				yylex.(*lex).GlobalVars[yyS[yypt-2].variable.name] = yyS[yypt-4].cmd.Run(yylex.(*lex))
			}
		}
	case 4:
		{
			//command INTO variable
			if strings.Contains(yyS[yypt-0].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}
			yylex.(*lex).GlobalVars[yyS[yypt-0].variable.name] = yyS[yypt-2].cmd.Run(yylex.(*lex))
		}
	case 5:
		{
			//run the command only if boolean_exp is true
			if yyS[yypt-0].boolean {
				yyS[yypt-2].cmd.Run(yylex.(*lex))
			}
		}
	case 6:
		{
			//just run the command
			yyS[yypt-0].cmd.Run(yylex.(*lex))
			//run command without condition

		}
	case 16:
		{
			yyVAL.cmd = &SleepCommand{
				Millisecond: intVal(yyS[yypt-0].val),
			}
		}
	case 17:
		{
			yyVAL.cmd = &IncludeCommand{
				File: yyS[yypt-0].val.(string),
			}
		}
	case 18:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].vals,
			}
		}
	case 19:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 20:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 21:
		{
			return -1
		}
	case 22:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Assertion.Failed++
			} else {
				yylex.(*lex).State.Assertion.Succeeded++
			}
			yyVAL.cmd = &AssertCommand{}
		}
	case 23:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Must.Failed++
			} else {
				yylex.(*lex).State.Must.Succeeded++
			}

			yyVAL.cmd = &MustCommand{}
		}
	case 24:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Should.Failed++
			} else {
				yylex.(*lex).State.Should.Succeeded++
			}
			yyVAL.cmd = &ShouldCommand{}
		}
	case 25:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].vals,
			}
		}
	case 26:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].val,
			}
		}
	case 27:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].boolean,
			}
		}
	case 28:
		{
			//call http with header here.
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				CommandParams: yyS[yypt-0].http_command_params,
				Url:           yyS[yypt-1].str,
			}
		}
	case 29:
		{
			//simple http command
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].str,
			}
		}
	case 30:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 31:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 32:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].str,
			}
		}
	case 33:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].str,
			}
		}
	case 43:
		{
			//getting a single value from multi_value exp
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].variable)
		}
	case 44:
		{
			//multi value
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].variable)
		}
	case 45:
		{
			//string_or_var : STRING
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.val, _ = executeTemplate(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
			} else {
				yyVAL.val = yyS[yypt-0].val.(string)
			}
		}
	case 46:
		{
			//any_value : variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.val, _ = executeTemplate(yyS[yypt-0].variable.value.(string), yylex.(*lex).GlobalVars)
				} else {
					yyVAL.val = yyS[yypt-0].variable.value
				}
			default:
				yyVAL.val = yyS[yypt-0].variable.value
			}

		}
	case 47:
		{
			//number: INTEGER
			yyVAL.val = yyS[yypt-0].val
		}
	case 48:
		{
			//number: FLOAT
			yyVAL.val = yyS[yypt-0].val
		}
	case 50:
		{
			yyVAL.val = nil
		}
	case 51:
		{
			yyVAL.val = yyS[yypt-0].vals
		}
	case 52:
		{
			//getting variable
			yyVAL.variable.name = yyS[yypt-2].val.(string)
			yyVAL.variable.value = query(yyS[yypt-2].val.(string), yylex.(*lex).GlobalVars)
		}
	case 53:
		{
			yyVAL.variable.name = yyS[yypt-0].val.(string)
			yyVAL.variable.value = query(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
		}
	case 54:
		{
			yyVAL.variable.name = yyS[yypt-0].val.(string)
			yyVAL.variable.value = query(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
		}
	case 70:
		{
			//boolean_ex: '(' boolean_exp ')'
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 72:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 73:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].boolean)
			yyVAL.boolean = operator_result
		}
	case 75:
		{
			yyVAL.boolean = true
		}
	case 76:
		{
			yyVAL.boolean = false
		}
	case 77:
		{
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 78:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 79:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 80:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 81:
		{
			//boolean_ex: boolean_exp AND boolean_exp
			yyVAL.boolean = yyS[yypt-2].boolean && yyS[yypt-0].boolean
		}
	case 82:
		{
			//boolean_ex: boolean_exp OR boolean_exp
			yyVAL.boolean = yyS[yypt-2].boolean || yyS[yypt-0].boolean
		}
	case 83:
		{
			//string_var : STRING
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.str, _ = executeTemplate(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
			} else {
				yyVAL.str = yyS[yypt-0].val.(string)
			}
		}
	case 84:
		{
			//string_var : variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.str, _ = executeTemplate(yyS[yypt-0].variable.value.(string), yylex.(*lex).GlobalVars)
				} else {
					yyVAL.str = yyS[yypt-0].variable.value.(string)
				}
			default:
				yyVAL.str = fmt.Sprintf("%s", yyS[yypt-0].variable.value)
			}

		}
	case 85:
		{
			yyVAL.val = yyS[yypt-1].val
		}
	case 86:
		{
			yyVAL.val, _ = add(yyS[yypt-2].val, yyS[yypt-0].val)
		}
	case 87:
		{
			yyVAL.val, _ = subtract(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 88:
		{
			yyVAL.val, _ = multiply(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 89:
		{
			yyVAL.val, _ = divide(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 90:
		{
			yyVAL.val, _ = mod(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 92:
		{
			yyVAL.vals = make([]interface{}, 0)
		}
	case 93:
		{
			yyVAL.vals = yyS[yypt-1].vals
		}
	case 94:
		{
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 95:
		{
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func Parse(text string) *lex {

	l := &lex{
		tokens:     make(chan Token),
		State:      NewStats(),
		GlobalVars: map[string]interface{}{},
	}

	if Verbose {
		yyDebug = 3
	}

	go func() {
		s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
		for {
			l.tokens <- s.Scan()
		}
	}()

	return l
}

func Run(l *lex) {
	yyParse(l)
}
