// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"log"
	"strconv"
	"strings"
)

var GlobalVars = map[string]interface{}{}

type yySymType struct {
	yys      int
	val      interface{}
	vals     []interface{}
	str      string
	integer  int
	boolean  bool
	flt      int64
	bytes    []byte
	cmd      Command
	variable struct {
		name  string
		value interface{}
	}
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57385
	yyEofCode  = 57344
	AND        = 57381
	ASSERT     = 57360
	CONNECT    = 57366
	CONTAINS   = 57378
	DEBUG      = 57358
	DELETE     = 57365
	END        = 57359
	EOF        = 57347
	EOL        = 57346
	EQUALS     = 57372
	FALSE      = 57352
	FLOAT      = 57350
	GE         = 57375
	GET        = 57361
	GT         = 57374
	HEAD       = 57362
	HEADER     = 57370
	HTTP       = 57355
	IDENTIFIER = 57384
	INTEGER    = 57349
	INTO       = 57383
	KEYWORD    = 57353
	LE         = 57377
	LT         = 57376
	MUST       = 57356
	NOTEQUALS  = 57373
	OPTIONS    = 57367
	OR         = 57382
	PATCH      = 57369
	POST       = 57363
	PUT        = 57364
	QUERY      = 57371
	SET        = 57354
	SHOULD     = 57357
	STARTSWITH = 57379
	STRING     = 57348
	TRACE      = 57368
	TRUE       = 57351
	WHEN       = 57380
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -61
)

var (
	yyPrec = map[int]int{}

	yyXLAT = map[int]int{
		123:   0,  // '{' (51x)
		57348: 1,  // STRING (48x)
		57344: 2,  // $end (44x)
		57360: 3,  // ASSERT (43x)
		57358: 4,  // DEBUG (43x)
		57359: 5,  // END (43x)
		57355: 6,  // HTTP (43x)
		57356: 7,  // MUST (43x)
		57354: 8,  // SET (43x)
		57357: 9,  // SHOULD (43x)
		57380: 10, // WHEN (39x)
		57383: 11, // INTO (38x)
		40:    12, // '(' (36x)
		57352: 13, // FALSE (36x)
		57350: 14, // FLOAT (36x)
		57349: 15, // INTEGER (36x)
		57351: 16, // TRUE (36x)
		57378: 17, // CONTAINS (24x)
		57372: 18, // EQUALS (24x)
		57375: 19, // GE (24x)
		57374: 20, // GT (24x)
		57377: 21, // LE (24x)
		57376: 22, // LT (24x)
		57373: 23, // NOTEQUALS (24x)
		57379: 24, // STARTSWITH (24x)
		57381: 25, // AND (20x)
		57382: 26, // OR (20x)
		57404: 27, // variable (19x)
		57387: 28, // any_value (14x)
		57389: 29, // boolean_exp (14x)
		41:    30, // ')' (13x)
		57370: 31, // HEADER (9x)
		57371: 32, // QUERY (9x)
		57400: 33, // operator (5x)
		57403: 34, // string_or_var (3x)
		125:   35, // '}' (2x)
		57386: 36, // any_command (2x)
		57388: 37, // assert_command (2x)
		57390: 38, // command (2x)
		57391: 39, // command_with_condition_opt (2x)
		57392: 40, // debug_command (2x)
		57393: 41, // end_command (2x)
		57394: 42, // http_command (2x)
		57395: 43, // http_command_param (2x)
		57399: 44, // must_command (2x)
		57401: 45, // set_command (2x)
		57402: 46, // should_command (2x)
		57366: 47, // CONNECT (1x)
		57365: 48, // DELETE (1x)
		57361: 49, // GET (1x)
		57362: 50, // HEAD (1x)
		57396: 51, // http_command_params (1x)
		57397: 52, // http_method (1x)
		57384: 53, // IDENTIFIER (1x)
		57398: 54, // multi_any_value (1x)
		57367: 55, // OPTIONS (1x)
		57369: 56, // PATCH (1x)
		57363: 57, // POST (1x)
		57364: 58, // PUT (1x)
		57368: 59, // TRACE (1x)
		57385: 60, // $default (0x)
		57347: 61, // EOF (0x)
		57346: 62, // EOL (0x)
		57345: 63, // error (0x)
		57353: 64, // KEYWORD (0x)
	}

	yySymNames = []string{
		"'{'",
		"STRING",
		"$end",
		"ASSERT",
		"DEBUG",
		"END",
		"HTTP",
		"MUST",
		"SET",
		"SHOULD",
		"WHEN",
		"INTO",
		"'('",
		"FALSE",
		"FLOAT",
		"INTEGER",
		"TRUE",
		"CONTAINS",
		"EQUALS",
		"GE",
		"GT",
		"LE",
		"LT",
		"NOTEQUALS",
		"STARTSWITH",
		"AND",
		"OR",
		"variable",
		"any_value",
		"boolean_exp",
		"')'",
		"HEADER",
		"QUERY",
		"operator",
		"string_or_var",
		"'}'",
		"any_command",
		"assert_command",
		"command",
		"command_with_condition_opt",
		"debug_command",
		"end_command",
		"http_command",
		"http_command_param",
		"must_command",
		"set_command",
		"should_command",
		"CONNECT",
		"DELETE",
		"GET",
		"HEAD",
		"http_command_params",
		"http_method",
		"IDENTIFIER",
		"multi_any_value",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"TRACE",
		"$default",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {36, 1},
		2:  {36, 2},
		3:  {39, 5},
		4:  {39, 3},
		5:  {39, 3},
		6:  {39, 1},
		7:  {38, 1},
		8:  {38, 1},
		9:  {38, 1},
		10: {38, 1},
		11: {38, 1},
		12: {38, 1},
		13: {38, 1},
		14: {40, 2},
		15: {41, 3},
		16: {41, 2},
		17: {41, 1},
		18: {37, 2},
		19: {44, 2},
		20: {46, 2},
		21: {45, 3},
		22: {42, 4},
		23: {42, 3},
		24: {51, 1},
		25: {51, 2},
		26: {43, 2},
		27: {43, 2},
		28: {52, 1},
		29: {52, 1},
		30: {52, 1},
		31: {52, 1},
		32: {52, 1},
		33: {52, 1},
		34: {52, 1},
		35: {52, 1},
		36: {52, 1},
		37: {54, 1},
		38: {54, 2},
		39: {28, 1},
		40: {28, 1},
		41: {28, 1},
		42: {28, 1},
		43: {28, 1},
		44: {34, 1},
		45: {34, 1},
		46: {27, 5},
		47: {33, 1},
		48: {33, 1},
		49: {33, 1},
		50: {33, 1},
		51: {33, 1},
		52: {33, 1},
		53: {33, 1},
		54: {33, 1},
		55: {29, 1},
		56: {29, 1},
		57: {29, 3},
		58: {29, 3},
		59: {29, 3},
		60: {29, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [86][]uint16{
		// 0
		{3: 74, 72, 73, 78, 75, 77, 76, 36: 62, 69, 64, 63, 67, 68, 66, 44: 70, 65, 71},
		{2: 61},
		{2: 60, 74, 72, 73, 78, 75, 77, 76, 36: 146, 69, 64, 63, 67, 68, 66, 44: 70, 65, 71},
		{2: 55, 55, 55, 55, 55, 55, 55, 55, 141, 140},
		{2: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		// 5
		{2: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{2: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{2: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{2: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{2: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		// 10
		{2: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 138, 109, 54: 137},
		{92, 106, 44, 44, 44, 44, 44, 44, 44, 44, 134, 44, 113, 112, 107, 108, 111, 27: 110, 115, 135},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 133},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 132},
		// 15
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 131},
		{92, 27: 104},
		{47: 85, 84, 80, 81, 52: 79, 55: 86, 88, 82, 83, 87},
		{92, 91, 27: 90, 34: 89},
		{33, 33},
		// 20
		{32, 32},
		{31, 31},
		{30, 30},
		{29, 29},
		{28, 28},
		// 25
		{27, 27},
		{26, 26},
		{25, 25},
		{2: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 31: 99, 100, 43: 98, 51: 97},
		{2: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 31: 17, 17},
		// 30
		{2: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31: 16, 16},
		{93},
		{53: 94},
		{35: 95},
		{35: 96},
		// 35
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 30: 15, 15, 15},
		{2: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 31: 99, 100, 43: 103},
		{2: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 31: 37, 37},
		{92, 91, 27: 90, 34: 102},
		{92, 91, 27: 90, 34: 101},
		// 40
		{2: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 31: 34, 34},
		{2: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 31: 35, 35},
		{2: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 31: 36, 36},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 105, 109},
		{2: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 17: 122, 116, 119, 118, 121, 120, 117, 123, 33: 124},
		// 45
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 30: 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 30: 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30: 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 126, 127, 30: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 30: 18},
		// 50
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 30: 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 30: 5},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 114},
		{17: 19, 19, 19, 19, 19, 19, 19, 19, 126, 127, 30: 128},
		{17: 122, 116, 119, 118, 121, 120, 117, 123, 33: 124},
		// 55
		{14, 14, 12: 14, 14, 14, 14, 14},
		{13, 13, 12: 13, 13, 13, 13, 13},
		{12, 12, 12: 12, 12, 12, 12, 12},
		{11, 11, 12: 11, 11, 11, 11, 11},
		{10, 10, 12: 10, 10, 10, 10, 10},
		// 60
		{9, 9, 12: 9, 9, 9, 9, 9},
		{8, 8, 12: 8, 8, 8, 8, 8},
		{7, 7, 12: 7, 7, 7, 7, 7},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 125, 109},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 122, 116, 119, 118, 121, 120, 117, 123, 1, 1, 30: 1, 33: 124},
		// 65
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 130},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 129},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 30: 2},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 19, 19, 19, 19, 19, 19, 19, 19, 126, 127, 30: 3},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 19, 19, 19, 19, 19, 19, 19, 19, 126, 127, 30: 4},
		// 70
		{2: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 17: 19, 19, 19, 19, 19, 19, 19, 19, 126, 127},
		{2: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 17: 19, 19, 19, 19, 19, 19, 19, 19, 126, 127},
		{2: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 17: 19, 19, 19, 19, 19, 19, 19, 19, 126, 127},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 136},
		{2: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 17: 19, 19, 19, 19, 19, 19, 19, 19, 126, 127},
		// 75
		{2: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 17: 19, 19, 19, 19, 19, 19, 19, 19, 126, 127},
		{92, 106, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 113, 112, 107, 108, 111, 27: 110, 139, 109},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 122, 116, 119, 118, 121, 120, 117, 123, 33: 124},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 122, 116, 119, 118, 121, 120, 117, 123, 33: 124},
		{92, 27: 143},
		// 80
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 142},
		{2: 56, 56, 56, 56, 56, 56, 56, 56, 17: 19, 19, 19, 19, 19, 19, 19, 19, 126, 127},
		{2: 57, 57, 57, 57, 57, 57, 57, 57, 144},
		{92, 106, 12: 113, 112, 107, 108, 111, 27: 110, 115, 145},
		{2: 58, 58, 58, 58, 58, 58, 58, 58, 17: 19, 19, 19, 19, 19, 19, 19, 19, 126, 127},
		// 85
		{2: 59},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 63

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 3:
		{
			//run command put result into variable WHEN boolean_exp is true
			if strings.Contains(yyS[yypt-2].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}

			if yyS[yypt-0].boolean {
				GlobalVars[yyS[yypt-2].variable.name] = yyS[yypt-4].cmd.Run()
			}
		}
	case 4:
		{
			//command INTO variable
			if strings.Contains(yyS[yypt-0].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}
			GlobalVars[yyS[yypt-0].variable.name] = yyS[yypt-2].cmd.Run()
		}
	case 5:
		{
			//run the command only if boolean_exp is true
			if yyS[yypt-0].boolean {
				yyS[yypt-2].cmd.Run()
			}
		}
	case 6:
		{
			//just run the command
			yyS[yypt-0].cmd.Run()
			//run command without condition

		}
	case 14:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].vals,
			}
		}
	case 15:
		{
			if yyS[yypt-0].boolean {
				return -1
			}
			yyVAL.cmd = &EndCommand{}
		}
	case 16:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 17:
		{
			return -1
		}
	case 18:
		{
			yyVAL.cmd = &AssertCommand{}
		}
	case 19:
		{
			//if $2 is false, fail
			yyVAL.cmd = &MustCommand{}
		}
	case 20:
		{
			//if $2 is false, write a warning
			yyVAL.cmd = &ShouldCommand{}
		}
	case 21:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].val,
			}
		}
	case 22:
		{
			//call http with header here.
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				CommandParams: yyS[yypt-0].http_command_params,
				Url:           yyS[yypt-1].val.(string),
			}
		}
	case 23:
		{
			//simple http command
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].val.(string),
			}
		}
	case 24:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 25:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 26:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].val.(string),
			}
		}
	case 27:
		{
			//adding query param
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].val.(string),
			}
		}
	case 28:
		{
			//http get
			yyVAL.val = yyS[yypt-0].val
		}
	case 29:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 30:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 31:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 32:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 33:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 34:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 35:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 36:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 37:
		{
			//getting a single value from multi_value exp
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 38:
		{
			//multi value
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 39:
		{
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.val, _ = executeTemplate(yyS[yypt-0].val.(string), GlobalVars)
			} else {
				yyVAL.val = yyS[yypt-0].val
			}

		}
	case 41:
		{
			yyVAL.val, _ = strconv.Atoi(yyS[yypt-0].val.(string))
		}
	case 42:
		{
			yyVAL.val = yyS[yypt-0].boolean
		}
	case 43:
		{
			//found variable in any_value token
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.val, _ = executeTemplate(yyS[yypt-0].variable.value.(string), GlobalVars)
				} else {
					yyVAL.val = yyS[yypt-0].variable.value
				}
			default:
				yyVAL.val = yyS[yypt-0].variable.value
			}
		}
	case 44:
		{
			//found variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.val, _ = executeTemplate(yyS[yypt-0].variable.value.(string), GlobalVars)
				} else {
					yyVAL.val = yyS[yypt-0].variable.value
				}
			default:
				yyVAL.val = yyS[yypt-0].variable.value
			}

		}
	case 45:
		{
			//found string
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.val, _ = executeTemplate(yyS[yypt-0].val.(string), GlobalVars)
			} else {
				yyVAL.val = yyS[yypt-0].val
			}
		}
	case 46:
		{
			//getting variable
			yyVAL.variable.name = yyS[yypt-2].val.(string)
			yyVAL.variable.value = query(yyS[yypt-2].val.(string), GlobalVars)
		}
	case 55:
		{
			yyVAL.boolean = true
		}
	case 56:
		{
			yyVAL.boolean = false
		}
	case 57:
		{
			yyVAL.boolean = yyS[yypt-2].boolean && yyS[yypt-0].boolean
		}
	case 58:
		{
			yyVAL.boolean = yyS[yypt-2].boolean || yyS[yypt-0].boolean
		}
	case 59:
		{
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 60:
		{
			//what should we do here?
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

type lex struct {
	tokens []Token
}

func (l *lex) Lex(lval *yySymType) int {
	if len(l.tokens) == 0 {
		return 0
	}

	v := l.tokens[0]
	l.tokens = l.tokens[1:]
	lval.val = v.Text
	return v.Type
}

func (l *lex) Error(e string) {
	log.Fatal(e)
}

func Parse(text string) *lex {
	s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
	tokens := make(Tokens, 0)

	for {
		token := s.Scan()
		//fmt.Println(token)
		if token.Type == EOF || token.Type == -1 {
			break
		}
		tokens = append(tokens, token)
	}

	l := &lex{tokens}

	return l
}

func Run(l *lex) {
	yyParse(l)
}
