// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"log"
	"strings"
)

var GlobalVars = map[string]interface{}{}

type yySymType struct {
	yys      int
	val      interface{}
	vals     []interface{}
	str      string
	integer  int
	boolean  bool
	flt      int64
	bytes    []byte
	cmd      Command
	variable struct {
		name  string
		value interface{}
	}
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57390
	yyEofCode  = 57344
	AND        = 57384
	ASSERT     = 57360
	BODY       = 57371
	CONNECT    = 57366
	CONTAIN    = 57381
	CONTAINS   = 57380
	DEBUG      = 57358
	DELETE     = 57365
	END        = 57359
	EOF        = 57347
	EOL        = 57346
	EQUAL      = 57373
	EQUALS     = 57372
	FALSE      = 57352
	FLOAT      = 57350
	GE         = 57377
	GET        = 57361
	GT         = 57376
	HEAD       = 57362
	HEADER     = 57370
	HTTP       = 57355
	IDENTIFIER = 57389
	INTEGER    = 57349
	INTO       = 57388
	KEYWORD    = 57353
	LE         = 57379
	LT         = 57378
	MATCH      = 57387
	MATCHES    = 57386
	MUST       = 57356
	NOTEQUAL   = 57375
	NOTEQUALS  = 57374
	OPTIONS    = 57367
	OR         = 57385
	PATCH      = 57369
	POST       = 57363
	PUT        = 57364
	SET        = 57354
	SHOULD     = 57357
	STARTSWITH = 57382
	STRING     = 57348
	TRACE      = 57368
	TRUE       = 57351
	WHEN       = 57383
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -80
)

var (
	yyPrec = map[int]int{
		'|': 0,
		'&': 1,
		'+': 2,
		'-': 2,
		'*': 3,
		'/': 3,
		'%': 3,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (61x)
		57360: 1,  // ASSERT (61x)
		57358: 2,  // DEBUG (61x)
		57359: 3,  // END (61x)
		57355: 4,  // HTTP (61x)
		57356: 5,  // MUST (61x)
		57354: 6,  // SET (61x)
		57357: 7,  // SHOULD (61x)
		57383: 8,  // WHEN (56x)
		123:   9,  // '{' (55x)
		57388: 10, // INTO (55x)
		57348: 11, // STRING (48x)
		57350: 12, // FLOAT (42x)
		57349: 13, // INTEGER (42x)
		57384: 14, // AND (35x)
		57385: 15, // OR (35x)
		40:    16, // '(' (33x)
		41:    17, // ')' (29x)
		57412: 18, // variable (24x)
		57381: 19, // CONTAIN (21x)
		57380: 20, // CONTAINS (21x)
		57373: 21, // EQUAL (21x)
		57372: 22, // EQUALS (21x)
		57377: 23, // GE (21x)
		57376: 24, // GT (21x)
		57379: 25, // LE (21x)
		57378: 26, // LT (21x)
		57387: 27, // MATCH (21x)
		57386: 28, // MATCHES (21x)
		57375: 29, // NOTEQUAL (21x)
		57374: 30, // NOTEQUALS (21x)
		57382: 31, // STARTSWITH (21x)
		37:    32, // '%' (20x)
		42:    33, // '*' (20x)
		43:    34, // '+' (20x)
		45:    35, // '-' (20x)
		47:    36, // '/' (20x)
		57399: 37, // expr (19x)
		57407: 38, // number (19x)
		57411: 39, // string_or_var (16x)
		57392: 40, // any_value (15x)
		57352: 41, // FALSE (12x)
		57351: 42, // TRUE (12x)
		57394: 43, // boolean_exp (11x)
		57400: 44, // expr_opr (11x)
		57371: 45, // BODY (9x)
		57370: 46, // HEADER (9x)
		57408: 47, // operator (5x)
		125:   48, // '}' (2x)
		57402: 49, // http_command_param (2x)
		57391: 50, // any_command (1x)
		57393: 51, // assert_command (1x)
		57395: 52, // command (1x)
		57396: 53, // command_with_condition_opt (1x)
		57366: 54, // CONNECT (1x)
		57397: 55, // debug_command (1x)
		57365: 56, // DELETE (1x)
		57398: 57, // end_command (1x)
		57361: 58, // GET (1x)
		57362: 59, // HEAD (1x)
		57401: 60, // http_command (1x)
		57403: 61, // http_command_params (1x)
		57404: 62, // http_method (1x)
		57389: 63, // IDENTIFIER (1x)
		57405: 64, // multi_any_value (1x)
		57406: 65, // must_command (1x)
		57367: 66, // OPTIONS (1x)
		57369: 67, // PATCH (1x)
		57363: 68, // POST (1x)
		57364: 69, // PUT (1x)
		57409: 70, // set_command (1x)
		57410: 71, // should_command (1x)
		57368: 72, // TRACE (1x)
		57390: 73, // $default (0x)
		38:    74, // '&' (0x)
		124:   75, // '|' (0x)
		57347: 76, // EOF (0x)
		57346: 77, // EOL (0x)
		57345: 78, // error (0x)
		57353: 79, // KEYWORD (0x)
	}

	yySymNames = []string{
		"$end",
		"ASSERT",
		"DEBUG",
		"END",
		"HTTP",
		"MUST",
		"SET",
		"SHOULD",
		"WHEN",
		"'{'",
		"INTO",
		"STRING",
		"FLOAT",
		"INTEGER",
		"AND",
		"OR",
		"'('",
		"')'",
		"variable",
		"CONTAIN",
		"CONTAINS",
		"EQUAL",
		"EQUALS",
		"GE",
		"GT",
		"LE",
		"LT",
		"MATCH",
		"MATCHES",
		"NOTEQUAL",
		"NOTEQUALS",
		"STARTSWITH",
		"'%'",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"expr",
		"number",
		"string_or_var",
		"any_value",
		"FALSE",
		"TRUE",
		"boolean_exp",
		"expr_opr",
		"BODY",
		"HEADER",
		"operator",
		"'}'",
		"http_command_param",
		"any_command",
		"assert_command",
		"command",
		"command_with_condition_opt",
		"CONNECT",
		"debug_command",
		"DELETE",
		"end_command",
		"GET",
		"HEAD",
		"http_command",
		"http_command_params",
		"http_method",
		"IDENTIFIER",
		"multi_any_value",
		"must_command",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"set_command",
		"should_command",
		"TRACE",
		"$default",
		"'&'",
		"'|'",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {50, 0},
		2:  {50, 2},
		3:  {53, 5},
		4:  {53, 3},
		5:  {53, 3},
		6:  {53, 1},
		7:  {52, 1},
		8:  {52, 1},
		9:  {52, 1},
		10: {52, 1},
		11: {52, 1},
		12: {52, 1},
		13: {52, 1},
		14: {55, 2},
		15: {57, 3},
		16: {57, 2},
		17: {57, 1},
		18: {51, 2},
		19: {65, 2},
		20: {71, 2},
		21: {70, 3},
		22: {70, 3},
		23: {70, 3},
		24: {60, 4},
		25: {60, 3},
		26: {61, 1},
		27: {61, 2},
		28: {49, 2},
		29: {49, 2},
		30: {62, 1},
		31: {62, 1},
		32: {62, 1},
		33: {62, 1},
		34: {62, 1},
		35: {62, 1},
		36: {62, 1},
		37: {62, 1},
		38: {62, 1},
		39: {64, 1},
		40: {64, 2},
		41: {40, 1},
		42: {40, 1},
		43: {40, 1},
		44: {39, 1},
		45: {39, 1},
		46: {18, 5},
		47: {47, 1},
		48: {47, 1},
		49: {47, 1},
		50: {47, 1},
		51: {47, 1},
		52: {47, 1},
		53: {47, 1},
		54: {47, 1},
		55: {47, 1},
		56: {47, 1},
		57: {47, 1},
		58: {47, 1},
		59: {47, 1},
		60: {43, 3},
		61: {43, 1},
		62: {43, 1},
		63: {43, 3},
		64: {43, 3},
		65: {43, 3},
		66: {43, 1},
		67: {44, 3},
		68: {44, 3},
		69: {44, 3},
		70: {37, 3},
		71: {37, 3},
		72: {37, 3},
		73: {37, 3},
		74: {37, 3},
		75: {37, 3},
		76: {37, 1},
		77: {38, 1},
		78: {38, 1},
		79: {38, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [117][]uint16{
		// 0
		{79, 79, 79, 79, 79, 79, 79, 79, 50: 81},
		{80, 93, 91, 92, 97, 94, 96, 95, 51: 88, 83, 82, 55: 86, 57: 87, 60: 85, 65: 89, 70: 84, 90},
		{78, 78, 78, 78, 78, 78, 78, 78},
		{74, 74, 74, 74, 74, 74, 74, 74, 192, 10: 191},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 10: 73},
		// 5
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 10: 72},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 10: 71},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 10: 70},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 10: 69},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 10: 68},
		// 10
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 10: 67},
		{9: 111, 11: 110, 188, 189, 18: 109, 39: 127, 187, 64: 186},
		{63, 63, 63, 63, 63, 63, 63, 63, 183, 111, 63, 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 184, 134},
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 182, 134},
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 181, 134},
		// 15
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 180, 134},
		{9: 111, 18: 123},
		{54: 104, 56: 103, 58: 99, 100, 62: 98, 66: 105, 107, 101, 102, 72: 106},
		{9: 111, 11: 110, 18: 109, 39: 108},
		{9: 50, 11: 50},
		// 20
		{9: 49, 11: 49},
		{9: 48, 11: 48},
		{9: 47, 11: 47},
		{9: 46, 11: 46},
		{9: 45, 11: 45},
		// 25
		{9: 44, 11: 44},
		{9: 43, 11: 43},
		{9: 42, 11: 42},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 10: 55, 45: 119, 118, 49: 117, 61: 116},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 45: 36, 36},
		// 30
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 17: 35, 19: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 45: 35, 35},
		{9: 112},
		{63: 113},
		{48: 114},
		{48: 115},
		// 35
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 19: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 41: 34, 34, 45: 34, 34},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 10: 56, 45: 119, 118, 49: 122},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 10: 54, 45: 54, 54},
		{11: 121},
		{11: 120},
		// 40
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 10: 51, 45: 51, 51},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 10: 52, 45: 52, 52},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 10: 53, 45: 53, 53},
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 125, 135, 127, 124, 133, 132, 126, 134},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 10: 59, 19: 148, 147, 140, 139, 144, 143, 146, 145, 150, 151, 142, 141, 149, 47: 171},
		// 45
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 10: 58, 19: 148, 147, 140, 139, 144, 143, 146, 145, 150, 151, 142, 141, 149, 158, 156, 154, 155, 157, 47: 152},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 10: 57, 14: 175, 176},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 17: 39, 19: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 10: 38, 14: 38, 38, 17: 38, 19: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 2, 2, 2, 2, 2},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 10: 37, 14: 37, 37, 17: 37, 19: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 3, 3, 3, 3, 3},
		// 50
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 10: 36, 14: 36, 36, 17: 36, 19: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 1, 1, 1, 1, 1},
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 138, 135, 127, 137, 133, 132, 136, 134},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 10: 19, 14: 19, 19, 17: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 10: 18, 14: 18, 18, 17: 18},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 10: 14, 14: 14, 14, 17: 14},
		// 55
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 10: 4, 14: 4, 4, 17: 4, 19: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{14: 175, 176, 17: 174},
		{19: 148, 147, 140, 139, 144, 143, 146, 145, 150, 151, 142, 141, 149, 47: 171},
		{17: 153, 19: 148, 147, 140, 139, 144, 143, 146, 145, 150, 151, 142, 141, 149, 158, 156, 154, 155, 157, 47: 152},
		{9: 33, 11: 33, 33, 33, 16: 33},
		// 60
		{9: 32, 11: 32, 32, 32, 16: 32},
		{9: 31, 11: 31, 31, 31, 16: 31},
		{9: 30, 11: 30, 30, 30, 16: 30},
		{9: 29, 11: 29, 29, 29, 16: 29},
		{9: 28, 11: 28, 28, 28, 16: 28},
		// 65
		{9: 27, 11: 27, 27, 27, 16: 27},
		{9: 26, 11: 26, 26, 26, 16: 26},
		{9: 25, 11: 25, 25, 25, 16: 25},
		{9: 24, 11: 24, 24, 24, 16: 24},
		{9: 23, 11: 23, 23, 23, 16: 23},
		// 70
		{9: 22, 11: 22, 22, 22, 16: 22},
		{9: 21, 11: 21, 21, 21, 16: 21},
		{9: 111, 11: 110, 128, 129, 16: 159, 18: 130, 37: 169, 135, 127, 170},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10: 10, 14: 10, 10, 17: 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{9: 111, 12: 162, 161, 16: 159, 18: 163, 37: 168, 135},
		// 75
		{9: 111, 12: 162, 161, 16: 159, 18: 163, 37: 167, 135},
		{9: 111, 12: 162, 161, 16: 159, 18: 163, 37: 166, 135},
		{9: 111, 12: 162, 161, 16: 159, 18: 163, 37: 165, 135},
		{9: 111, 12: 162, 161, 16: 159, 18: 163, 37: 160, 135},
		{9: 111, 12: 162, 161, 16: 159, 18: 163, 37: 164, 135},
		// 80
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 10: 5, 14: 5, 5, 17: 5, 19: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 10: 3, 14: 3, 3, 17: 3, 19: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 10: 2, 14: 2, 2, 17: 2, 19: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 10: 1, 14: 1, 1, 17: 1, 19: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{17: 153, 32: 158, 156, 154, 155, 157},
		// 85
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 10: 6, 14: 6, 6, 17: 6, 19: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 10: 7, 14: 7, 7, 17: 7, 19: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 10: 8, 14: 8, 8, 17: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 158, 156, 8, 8, 157},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 10: 9, 14: 9, 9, 17: 9, 19: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 158, 156, 9, 9, 157},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 10: 13, 14: 13, 13, 17: 13, 32: 158, 156, 154, 155, 157},
		// 90
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 10: 11, 14: 11, 11, 17: 11},
		{9: 111, 11: 110, 128, 129, 16: 159, 18: 130, 37: 173, 135, 127, 172},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 10: 15, 14: 15, 15, 17: 15},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 10: 12, 14: 12, 12, 17: 12, 32: 158, 156, 154, 155, 157},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 10: 20, 14: 20, 20, 17: 20},
		// 95
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 179, 134},
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 177, 134},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 10: 16, 14: 175, 176, 17: 16},
		{19: 148, 147, 140, 139, 144, 143, 146, 145, 150, 151, 142, 141, 149, 158, 156, 154, 155, 157, 47: 152},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 10: 17, 14: 175, 176, 17: 17},
		// 100
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 10: 60, 14: 175, 176},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 10: 61, 14: 175, 176},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 10: 62, 14: 175, 176},
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 185, 134},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 10: 64, 14: 175, 176},
		// 105
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 10: 65, 14: 175, 176},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 111, 66, 110, 188, 189, 18: 109, 39: 127, 190},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 110
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{9: 111, 18: 194},
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 193, 134},
		{75, 75, 75, 75, 75, 75, 75, 75, 14: 175, 176},
		{76, 76, 76, 76, 76, 76, 76, 76, 195},
		// 115
		{9: 111, 11: 110, 128, 129, 16: 131, 18: 130, 37: 178, 135, 127, 137, 133, 132, 196, 134},
		{77, 77, 77, 77, 77, 77, 77, 77, 14: 175, 176},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 78

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 3:
		{
			//run command put result into variable WHEN boolean_exp is true
			if strings.Contains(yyS[yypt-2].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}

			if yyS[yypt-0].boolean {
				GlobalVars[yyS[yypt-2].variable.name] = yyS[yypt-4].cmd.Run()
			}
		}
	case 4:
		{
			//command INTO variable
			if strings.Contains(yyS[yypt-0].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}
			GlobalVars[yyS[yypt-0].variable.name] = yyS[yypt-2].cmd.Run()
		}
	case 5:
		{
			//run the command only if boolean_exp is true
			if yyS[yypt-0].boolean {
				yyS[yypt-2].cmd.Run()
			}
		}
	case 6:
		{
			//just run the command
			yyS[yypt-0].cmd.Run()
			//run command without condition

		}
	case 14:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].vals,
			}
		}
	case 15:
		{
			if yyS[yypt-0].boolean {
				return -1
			}
			yyVAL.cmd = &EndCommand{}
		}
	case 16:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 17:
		{
			return -1
		}
	case 18:
		{
			if !yyS[yypt-0].boolean {
				State.Assertion.Failed++
			} else {
				State.Assertion.Succeeded++
			}
			yyVAL.cmd = &AssertCommand{}
		}
	case 19:
		{
			if !yyS[yypt-0].boolean {
				State.Must.Failed++
			} else {
				State.Must.Succeeded++
			}

			yyVAL.cmd = &MustCommand{}
		}
	case 20:
		{
			if !yyS[yypt-0].boolean {
				State.Should.Failed++
			} else {
				State.Should.Succeeded++
			}
			yyVAL.cmd = &ShouldCommand{}
		}
	case 21:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].val,
			}
		}
	case 22:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].val,
			}
		}
	case 23:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].boolean,
			}
		}
	case 24:
		{
			//call http with header here.
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				CommandParams: yyS[yypt-0].http_command_params,
				Url:           yyS[yypt-1].val.(string),
			}
		}
	case 25:
		{
			//simple http command
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].val.(string),
			}
		}
	case 26:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 27:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 28:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].val.(string),
			}
		}
	case 29:
		{
			//adding query param
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].val.(string),
			}
		}
	case 30:
		{
			//http get
			yyVAL.val = yyS[yypt-0].val
		}
	case 31:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 32:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 33:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 34:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 35:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 36:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 37:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 38:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 39:
		{
			//getting a single value from multi_value exp
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 40:
		{
			//multi value
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 41:
		{
			//any_value: string_or_var
			yyVAL.val = yyS[yypt-0].val
		}
	case 42:
		{
			//any_value: FLOAT
			yyVAL.val = yyS[yypt-0].val
		}
	case 43:
		{
			//any_value: INTEGER
			yyVAL.val = yyS[yypt-0].val
		}
	case 44:
		{
			//string_or_var : variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.val, _ = executeTemplate(yyS[yypt-0].variable.value.(string), GlobalVars)
				} else {
					yyVAL.val = yyS[yypt-0].variable.value
				}
			default:
				yyVAL.val = yyS[yypt-0].variable.value
			}

		}
	case 45:
		{
			//string_or_var : STRING
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.val, _ = executeTemplate(yyS[yypt-0].val.(string), GlobalVars)
			} else {

			}
		}
	case 46:
		{
			//getting variable
			yyVAL.variable.name = yyS[yypt-2].val.(string)
			yyVAL.variable.value = query(yyS[yypt-2].val.(string), GlobalVars)
		}
	case 60:
		{
			//boolean_ex: '(' boolean_exp ')'
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 61:
		{
			yyVAL.boolean = true
		}
	case 62:
		{
			yyVAL.boolean = false
		}
	case 63:
		{
			//boolean_ex: boolean_exp AND boolean_exp
			yyVAL.boolean = IsTrue(yyS[yypt-2].boolean) && IsTrue(yyS[yypt-0].boolean)
		}
	case 64:
		{
			//boolean_ex: boolean_exp OR boolean_exp
			yyVAL.boolean = IsTrue(yyS[yypt-2].boolean) || IsTrue(yyS[yypt-0].boolean)
		}
	case 65:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 67:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 68:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 69:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 70:
		{
			yyVAL.val = yyS[yypt-1].val
		}
	case 71:
		{
			yyVAL.val, _ = add(yyS[yypt-2].val, yyS[yypt-0].val)
		}
	case 72:
		{
			yyVAL.val, _ = subtract(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 73:
		{
			yyVAL.val, _ = multiply(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 74:
		{
			yyVAL.val, _ = divide(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 75:
		{
			yyVAL.val, _ = mod(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 77:
		{
			//number: INTEGER
			yyVAL.val = yyS[yypt-0].val
		}
	case 78:
		{
			//number: FLOAT
			yyVAL.val = yyS[yypt-0].val
		}
	case 79:
		{
			//number: variable
			yyVAL.val = yyS[yypt-0].variable.value
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

type lex struct {
	tokens []Token
}

func (l *lex) Lex(lval *yySymType) int {
	if len(l.tokens) == 0 {
		return 0
	}

	v := l.tokens[0]
	l.tokens = l.tokens[1:]
	lval.val = v.Val
	return v.Type
}

func (l *lex) Error(e string) {
	log.Fatal(e)
}

//TODO: use channels here.
func Parse(text string) *lex {
	s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
	tokens := make(Tokens, 0)

	for {
		token := s.Scan()
		//fmt.Println(token)
		if token.Type == EOF || token.Type == -1 {
			break
		}
		tokens = append(tokens, token)
	}
	l := &lex{tokens}
	return l
}

func Reset() {
	GlobalVars = map[string]interface{}{}
	State = NewStats()
}

func Run(l *lex) {
	yyParse(l)
}
