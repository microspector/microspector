// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"github.com/microspector/microspector/pkg/templating"
	"strings"
)

type yySymType struct {
	yys      int
	val      interface{}
	vals     []interface{}
	str      string
	integer  int64
	boolean  bool
	bytes    []byte
	cmd      Command
	variable struct {
		name  string
		value interface{}
	}
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57403
	yyEofCode  = 57344
	AND        = 57392
	ASSERT     = 57361
	ASYNC      = 57365
	BODY       = 57376
	CMD        = 57364
	CONNECT    = 57371
	CONTAIN    = 57388
	CONTAINS   = 57387
	DEBUG      = 57359
	DELETE     = 57370
	END        = 57360
	EOF        = 57347
	EOL        = 57346
	EQUAL      = 57380
	EQUALS     = 57379
	FALSE      = 57352
	FLOAT      = 57350
	FOLLOW     = 57377
	GE         = 57384
	GET        = 57366
	GT         = 57383
	HEAD       = 57367
	HEADER     = 57375
	HTTP       = 57356
	IDENTIFIER = 57401
	IN         = 57399
	INCLUDE    = 57362
	INTEGER    = 57349
	INTO       = 57400
	IS         = 57396
	ISNOT      = 57397
	KEYWORD    = 57354
	LE         = 57386
	LT         = 57385
	MATCH      = 57395
	MATCHES    = 57394
	MUST       = 57357
	NOFOLLOW   = 57378
	NOT        = 57398
	NOTEQUAL   = 57382
	NOTEQUALS  = 57381
	NULL       = 57353
	OPTIONS    = 57372
	OR         = 57393
	PATCH      = 57374
	POST       = 57368
	PUT        = 57369
	SET        = 57355
	SHOULD     = 57358
	SLEEP      = 57363
	STARTSWITH = 57389
	STARTWITH  = 57390
	STRING     = 57348
	TRACE      = 57373
	TRUE       = 57351
	TYPE       = 57402
	WHEN       = 57391
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -119
)

var (
	yyPrec = map[int]int{
		'|': 0,
		'&': 1,
		'+': 2,
		'-': 2,
		'*': 3,
		'/': 3,
		'%': 3,
	}

	yyXLAT = map[int]int{
		57401: 0,   // IDENTIFIER (122x)
		123:   1,   // '{' (121x)
		36:    2,   // '$' (120x)
		57348: 3,   // STRING (114x)
		57361: 4,   // ASSERT (91x)
		57364: 5,   // CMD (91x)
		57359: 6,   // DEBUG (91x)
		57360: 7,   // END (91x)
		57356: 8,   // HTTP (91x)
		57362: 9,   // INCLUDE (91x)
		57357: 10,  // MUST (91x)
		57355: 11,  // SET (91x)
		57358: 12,  // SHOULD (91x)
		57363: 13,  // SLEEP (91x)
		57344: 14,  // $end (90x)
		57365: 15,  // ASYNC (90x)
		45:    16,  // '-' (86x)
		57391: 17,  // WHEN (84x)
		57400: 18,  // INTO (82x)
		91:    19,  // '[' (69x)
		57350: 20,  // FLOAT (69x)
		57349: 21,  // INTEGER (69x)
		57353: 22,  // NULL (69x)
		57402: 23,  // TYPE (69x)
		57392: 24,  // AND (49x)
		57393: 25,  // OR (49x)
		41:    26,  // ')' (47x)
		33:    27,  // '!' (45x)
		40:    28,  // '(' (45x)
		57398: 29,  // NOT (45x)
		57432: 30,  // variable (41x)
		57352: 31,  // FALSE (37x)
		57351: 32,  // TRUE (37x)
		37:    33,  // '%' (33x)
		42:    34,  // '*' (33x)
		43:    35,  // '+' (33x)
		47:    36,  // '/' (33x)
		57405: 37,  // any_value (31x)
		57406: 38,  // array (31x)
		57417: 39,  // func_call (31x)
		57388: 40,  // CONTAIN (30x)
		57387: 41,  // CONTAINS (30x)
		57380: 42,  // EQUAL (30x)
		57379: 43,  // EQUALS (30x)
		57384: 44,  // GE (30x)
		57383: 45,  // GT (30x)
		57399: 46,  // IN (30x)
		57396: 47,  // IS (30x)
		57397: 48,  // ISNOT (30x)
		57386: 49,  // LE (30x)
		57385: 50,  // LT (30x)
		57395: 51,  // MATCH (30x)
		57394: 52,  // MATCHES (30x)
		57382: 53,  // NOTEQUAL (30x)
		57381: 54,  // NOTEQUALS (30x)
		57389: 55,  // STARTSWITH (30x)
		57390: 56,  // STARTWITH (30x)
		57376: 57,  // BODY (28x)
		57377: 58,  // FOLLOW (28x)
		57375: 59,  // HEADER (28x)
		57378: 60,  // NOFOLLOW (28x)
		57415: 61,  // expr (22x)
		44:    62,  // ',' (20x)
		93:    63,  // ']' (20x)
		57431: 64,  // true_false (15x)
		57408: 65,  // boolean_exp (14x)
		57416: 66,  // expr_opr (14x)
		57426: 67,  // operator (6x)
		57430: 68,  // string_var (6x)
		125:   69,  // '}' (2x)
		57407: 70,  // assert_command (2x)
		57409: 71,  // cmd_command (2x)
		57410: 72,  // comma_separated_values (2x)
		57411: 73,  // command (2x)
		57413: 74,  // debug_command (2x)
		57414: 75,  // end_command (2x)
		57418: 76,  // http_command (2x)
		57419: 77,  // http_command_param (2x)
		57422: 78,  // include_command (2x)
		57425: 79,  // must_command (2x)
		57427: 80,  // set_command (2x)
		57428: 81,  // should_command (2x)
		57429: 82,  // sleep_command (2x)
		57404: 83,  // any_command (1x)
		57412: 84,  // command_with_condition_opt (1x)
		57371: 85,  // CONNECT (1x)
		57370: 86,  // DELETE (1x)
		57366: 87,  // GET (1x)
		57367: 88,  // HEAD (1x)
		57420: 89,  // http_command_params (1x)
		57421: 90,  // http_method (1x)
		57423: 91,  // multi_any_value (1x)
		57424: 92,  // multi_variable (1x)
		57372: 93,  // OPTIONS (1x)
		57374: 94,  // PATCH (1x)
		57368: 95,  // POST (1x)
		57369: 96,  // PUT (1x)
		57373: 97,  // TRACE (1x)
		57403: 98,  // $default (0x)
		38:    99,  // '&' (0x)
		124:   100, // '|' (0x)
		57347: 101, // EOF (0x)
		57346: 102, // EOL (0x)
		57345: 103, // error (0x)
		57354: 104, // KEYWORD (0x)
	}

	yySymNames = []string{
		"IDENTIFIER",
		"'{'",
		"'$'",
		"STRING",
		"ASSERT",
		"CMD",
		"DEBUG",
		"END",
		"HTTP",
		"INCLUDE",
		"MUST",
		"SET",
		"SHOULD",
		"SLEEP",
		"$end",
		"ASYNC",
		"'-'",
		"WHEN",
		"INTO",
		"'['",
		"FLOAT",
		"INTEGER",
		"NULL",
		"TYPE",
		"AND",
		"OR",
		"')'",
		"'!'",
		"'('",
		"NOT",
		"variable",
		"FALSE",
		"TRUE",
		"'%'",
		"'*'",
		"'+'",
		"'/'",
		"any_value",
		"array",
		"func_call",
		"CONTAIN",
		"CONTAINS",
		"EQUAL",
		"EQUALS",
		"GE",
		"GT",
		"IN",
		"IS",
		"ISNOT",
		"LE",
		"LT",
		"MATCH",
		"MATCHES",
		"NOTEQUAL",
		"NOTEQUALS",
		"STARTSWITH",
		"STARTWITH",
		"BODY",
		"FOLLOW",
		"HEADER",
		"NOFOLLOW",
		"expr",
		"','",
		"']'",
		"true_false",
		"boolean_exp",
		"expr_opr",
		"operator",
		"string_var",
		"'}'",
		"assert_command",
		"cmd_command",
		"comma_separated_values",
		"command",
		"debug_command",
		"end_command",
		"http_command",
		"http_command_param",
		"include_command",
		"must_command",
		"set_command",
		"should_command",
		"sleep_command",
		"any_command",
		"command_with_condition_opt",
		"CONNECT",
		"DELETE",
		"GET",
		"HEAD",
		"http_command_params",
		"http_method",
		"multi_any_value",
		"multi_variable",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"TRACE",
		"$default",
		"'&'",
		"'|'",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {83, 0},
		2:   {83, 2},
		3:   {84, 5},
		4:   {84, 3},
		5:   {84, 3},
		6:   {84, 1},
		7:   {84, 2},
		8:   {84, 4},
		9:   {73, 1},
		10:  {73, 1},
		11:  {73, 1},
		12:  {73, 1},
		13:  {73, 1},
		14:  {73, 1},
		15:  {73, 1},
		16:  {73, 1},
		17:  {73, 1},
		18:  {73, 1},
		19:  {82, 2},
		20:  {78, 2},
		21:  {74, 2},
		22:  {71, 2},
		23:  {71, 2},
		24:  {75, 3},
		25:  {75, 2},
		26:  {75, 1},
		27:  {70, 2},
		28:  {70, 2},
		29:  {79, 2},
		30:  {79, 2},
		31:  {81, 2},
		32:  {81, 2},
		33:  {80, 3},
		34:  {80, 3},
		35:  {80, 3},
		36:  {76, 4},
		37:  {76, 3},
		38:  {89, 1},
		39:  {89, 2},
		40:  {77, 2},
		41:  {77, 2},
		42:  {77, 2},
		43:  {77, 1},
		44:  {77, 1},
		45:  {90, 1},
		46:  {90, 1},
		47:  {90, 1},
		48:  {90, 1},
		49:  {90, 1},
		50:  {90, 1},
		51:  {90, 1},
		52:  {90, 1},
		53:  {90, 1},
		54:  {92, 1},
		55:  {92, 2},
		56:  {91, 1},
		57:  {91, 2},
		58:  {37, 1},
		59:  {37, 1},
		60:  {37, 1},
		61:  {37, 1},
		62:  {37, 1},
		63:  {37, 1},
		64:  {37, 1},
		65:  {37, 2},
		66:  {37, 1},
		67:  {30, 5},
		68:  {30, 2},
		69:  {30, 1},
		70:  {67, 1},
		71:  {67, 1},
		72:  {67, 1},
		73:  {67, 1},
		74:  {67, 1},
		75:  {67, 1},
		76:  {67, 1},
		77:  {67, 1},
		78:  {67, 1},
		79:  {67, 1},
		80:  {67, 1},
		81:  {67, 1},
		82:  {67, 1},
		83:  {67, 1},
		84:  {67, 1},
		85:  {67, 1},
		86:  {67, 1},
		87:  {67, 2},
		88:  {67, 2},
		89:  {65, 3},
		90:  {65, 1},
		91:  {65, 3},
		92:  {65, 3},
		93:  {65, 1},
		94:  {65, 2},
		95:  {65, 2},
		96:  {64, 1},
		97:  {64, 1},
		98:  {66, 3},
		99:  {66, 3},
		100: {66, 3},
		101: {66, 3},
		102: {66, 3},
		103: {66, 3},
		104: {68, 1},
		105: {68, 1},
		106: {61, 3},
		107: {61, 3},
		108: {61, 3},
		109: {61, 3},
		110: {61, 3},
		111: {61, 3},
		112: {61, 1},
		113: {39, 3},
		114: {39, 4},
		115: {38, 2},
		116: {38, 3},
		117: {72, 1},
		118: {72, 3},
	}

	yyXErrors = map[yyXError]string{
		yyXError{36, -1}:  "expected '{'",
		yyXError{43, -1}:  "expected '}'",
		yyXError{44, -1}:  "expected '}'",
		yyXError{37, -1}:  "expected IDENTIFIER",
		yyXError{42, -1}:  "expected IDENTIFIER",
		yyXError{0, -1}:   "expected any_command or one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{110, -1}: "expected any_value or expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{134, -1}: "expected any_value or expr or true_false or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{18, -1}:  "expected any_value or multi_any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{50, -1}:  "expected any_value or one of [$end, '$', '-', '[', '{', ASSERT, ASYNC, BODY, CMD, DEBUG, END, FLOAT, FOLLOW, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, MUST, NOFOLLOW, NULL, SET, SHOULD, SLEEP, STRING, TYPE, WHEN]",
		yyXError{150, -1}: "expected any_value or one of [$end, '$', '-', '[', '{', ASSERT, ASYNC, CMD, DEBUG, END, FLOAT, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, MUST, NULL, SET, SHOULD, SLEEP, STRING, TYPE, WHEN]",
		yyXError{15, -1}:  "expected any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{16, -1}:  "expected any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{60, -1}:  "expected any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{68, -1}:  "expected any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{78, -1}:  "expected array or boolean_exp or expr or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{82, -1}:  "expected boolean_exp or expr or expr_opr or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{19, -1}:  "expected boolean_exp or one of [$end, '!', '$', '(', '-', '[', '{', ASSERT, ASYNC, CMD, DEBUG, END, FALSE, FLOAT, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, MUST, NOT, NULL, SET, SHOULD, SLEEP, STRING, TRUE, TYPE, WHEN]",
		yyXError{20, -1}:  "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{21, -1}:  "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{22, -1}:  "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{86, -1}:  "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{87, -1}:  "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{129, -1}: "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{130, -1}: "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{146, -1}: "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{161, -1}: "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{164, -1}: "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{167, -1}: "expected boolean_exp or one of ['!', '$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NOT, NULL, STRING, TRUE, TYPE]",
		yyXError{70, -1}:  "expected comma_separated_values or one of ['$', ')', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{63, -1}:  "expected comma_separated_values or one of ['$', '-', '[', ']', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{4, -1}:   "expected command or one of [ASSERT, CMD, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{1, -1}:   "expected command_with_condition_opt or one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{111, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{112, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{113, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{114, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{115, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{116, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{46, -1}:  "expected http_command_param or one of [$end, ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, WHEN]",
		yyXError{35, -1}:  "expected http_command_params or one of [$end, ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, WHEN]",
		yyXError{24, -1}:  "expected http_method or one of [CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE]",
		yyXError{17, -1}:  "expected multi_variable or one of ['$', '{', IDENTIFIER]",
		yyXError{41, -1}:  "expected one of [$end, '!', '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FALSE, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TRUE, TYPE, WHEN]",
		yyXError{45, -1}:  "expected one of [$end, '!', '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FALSE, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TRUE, TYPE, WHEN]",
		yyXError{62, -1}:  "expected one of [$end, '!', '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{53, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{54, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{55, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{56, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{57, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{58, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{59, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{61, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{64, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{67, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{71, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{73, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{74, -1}:  "expected one of [$end, '!', '$', '%', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, ASYNC, BODY, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FLOAT, FOLLOW, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOFOLLOW, NOT, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, TYPE, WHEN]",
		yyXError{117, -1}: "expected one of [$end, '!', '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, WHEN]",
		yyXError{118, -1}: "expected one of [$end, '!', '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, WHEN]",
		yyXError{120, -1}: "expected one of [$end, '!', '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, WHEN]",
		yyXError{121, -1}: "expected one of [$end, '!', '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, WHEN]",
		yyXError{122, -1}: "expected one of [$end, '!', '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, WHEN]",
		yyXError{123, -1}: "expected one of [$end, '!', '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, WHEN]",
		yyXError{124, -1}: "expected one of [$end, '!', '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, STRING, WHEN]",
		yyXError{38, -1}:  "expected one of [$end, '!', '$', '(', '-', '[', '{', ASSERT, ASYNC, BODY, CMD, DEBUG, END, FALSE, FLOAT, FOLLOW, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, MUST, NOFOLLOW, NOT, NULL, SET, SHOULD, SLEEP, STRING, TRUE, TYPE, WHEN]",
		yyXError{79, -1}:  "expected one of [$end, '!', '%', '*', '+', '-', '/', ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, WHEN]",
		yyXError{125, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{126, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{135, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{137, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{83, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{85, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{88, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{89, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{90, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{131, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{132, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{133, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{136, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{141, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{142, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{149, -1}: "expected one of [$end, '$', '-', '[', '{', ASSERT, ASYNC, CMD, DEBUG, END, FLOAT, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, MUST, NULL, SET, SHOULD, SLEEP, STRING, TYPE, WHEN]",
		yyXError{151, -1}: "expected one of [$end, '$', '-', '[', '{', ASSERT, ASYNC, CMD, DEBUG, END, FLOAT, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, MUST, NULL, SET, SHOULD, SLEEP, STRING, TYPE, WHEN]",
		yyXError{143, -1}: "expected one of [$end, '$', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{144, -1}: "expected one of [$end, '$', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{145, -1}: "expected one of [$end, '$', '{', AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{39, -1}:  "expected one of [$end, '$', '{', ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{40, -1}:  "expected one of [$end, '$', '{', ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{157, -1}: "expected one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{158, -1}: "expected one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{159, -1}: "expected one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{153, -1}: "expected one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{154, -1}: "expected one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{81, -1}:  "expected one of [$end, AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{147, -1}: "expected one of [$end, AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{148, -1}: "expected one of [$end, AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{162, -1}: "expected one of [$end, AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, MUST, OR, SET, SHOULD, SLEEP]",
		yyXError{165, -1}: "expected one of [$end, AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, MUST, OR, SET, SHOULD, SLEEP]",
		yyXError{168, -1}: "expected one of [$end, AND, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, MUST, OR, SET, SHOULD, SLEEP]",
		yyXError{47, -1}:  "expected one of [$end, ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, WHEN]",
		yyXError{51, -1}:  "expected one of [$end, ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, WHEN]",
		yyXError{52, -1}:  "expected one of [$end, ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, WHEN]",
		yyXError{75, -1}:  "expected one of [$end, ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, WHEN]",
		yyXError{76, -1}:  "expected one of [$end, ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, WHEN]",
		yyXError{77, -1}:  "expected one of [$end, ASSERT, ASYNC, BODY, CMD, DEBUG, END, FOLLOW, HEADER, HTTP, INCLUDE, INTO, MUST, NOFOLLOW, SET, SHOULD, SLEEP, WHEN]",
		yyXError{3, -1}:   "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{5, -1}:   "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{6, -1}:   "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{7, -1}:   "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{8, -1}:   "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{12, -1}:  "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{13, -1}:  "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{14, -1}:  "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{155, -1}: "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{156, -1}: "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{160, -1}: "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{166, -1}: "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{2, -1}:   "expected one of [$end, ASSERT, ASYNC, CMD, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{92, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{93, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{94, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{95, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{96, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{97, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{98, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{99, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{100, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{101, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{102, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{103, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{104, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{105, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{106, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{107, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{127, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{128, -1}: "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{26, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{27, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{28, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{29, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{30, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{31, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{32, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{33, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{34, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{119, -1}: "expected one of ['%', ')', '*', '+', '-', '/']",
		yyXError{66, -1}:  "expected one of [')', ',', ']']",
		yyXError{69, -1}:  "expected one of [')', ',', ']']",
		yyXError{72, -1}:  "expected one of [')', ',']",
		yyXError{138, -1}: "expected one of [')', AND, OR]",
		yyXError{139, -1}: "expected one of [')', AND, OR]",
		yyXError{65, -1}:  "expected one of [',', ']']",
		yyXError{84, -1}:  "expected operator or one of [$end, '!', '%', ')', '*', '+', '-', '/', ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, WHEN]",
		yyXError{80, -1}:  "expected operator or one of [$end, '!', '%', '*', '+', '-', '/', ASSERT, ASYNC, CMD, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOT, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, STARTWITH, WHEN]",
		yyXError{140, -1}: "expected operator or one of ['!', '%', ')', '*', '+', '-', '/', CONTAIN, CONTAINS, EQUAL, EQUALS, GE, GT, IS, ISNOT, LE, LT, MATCH, MATCHES, NOT, NOTEQUAL, NOTEQUALS, STARTSWITH, STARTWITH]",
		yyXError{91, -1}:  "expected operator or one of ['!', '%', '*', '+', '-', '/', CONTAIN, CONTAINS, EQUAL, EQUALS, GE, GT, IS, ISNOT, LE, LT, MATCH, MATCHES, NOT, NOTEQUAL, NOTEQUALS, STARTSWITH, STARTWITH]",
		yyXError{108, -1}: "expected operator or one of ['!', CONTAIN, CONTAINS, EQUAL, EQUALS, GE, GT, IS, ISNOT, LE, LT, MATCH, MATCHES, NOT, NOTEQUAL, NOTEQUALS, STARTSWITH, STARTWITH]",
		yyXError{109, -1}: "expected operator or one of ['!', CONTAIN, CONTAINS, EQUAL, EQUALS, GE, GT, IS, ISNOT, LE, LT, MATCH, MATCHES, NOT, NOTEQUAL, NOTEQUALS, STARTSWITH, STARTWITH]",
		yyXError{9, -1}:   "expected string_var or one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{10, -1}:  "expected string_var or one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{11, -1}:  "expected string_var or one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{25, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{48, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{49, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{152, -1}: "expected variable or one of [$end, '$', '{', ASSERT, ASYNC, CMD, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{23, -1}:  "expected variable or one of ['$', '{', IDENTIFIER]",
		yyXError{163, -1}: "expected variable or one of ['$', '{', IDENTIFIER]",
	}

	yyParseTab = [170][]uint16{
		// 0
		{4: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 83: 120},
		{4: 139, 137, 136, 138, 143, 135, 140, 142, 141, 134, 119, 123, 70: 128, 133, 73: 122, 126, 127, 125, 78: 131, 129, 124, 130, 132, 84: 121},
		{4: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{4: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 17: 284, 283},
		{4: 139, 137, 136, 138, 143, 135, 140, 142, 141, 134, 70: 128, 133, 73: 280, 126, 127, 125, 78: 131, 129, 124, 130, 132},
		// 5
		{4: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 17: 110, 110},
		{4: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 17: 109, 109},
		{4: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 17: 108, 108},
		{4: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 17: 107, 107},
		{157, 155, 156, 158, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 17: 106, 106, 30: 159, 68: 279},
		// 10
		{157, 155, 156, 158, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 17: 105, 105, 30: 159, 68: 278},
		{157, 155, 156, 158, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 17: 104, 104, 30: 159, 68: 277},
		{4: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 17: 103, 103},
		{4: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 17: 102, 102},
		{4: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 17: 101, 101},
		// 15
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 30: 173, 37: 276, 178, 180},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 30: 173, 37: 275, 178, 180},
		{157, 155, 156, 30: 273, 92: 272},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 30: 173, 37: 269, 178, 180, 91: 270},
		{181, 155, 156, 172, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 179, 266, 93, 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 267, 204},
		// 20
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 265, 204},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 264, 204},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 263, 204},
		{157, 155, 156, 30: 197},
		{85: 150, 149, 145, 146, 90: 144, 93: 151, 153, 147, 148, 152},
		// 25
		{157, 155, 156, 158, 30: 159, 68: 154},
		{74, 74, 74, 74},
		{73, 73, 73, 73},
		{72, 72, 72, 72},
		{71, 71, 71, 71},
		// 30
		{70, 70, 70, 70},
		{69, 69, 69, 69},
		{68, 68, 68, 68},
		{67, 67, 67, 67},
		{66, 66, 66, 66},
		// 35
		{4: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 17: 82, 82, 57: 168, 169, 167, 170, 77: 166, 89: 165},
		{1: 161},
		{160},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 27: 50, 50, 50, 31: 50, 50, 57: 50, 50, 50, 50},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17: 15, 15, 57: 15, 15, 15, 15},
		// 40
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 17: 14, 14, 57: 14, 14, 14, 14},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 31: 51, 51, 51, 51, 51, 51, 40: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 62: 51, 51},
		{162},
		{69: 163},
		{69: 164},
		// 45
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 31: 52, 52, 52, 52, 52, 52, 40: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 62: 52, 52},
		{4: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 17: 83, 83, 57: 168, 169, 167, 170, 77: 196},
		{4: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 17: 81, 81, 57: 81, 81, 81, 81},
		{157, 155, 156, 158, 30: 159, 68: 195},
		{157, 155, 156, 158, 30: 159, 68: 194},
		// 50
		{181, 155, 156, 172, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 179, 76, 76, 182, 175, 174, 177, 176, 30: 173, 37: 171, 178, 180, 57: 76, 76, 76, 76},
		{4: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 17: 75, 75, 57: 75, 75, 75, 75},
		{4: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 17: 77, 77, 57: 77, 77, 77, 77},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 29: 61, 33: 61, 61, 61, 61, 40: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62: 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 29: 60, 33: 60, 60, 60, 60, 40: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 62: 60, 60},
		// 55
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 29: 59, 33: 59, 59, 59, 59, 40: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 62: 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 29: 58, 33: 58, 58, 58, 58, 40: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 62: 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 29: 57, 33: 57, 57, 57, 57, 40: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 62: 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 29: 56, 33: 56, 56, 56, 56, 40: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 62: 56, 56},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 29: 55, 33: 55, 55, 55, 55, 40: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 62: 55, 55},
		// 60
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 30: 173, 37: 193, 178, 180},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 29: 53, 33: 53, 53, 53, 53, 40: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 62: 53, 53},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 189, 50, 33: 50, 50, 50, 50, 40: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 62: 50, 50},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 30: 173, 37: 185, 178, 180, 63: 183, 72: 184},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 29: 4, 33: 4, 4, 4, 4, 40: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 62: 4, 4},
		// 65
		{62: 187, 186},
		{26: 2, 62: 2, 2},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29: 3, 33: 3, 3, 3, 3, 40: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 62: 3, 3},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 30: 173, 37: 188, 178, 180},
		{26: 1, 62: 1, 1},
		// 70
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 26: 190, 30: 173, 37: 185, 178, 180, 72: 191},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 29: 6, 33: 6, 6, 6, 6, 40: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 62: 6, 6},
		{26: 192, 62: 187},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 29: 5, 33: 5, 5, 5, 5, 40: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 62: 5, 5},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 29: 54, 33: 54, 54, 54, 54, 40: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 62: 54, 54},
		// 75
		{4: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 17: 78, 78, 57: 78, 78, 78, 78},
		{4: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 17: 79, 79, 57: 79, 79, 79, 79},
		{4: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 17: 80, 80, 57: 80, 80, 80, 80},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 198, 180, 61: 199, 64: 202, 200, 204},
		{4: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 55, 86, 86, 27: 55, 29: 55, 33: 55, 55, 55, 55, 40: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		// 80
		{4: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 232, 85, 85, 27: 229, 29: 228, 33: 235, 233, 231, 234, 40: 220, 219, 212, 211, 216, 215, 227, 225, 226, 218, 217, 223, 224, 214, 213, 221, 222, 67: 230},
		{4: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 17: 84, 84, 24: 249, 250},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 260, 64: 202, 258, 259},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 17: 29, 29, 24: 29, 29, 29},
		{4: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 26: 7, 229, 29: 228, 33: 7, 7, 7, 7, 40: 220, 219, 212, 211, 216, 215, 227, 225, 226, 218, 217, 223, 224, 214, 213, 221, 222, 67: 254},
		// 85
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 17: 26, 26, 24: 26, 26, 26},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 253, 204},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 209, 204},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 17: 23, 23, 24: 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 17: 22, 22, 24: 22, 22, 22},
		// 90
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 17: 24, 24, 24: 249, 250, 24},
		{16: 232, 27: 229, 29: 228, 33: 235, 233, 231, 234, 40: 220, 219, 212, 211, 216, 215, 227, 225, 226, 218, 217, 223, 224, 214, 213, 221, 222, 67: 230},
		{49, 49, 49, 49, 16: 49, 19: 49, 49, 49, 49, 49, 28: 49, 31: 49, 49},
		{48, 48, 48, 48, 16: 48, 19: 48, 48, 48, 48, 48, 28: 48, 31: 48, 48},
		{47, 47, 47, 47, 16: 47, 19: 47, 47, 47, 47, 47, 28: 47, 31: 47, 47},
		// 95
		{46, 46, 46, 46, 16: 46, 19: 46, 46, 46, 46, 46, 28: 46, 31: 46, 46},
		{45, 45, 45, 45, 16: 45, 19: 45, 45, 45, 45, 45, 28: 45, 31: 45, 45},
		{44, 44, 44, 44, 16: 44, 19: 44, 44, 44, 44, 44, 28: 44, 31: 44, 44},
		{43, 43, 43, 43, 16: 43, 19: 43, 43, 43, 43, 43, 28: 43, 31: 43, 43},
		{42, 42, 42, 42, 16: 42, 19: 42, 42, 42, 42, 42, 28: 42, 31: 42, 42},
		// 100
		{41, 41, 41, 41, 16: 41, 19: 41, 41, 41, 41, 41, 28: 41, 31: 41, 41},
		{40, 40, 40, 40, 16: 40, 19: 40, 40, 40, 40, 40, 28: 40, 31: 40, 40},
		{39, 39, 39, 39, 16: 39, 19: 39, 39, 39, 39, 39, 28: 39, 31: 39, 39},
		{38, 38, 38, 38, 16: 38, 19: 38, 38, 38, 38, 38, 28: 38, 31: 38, 38},
		{37, 37, 37, 37, 16: 37, 19: 37, 37, 37, 37, 37, 28: 37, 31: 37, 37},
		// 105
		{36, 36, 36, 36, 16: 36, 19: 36, 36, 36, 36, 36, 28: 36, 31: 36, 36},
		{35, 35, 35, 35, 16: 35, 19: 35, 35, 35, 35, 35, 28: 35, 31: 35, 35},
		{34, 34, 34, 34, 16: 34, 19: 34, 34, 34, 34, 34, 28: 34, 31: 34, 34},
		{33, 33, 33, 33, 16: 33, 19: 33, 33, 33, 33, 33, 28: 33, 31: 33, 33},
		{27: 229, 29: 228, 40: 220, 219, 212, 211, 216, 215, 227, 225, 226, 218, 217, 223, 224, 214, 213, 221, 222, 67: 248},
		// 110
		{27: 229, 29: 228, 40: 220, 219, 212, 211, 216, 215, 227, 225, 226, 218, 217, 223, 224, 214, 213, 221, 222, 67: 247},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 28: 236, 30: 173, 37: 246, 178, 180, 61: 245},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 28: 236, 30: 173, 37: 238, 178, 180, 61: 244},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 28: 236, 30: 173, 37: 238, 178, 180, 61: 243},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 28: 236, 30: 173, 37: 238, 178, 180, 61: 242},
		// 115
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 28: 236, 30: 173, 37: 238, 178, 180, 61: 241},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 28: 236, 30: 173, 37: 238, 178, 180, 61: 237},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 28: 236, 30: 173, 37: 238, 178, 180, 61: 239},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 24: 8, 8, 8, 8, 29: 8, 33: 8, 8, 8, 8, 40: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 24: 7, 7, 7, 7, 29: 7, 33: 7, 7, 7, 7, 40: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		// 120
		{16: 232, 26: 240, 33: 235, 233, 231, 234},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24: 13, 13, 13, 13, 29: 13, 33: 13, 13, 13, 13, 40: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 24: 9, 9, 9, 9, 29: 9, 33: 9, 9, 9, 9, 40: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 24: 10, 10, 10, 10, 29: 10, 33: 10, 10, 10, 10, 40: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 24: 11, 11, 11, 11, 29: 11, 33: 235, 233, 11, 234, 40: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 125
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24: 12, 12, 12, 12, 29: 12, 33: 235, 233, 12, 234, 40: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 232, 20, 20, 24: 20, 20, 20, 33: 235, 233, 231, 234},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 7, 18, 18, 24: 18, 18, 18, 33: 7, 7, 7, 7},
		{31, 31, 31, 31, 16: 31, 19: 31, 31, 31, 31, 31, 28: 31, 31: 31, 31},
		{32, 32, 32, 32, 16: 32, 19: 32, 32, 32, 32, 32, 28: 32, 31: 32, 32},
		// 130
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 252, 204},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 251, 204},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17: 16, 16, 24: 249, 250, 16},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17: 17, 17, 24: 249, 250, 17},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 17: 25, 25, 24: 249, 250, 25},
		// 135
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 28: 236, 30: 173, 208, 207, 37: 255, 178, 180, 61: 257, 64: 256},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 7, 28, 28, 24: 28, 28, 28, 33: 7, 7, 7, 7},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 17: 27, 27, 24: 27, 27, 27},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 232, 19, 19, 24: 19, 19, 19, 33: 235, 233, 231, 234},
		{24: 249, 250, 262},
		// 140
		{24: 26, 26, 261},
		{16: 232, 26: 240, 229, 29: 228, 33: 235, 233, 231, 234, 40: 220, 219, 212, 211, 216, 215, 227, 225, 226, 218, 217, 223, 224, 214, 213, 221, 222, 67: 230},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 17: 21, 21, 24: 21, 21, 21},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 17: 30, 30, 24: 30, 30, 30},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 17: 87, 87, 24: 249, 250},
		// 145
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 17: 89, 89, 24: 249, 250},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 17: 91, 91, 24: 249, 250},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 268, 204},
		{4: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 17: 94, 94, 24: 249, 250},
		{4: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 17: 95, 95, 24: 249, 250},
		// 150
		{63, 63, 63, 63, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 63, 97, 97, 63, 63, 63, 63, 63},
		{181, 155, 156, 172, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 179, 96, 96, 182, 175, 174, 177, 176, 30: 173, 37: 271, 178, 180},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{157, 155, 156, 4: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 17: 98, 98, 30: 274},
		{65, 65, 65, 4: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 17: 65, 65},
		// 155
		{64, 64, 64, 4: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 17: 64, 64},
		{4: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 17: 99, 99},
		{4: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 17: 100, 100},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 17: 88, 88},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 17: 90, 90},
		// 160
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 17: 92, 92},
		{4: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 17: 281},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 282, 204},
		{4: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 24: 249, 250},
		{157, 155, 156, 30: 286},
		// 165
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 285, 204},
		{4: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 24: 249, 250},
		{4: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 17: 287},
		{181, 155, 156, 172, 16: 179, 19: 182, 175, 174, 177, 176, 27: 206, 201, 205, 173, 208, 207, 37: 203, 178, 180, 61: 210, 64: 202, 288, 204},
		{4: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 24: 249, 250},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 103

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 3:
		{
			//run command put result into variable WHEN boolean_exp is true
			if strings.Contains(yyS[yypt-2].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}

			if yyS[yypt-0].boolean {
				yylex.(*lex).GlobalVars[yyS[yypt-2].variable.name] = yyS[yypt-4].cmd.Run(yylex.(*lex))
			}
		}
	case 4:
		{
			//command INTO variable
			if strings.Contains(yyS[yypt-0].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}
			yylex.(*lex).GlobalVars[yyS[yypt-0].variable.name] = yyS[yypt-2].cmd.Run(yylex.(*lex))
		}
	case 5:
		{
			//run the command only if boolean_exp is true
			if yyS[yypt-0].boolean {
				yyS[yypt-2].cmd.Run(yylex.(*lex))
			}
		}
	case 6:
		{
			//just run the command
			yyS[yypt-0].cmd.Run(yylex.(*lex))
			//run command without condition

		}
	case 7:
		{
			go yyS[yypt-0].cmd.Run(yylex.(*lex))
		}
	case 8:
		{
			//run the command only if boolean_exp is true
			if yyS[yypt-0].boolean {
				go yyS[yypt-2].cmd.Run(yylex.(*lex))
			}
		}
	case 19:
		{
			yyVAL.cmd = &SleepCommand{
				Millisecond: intVal(yyS[yypt-0].val),
			}
		}
	case 20:
		{
			yyVAL.cmd = &IncludeCommand{
				File: yyS[yypt-0].val.(string),
			}
		}
	case 21:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].vals,
			}
		}
	case 22:
		{
			yyVAL.cmd = &CmdCommand{
				Params: []interface{}{yyS[yypt-0].val},
			}
		}
	case 23:
		{
			yyVAL.cmd = &CmdCommand{
				Params: yyS[yypt-0].vals,
			}
		}
	case 24:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 25:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 26:
		{
			return -1
		}
	case 27:
		{
			if yyS[yypt-1].cmd.(*AssertCommand).Failed {
				yylex.(*lex).State.Assert.Messages = append(yylex.(*lex).State.Assert.Messages, yyS[yypt-0].str)
			}

			yyVAL.cmd = yyS[yypt-1].cmd
		}
	case 28:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Assert.Failed++
			} else {
				yylex.(*lex).State.Assert.Succeeded++
			}
			yyVAL.cmd = &AssertCommand{
				Failed: !yyS[yypt-0].boolean,
			}
		}
	case 29:
		{
			if yyS[yypt-1].cmd.(*MustCommand).Failed {
				yylex.(*lex).State.Must.Messages = append(yylex.(*lex).State.Must.Messages, yyS[yypt-0].str)
			}

			yyVAL.cmd = yyS[yypt-1].cmd
		}
	case 30:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Must.Failed++
			} else {
				yylex.(*lex).State.Must.Succeeded++
			}

			yyVAL.cmd = &MustCommand{
				Failed: !yyS[yypt-0].boolean,
			}
		}
	case 31:
		{
			if yyS[yypt-1].cmd.(*ShouldCommand).Failed {
				yylex.(*lex).State.Should.Messages = append(yylex.(*lex).State.Should.Messages, yyS[yypt-0].str)
			}

			yyVAL.cmd = yyS[yypt-1].cmd
		}
	case 32:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Should.Failed++
			} else {
				yylex.(*lex).State.Should.Succeeded++
			}
			yyVAL.cmd = &ShouldCommand{
				Failed: !yyS[yypt-0].boolean,
			}
		}
	case 33:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].vals,
			}
		}
	case 34:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].val,
			}
		}
	case 35:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].boolean,
			}
		}
	case 36:
		{
			//call http with header here.
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				CommandParams: yyS[yypt-0].http_command_params,
				Url:           yyS[yypt-1].str,
			}
		}
	case 37:
		{
			//simple http command
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].str,
			}
		}
	case 38:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 39:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 40:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].str,
			}
		}
	case 41:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].str,
			}
		}
	case 42:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: IsTrue(yyS[yypt-0].val),
			}
		}
	case 43:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-0].val.(string),
				ParamValue: true,
			}
		}
	case 44:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "FOLLOW",
				ParamValue: false,
			}
		}
	case 54:
		{
			//getting a single value from multi_value exp
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].variable)
		}
	case 55:
		{
			//multi value
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].variable)
		}
	case 56:
		{
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 57:
		{
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 58:
		{
			//string_or_var : STRING
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.val, _ = templating.ExecuteTemplate(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
			} else {
				yyVAL.val = yyS[yypt-0].val.(string)
			}
		}
	case 59:
		{
			//any_value : variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.val, _ = templating.ExecuteTemplate(yyS[yypt-0].variable.value.(string), yylex.(*lex).GlobalVars)
				} else {
					yyVAL.val = yyS[yypt-0].variable.value
				}
			default:
				yyVAL.val = yyS[yypt-0].variable.value
			}

		}
	case 60:
		{
			//number: INTEGER
			yyVAL.val = yyS[yypt-0].val
		}
	case 61:
		{
			//number: FLOAT
			yyVAL.val = yyS[yypt-0].val
		}
	case 63:
		{
			yyVAL.val = nil
		}
	case 64:
		{
			yyVAL.val = yyS[yypt-0].vals
		}
	case 65:
		{
			yyVAL.val, _ = umin(yyS[yypt-0].val)
		}
	case 66:
		{
			yyVAL.val = yyS[yypt-0].val
		}
	case 67:
		{
			//getting variable
			yyVAL.variable.name = yyS[yypt-2].val.(string)
			yyVAL.variable.value = query(yyS[yypt-2].val.(string), yylex.(*lex).GlobalVars)
		}
	case 68:
		{
			yyVAL.variable.name = yyS[yypt-0].val.(string)
			yyVAL.variable.value = query(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
		}
	case 69:
		{
			yyVAL.variable.name = yyS[yypt-0].val.(string)
			yyVAL.variable.value = query(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
		}
	case 87:
		{
			yyVAL.val = "NOT" + yyS[yypt-0].val.(string)
		}
	case 88:
		{
			yyVAL.val = "NOT" + yyS[yypt-0].val.(string)
		}
	case 89:
		{
			//boolean_ex: '(' boolean_exp ')'
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 91:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 92:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].boolean)
			yyVAL.boolean = operator_result
		}
	case 94:
		{
			yyVAL.boolean = !yyS[yypt-0].boolean
		}
	case 95:
		{
			yyVAL.boolean = !yyS[yypt-0].boolean
		}
	case 96:
		{
			yyVAL.boolean = true
		}
	case 97:
		{
			yyVAL.boolean = false
		}
	case 98:
		{
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 99:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 100:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 101:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 102:
		{
			//boolean_ex: boolean_exp AND boolean_exp
			yyVAL.boolean = yyS[yypt-2].boolean && yyS[yypt-0].boolean
		}
	case 103:
		{
			//boolean_ex: boolean_exp OR boolean_exp
			yyVAL.boolean = yyS[yypt-2].boolean || yyS[yypt-0].boolean
		}
	case 104:
		{
			//string_var : STRING
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.str, _ = templating.ExecuteTemplate(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
			} else {
				yyVAL.str = yyS[yypt-0].val.(string)
			}
		}
	case 105:
		{
			//string_var : variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.str, _ = templating.ExecuteTemplate(yyS[yypt-0].variable.value.(string), yylex.(*lex).GlobalVars)
				} else {
					yyVAL.str = yyS[yypt-0].variable.value.(string)
				}
			default:
				yyVAL.str = fmt.Sprintf("%s", yyS[yypt-0].variable.value)
			}

		}
	case 106:
		{
			yyVAL.val = yyS[yypt-1].val
		}
	case 107:
		{
			yyVAL.val, _ = add(yyS[yypt-2].val, yyS[yypt-0].val)
		}
	case 108:
		{
			yyVAL.val, _ = subtract(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 109:
		{
			yyVAL.val, _ = multiply(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 110:
		{
			yyVAL.val, _ = divide(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 111:
		{
			yyVAL.val, _ = mod(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 113:
		{
			//call $1
			yyVAL.val = funcCall(yyS[yypt-2].val.(string), nil)
		}
	case 114:
		{
			yyVAL.val = funcCall(yyS[yypt-3].val.(string), yyS[yypt-1].vals)
		}
	case 115:
		{
			yyVAL.vals = make([]interface{}, 0)
		}
	case 116:
		{
			yyVAL.vals = yyS[yypt-1].vals
		}
	case 117:
		{
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 118:
		{
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func Parse(text string) *lex {

	l := &lex{
		tokens:     make(chan Token),
		State:      NewStats(),
		GlobalVars: map[string]interface{}{},
	}

	if Verbose {
		yyDebug = 3
	}

	go func() {
		s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
		for {
			l.tokens <- s.Scan()
		}
	}()

	return l
}

func Run(l *lex) {
	yyParse(l)
}
