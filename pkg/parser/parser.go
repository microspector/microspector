// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
)

type yySymType struct {
	yys                 int
	expression          Expression
	expressions         ExprArray
	val                 interface{}
	vals                []interface{}
	str                 ExprString
	integer             ExprInteger
	boolean             ExprBool
	bytes               []byte
	cmd                 Command
	variable            ExprVariable
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57407
	yyEofCode  = 57344
	AND        = 57395
	ANR        = 57406
	ASSERT     = 57361
	ASYNC      = 57365
	BODY       = 57377
	CMD        = 57364
	CONNECT    = 57372
	CONTAIN    = 57391
	CONTAINS   = 57390
	DEBUG      = 57359
	DELETE     = 57371
	ECHO       = 57366
	END        = 57360
	EOF        = 57347
	EOL        = 57346
	EQUAL      = 57383
	EQUALS     = 57382
	FALSE      = 57352
	FLOAT      = 57350
	FOLLOW     = 57378
	GE         = 57387
	GET        = 57367
	GT         = 57386
	HEAD       = 57368
	HEADER     = 57376
	HTTP       = 57356
	IDENTIFIER = 57404
	IN         = 57402
	INCLUDE    = 57362
	INSECURE   = 57381
	INTEGER    = 57349
	INTO       = 57403
	IS         = 57399
	ISNOT      = 57400
	KEYWORD    = 57354
	LE         = 57389
	LT         = 57388
	MATCH      = 57398
	MATCHES    = 57397
	MUST       = 57357
	NOFOLLOW   = 57379
	NOT        = 57401
	NOTEQUAL   = 57385
	NOTEQUALS  = 57384
	NULL       = 57353
	OPTIONS    = 57373
	OR         = 57396
	PATCH      = 57375
	POST       = 57369
	PUT        = 57370
	SECURE     = 57380
	SET        = 57355
	SHOULD     = 57358
	SLEEP      = 57363
	STARTSWITH = 57392
	STARTWITH  = 57393
	STRING     = 57348
	TRACE      = 57374
	TRUE       = 57351
	TYPE       = 57405
	WHEN       = 57394
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -107
)

var (
	yyPrec = map[int]int{
		ANR:        0,
		OR:         0,
		EQUALS:     1,
		EQUAL:      1,
		NOTEQUALS:  1,
		NOTEQUAL:   1,
		GT:         1,
		GE:         1,
		LT:         1,
		LE:         1,
		CONTAINS:   1,
		CONTAIN:    1,
		STARTSWITH: 1,
		STARTWITH:  1,
		WHEN:       1,
		MATCHES:    1,
		MATCH:      1,
		IS:         1,
		ISNOT:      1,
		NOT:        1,
		IN:         1,
		'+':        2,
		'-':        2,
		'*':        3,
		'/':        3,
		'%':        3,
	}

	yyXLAT = map[int]int{
		57404: 0,   // IDENTIFIER (89x)
		45:    1,   // '-' (88x)
		123:   2,   // '{' (88x)
		57349: 3,   // INTEGER (88x)
		36:    4,   // '$' (87x)
		37:    5,   // '%' (85x)
		40:    6,   // '(' (85x)
		46:    7,   // '.' (85x)
		57350: 8,   // FLOAT (85x)
		57401: 9,   // NOT (82x)
		57361: 10,  // ASSERT (81x)
		57364: 11,  // CMD (81x)
		57359: 12,  // DEBUG (81x)
		57366: 13,  // ECHO (81x)
		57360: 14,  // END (81x)
		57356: 15,  // HTTP (81x)
		57362: 16,  // INCLUDE (81x)
		57357: 17,  // MUST (81x)
		57355: 18,  // SET (81x)
		57358: 19,  // SHOULD (81x)
		57363: 20,  // SLEEP (81x)
		57344: 21,  // $end (80x)
		91:    22,  // '[' (80x)
		57365: 23,  // ASYNC (80x)
		57348: 24,  // STRING (80x)
		57405: 25,  // TYPE (80x)
		57394: 26,  // WHEN (73x)
		57403: 27,  // INTO (72x)
		33:    28,  // '!' (50x)
		57391: 29,  // CONTAIN (50x)
		57390: 30,  // CONTAINS (50x)
		57383: 31,  // EQUAL (50x)
		57382: 32,  // EQUALS (50x)
		57387: 33,  // GE (50x)
		57386: 34,  // GT (50x)
		57402: 35,  // IN (50x)
		57399: 36,  // IS (50x)
		57400: 37,  // ISNOT (50x)
		57389: 38,  // LE (50x)
		57388: 39,  // LT (50x)
		57398: 40,  // MATCH (50x)
		57397: 41,  // MATCHES (50x)
		57385: 42,  // NOTEQUAL (50x)
		57384: 43,  // NOTEQUALS (50x)
		57392: 44,  // STARTSWITH (50x)
		57393: 45,  // STARTWITH (50x)
		41:    46,  // ')' (44x)
		57395: 47,  // AND (44x)
		57396: 48,  // OR (44x)
		57352: 49,  // FALSE (36x)
		57351: 50,  // TRUE (36x)
		57377: 51,  // BODY (35x)
		57378: 52,  // FOLLOW (35x)
		57376: 53,  // HEADER (35x)
		57381: 54,  // INSECURE (35x)
		57379: 55,  // NOFOLLOW (35x)
		57380: 56,  // SECURE (35x)
		57435: 57,  // variable (34x)
		57424: 58,  // math_expression (32x)
		44:    59,  // ',' (31x)
		93:    60,  // ']' (29x)
		57408: 61,  // array (27x)
		57417: 62,  // expr (27x)
		57418: 63,  // func_call (27x)
		42:    64,  // '*' (19x)
		43:    65,  // '+' (19x)
		47:    66,  // '/' (19x)
		57428: 67,  // operator (19x)
		57430: 68,  // predicate_expr (13x)
		57411: 69,  // comma_separated_expressions (4x)
		125:   70,  // '}' (2x)
		57409: 71,  // assert_command (2x)
		57410: 72,  // cmd_command (2x)
		57412: 73,  // command (2x)
		57413: 74,  // command_cond (2x)
		57414: 75,  // debug_command (2x)
		57415: 76,  // echo_command (2x)
		57416: 77,  // end_command (2x)
		57419: 78,  // http_command (2x)
		57420: 79,  // http_command_param (2x)
		57423: 80,  // include_command (2x)
		57426: 81,  // multi_expressions (2x)
		57427: 82,  // must_command (2x)
		57432: 83,  // set_command (2x)
		57433: 84,  // should_command (2x)
		57434: 85,  // sleep_command (2x)
		57367: 86,  // GET (1x)
		57368: 87,  // HEAD (1x)
		57421: 88,  // http_command_params (1x)
		57422: 89,  // http_method (1x)
		57425: 90,  // microspector (1x)
		57373: 91,  // OPTIONS (1x)
		57375: 92,  // PATCH (1x)
		57369: 93,  // POST (1x)
		57370: 94,  // PUT (1x)
		57431: 95,  // run_comm (1x)
		57407: 96,  // $default (0x)
		57406: 97,  // ANR (0x)
		57372: 98,  // CONNECT (0x)
		57371: 99,  // DELETE (0x)
		57347: 100, // EOF (0x)
		57346: 101, // EOL (0x)
		57345: 102, // error (0x)
		57354: 103, // KEYWORD (0x)
		57353: 104, // NULL (0x)
		57429: 105, // operator_math (0x)
		57374: 106, // TRACE (0x)
	}

	yySymNames = []string{
		"IDENTIFIER",
		"'-'",
		"'{'",
		"INTEGER",
		"'$'",
		"'%'",
		"'('",
		"'.'",
		"FLOAT",
		"NOT",
		"ASSERT",
		"CMD",
		"DEBUG",
		"ECHO",
		"END",
		"HTTP",
		"INCLUDE",
		"MUST",
		"SET",
		"SHOULD",
		"SLEEP",
		"$end",
		"'['",
		"ASYNC",
		"STRING",
		"TYPE",
		"WHEN",
		"INTO",
		"'!'",
		"CONTAIN",
		"CONTAINS",
		"EQUAL",
		"EQUALS",
		"GE",
		"GT",
		"IN",
		"IS",
		"ISNOT",
		"LE",
		"LT",
		"MATCH",
		"MATCHES",
		"NOTEQUAL",
		"NOTEQUALS",
		"STARTSWITH",
		"STARTWITH",
		"')'",
		"AND",
		"OR",
		"FALSE",
		"TRUE",
		"BODY",
		"FOLLOW",
		"HEADER",
		"INSECURE",
		"NOFOLLOW",
		"SECURE",
		"variable",
		"math_expression",
		"','",
		"']'",
		"array",
		"expr",
		"func_call",
		"'*'",
		"'+'",
		"'/'",
		"operator",
		"predicate_expr",
		"comma_separated_expressions",
		"'}'",
		"assert_command",
		"cmd_command",
		"command",
		"command_cond",
		"debug_command",
		"echo_command",
		"end_command",
		"http_command",
		"http_command_param",
		"include_command",
		"multi_expressions",
		"must_command",
		"set_command",
		"should_command",
		"sleep_command",
		"GET",
		"HEAD",
		"http_command_params",
		"http_method",
		"microspector",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"run_comm",
		"$default",
		"ANR",
		"CONNECT",
		"DELETE",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
		"NULL",
		"operator_math",
		"TRACE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {90, 0},
		2:   {90, 2},
		3:   {95, 1},
		4:   {95, 2},
		5:   {74, 3},
		6:   {74, 5},
		7:   {74, 3},
		8:   {74, 1},
		9:   {73, 1},
		10:  {73, 1},
		11:  {73, 1},
		12:  {73, 1},
		13:  {73, 1},
		14:  {73, 1},
		15:  {73, 1},
		16:  {73, 1},
		17:  {73, 1},
		18:  {73, 1},
		19:  {73, 1},
		20:  {83, 3},
		21:  {83, 3},
		22:  {78, 3},
		23:  {78, 4},
		24:  {88, 1},
		25:  {88, 2},
		26:  {79, 2},
		27:  {79, 2},
		28:  {79, 1},
		29:  {79, 1},
		30:  {79, 1},
		31:  {79, 1},
		32:  {75, 2},
		33:  {77, 2},
		34:  {77, 3},
		35:  {77, 1},
		36:  {71, 2},
		37:  {82, 2},
		38:  {84, 2},
		39:  {80, 2},
		40:  {85, 2},
		41:  {72, 2},
		42:  {76, 2},
		43:  {89, 1},
		44:  {89, 1},
		45:  {89, 1},
		46:  {89, 1},
		47:  {89, 1},
		48:  {89, 1},
		49:  {61, 2},
		50:  {61, 3},
		51:  {69, 1},
		52:  {69, 3},
		53:  {81, 1},
		54:  {81, 2},
		55:  {62, 3},
		56:  {62, 1},
		57:  {62, 1},
		58:  {62, 1},
		59:  {62, 1},
		60:  {62, 1},
		61:  {58, 3},
		62:  {58, 3},
		63:  {58, 3},
		64:  {58, 3},
		65:  {58, 3},
		66:  {58, 1},
		67:  {58, 1},
		68:  {58, 2},
		69:  {58, 2},
		70:  {58, 2},
		71:  {58, 1},
		72:  {68, 1},
		73:  {68, 3},
		74:  {68, 1},
		75:  {68, 1},
		76:  {68, 3},
		77:  {68, 3},
		78:  {68, 3},
		79:  {68, 3},
		80:  {68, 3},
		81:  {68, 2},
		82:  {63, 3},
		83:  {63, 4},
		84:  {57, 5},
		85:  {57, 2},
		86:  {57, 1},
		87:  {67, 1},
		88:  {67, 1},
		89:  {67, 1},
		90:  {67, 1},
		91:  {67, 1},
		92:  {67, 1},
		93:  {67, 1},
		94:  {67, 1},
		95:  {67, 1},
		96:  {67, 1},
		97:  {67, 1},
		98:  {67, 1},
		99:  {67, 1},
		100: {67, 1},
		101: {67, 1},
		102: {67, 1},
		103: {67, 1},
		104: {67, 1},
		105: {67, 2},
		106: {67, 2},
		107: {105, 1},
		108: {105, 1},
		109: {105, 1},
		110: {105, 1},
		111: {105, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [160][]uint16{
		// 0
		{10: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 23: 106, 90: 108},
		{10: 128, 133, 126, 134, 127, 125, 131, 129, 124, 130, 132, 107, 23: 111, 71: 117, 122, 112, 110, 115, 123, 116, 114, 80: 120, 82: 118, 113, 119, 121, 95: 109},
		{10: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 23: 105},
		{10: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 23: 104},
		{10: 128, 133, 126, 134, 127, 125, 131, 129, 124, 130, 132, 71: 117, 122, 112, 266, 115, 123, 116, 114, 80: 120, 82: 118, 113, 119, 121},
		// 5
		{10: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 23: 99, 26: 260, 261},
		{10: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 23: 98, 26: 98, 98},
		{10: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 23: 97, 26: 97, 97},
		{10: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 23: 96, 26: 96, 96},
		{10: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 23: 95, 26: 95, 95},
		// 10
		{10: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 23: 94, 26: 94, 94},
		{10: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 23: 93, 26: 93, 93},
		{10: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 23: 92, 26: 92, 92},
		{10: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 23: 91, 26: 91, 91},
		{10: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 23: 90, 26: 90, 90},
		// 15
		{10: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 23: 89, 26: 89, 89},
		{10: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 23: 88, 26: 88, 88},
		{173, 2: 150, 4: 151, 57: 257},
		{86: 239, 241, 89: 238, 91: 242, 244, 240, 243},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 186, 141, 69: 187, 81: 237},
		// 20
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 136, 72, 138, 142, 235, 72, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 234},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 233},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 232},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 191},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 190, 141},
		// 25
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 189, 141},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 186, 141, 69: 187, 81: 185},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 135, 141},
		{10: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 23: 65, 26: 65, 65},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 60: 182, 140, 158, 141, 69: 183},
		// 30
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 180, 61: 140, 179, 141},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51: 51, 51, 51, 51, 51, 51, 59: 51, 51},
		{50, 168, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51: 50, 50, 50, 50, 50, 50, 59: 50, 50, 64: 169, 167, 170},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 51: 49, 49, 49, 49, 49, 49, 59: 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 51: 48, 48, 48, 48, 48, 48, 59: 48, 48},
		// 35
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 51: 47, 47, 47, 47, 47, 47, 59: 47, 47},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 51: 41, 41, 41, 41, 41, 41, 59: 41, 41, 64: 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 51: 40, 40, 40, 40, 40, 40, 59: 40, 40, 64: 40, 40, 40},
		{3: 166},
		{3: 165},
		// 40
		{3: 164},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 51: 36, 36, 36, 36, 36, 36, 59: 36, 36, 64: 36, 36, 36},
		{21, 21, 21, 21, 21, 21, 157, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 51: 21, 21, 21, 21, 21, 21, 59: 21, 21, 64: 21, 21, 21},
		{2: 153},
		{152},
		// 45
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 59: 22, 22, 64: 22, 22, 22},
		{154},
		{70: 155},
		{70: 156},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 59: 23, 23, 64: 23, 23, 23},
		// 50
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 46: 160, 57: 148, 139, 61: 140, 158, 141, 69: 159},
		{46: 56, 59: 56, 56},
		{46: 162, 59: 161},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 51: 25, 25, 25, 25, 25, 25, 59: 25, 25},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 163, 141},
		// 55
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 51: 24, 24, 24, 24, 24, 24, 59: 24, 24},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 22: 55, 24: 55, 55, 46: 55, 59: 55, 55},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 51: 37, 37, 37, 37, 37, 37, 59: 37, 37, 64: 37, 37, 37},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 51: 38, 38, 38, 38, 38, 38, 59: 38, 38, 64: 38, 38, 38},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 51: 39, 39, 39, 39, 39, 39, 59: 39, 39, 64: 39, 39, 39},
		// 60
		{173, 146, 150, 143, 151, 145, 172, 147, 144, 57: 148, 178},
		{173, 146, 150, 143, 151, 145, 172, 147, 144, 57: 148, 177},
		{173, 146, 150, 143, 151, 145, 172, 147, 144, 57: 148, 176},
		{173, 146, 150, 143, 151, 145, 172, 147, 144, 57: 148, 171},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 51: 43, 43, 43, 43, 43, 43, 59: 43, 43, 64: 43, 43, 43},
		// 65
		{173, 146, 150, 143, 151, 145, 172, 147, 144, 57: 148, 174},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 59: 21, 21, 64: 21, 21, 21},
		{1: 168, 46: 175, 64: 169, 167, 170},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 51: 42, 42, 42, 42, 42, 42, 59: 42, 42, 64: 42, 42, 42},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 51: 44, 44, 44, 44, 44, 44, 59: 44, 44, 64: 44, 44, 44},
		// 70
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 51: 45, 45, 45, 45, 45, 45, 59: 45, 45, 64: 169, 45, 170},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 51: 46, 46, 46, 46, 46, 46, 59: 46, 46, 64: 169, 46, 170},
		{46: 181},
		{1: 168, 9: 50, 28: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 175, 64: 169, 167, 170},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51: 52, 52, 52, 52, 52, 52, 59: 52, 52},
		// 75
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 51: 58, 58, 58, 58, 58, 58, 59: 58, 58},
		{59: 161, 184},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 51: 57, 57, 57, 57, 57, 57, 59: 57, 57},
		{10: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 23: 66, 26: 66, 66},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 10: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 56, 54, 56, 56, 54, 54, 59: 56},
		// 80
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 161, 61: 140, 188, 141},
		{10: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 23: 53, 26: 53, 53},
		{10: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 23: 67, 26: 67, 67},
		{10: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 23: 68, 26: 68, 68},
		{9: 218, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 23: 69, 26: 69, 69, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 47: 199, 200, 67: 201},
		// 85
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 180, 61: 140, 229, 141, 68: 230},
		{1: 36, 9: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 23: 36, 26: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 64: 36, 36, 36},
		{9: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 23: 33, 26: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{9: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 23: 32, 26: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{9: 218, 28: 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 67: 226},
		// 90
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 198},
		{9: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 23: 26, 26: 26, 26, 220, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 199, 26, 67: 201},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 225},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 224},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 223, 141},
		// 95
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 22: 20, 24: 20, 20, 49: 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 22: 19, 24: 19, 19, 49: 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 22: 18, 24: 18, 18, 49: 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 22: 17, 24: 17, 17, 49: 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 22: 16, 24: 16, 16, 49: 16, 16},
		// 100
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 22: 15, 24: 15, 15, 49: 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 22: 14, 24: 14, 14, 49: 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 22: 13, 24: 13, 13, 49: 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 22: 12, 24: 12, 12, 49: 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 22: 11, 24: 11, 11, 49: 11, 11},
		// 105
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 22: 10, 24: 10, 10, 49: 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 22: 9, 24: 9, 9, 49: 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 22: 8, 24: 8, 8, 49: 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 22: 7, 24: 7, 7, 49: 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 22: 6, 24: 6, 6, 49: 6, 6},
		// 110
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 22: 5, 24: 5, 5, 49: 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 22: 4, 24: 4, 4, 28: 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 49: 4, 4, 67: 222},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 22: 3, 24: 3, 3, 49: 3, 3},
		{9: 218, 28: 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 67: 221},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22: 1, 24: 1, 1, 49: 1, 1},
		// 115
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 22: 2, 24: 2, 2, 49: 2, 2},
		{9: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 23: 27, 26: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{9: 218, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 23: 29, 26: 29, 29, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 29, 199, 29, 67: 201},
		{9: 218, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 23: 30, 26: 30, 30, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 30, 199, 200, 67: 201},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 227, 141, 68: 228},
		// 120
		{9: 218, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 23: 31, 26: 31, 31, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 31, 31, 31, 67: 226},
		{9: 218, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 23: 28, 26: 28, 28, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 28, 199, 200, 67: 201},
		{9: 218, 28: 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 181, 67: 226},
		{9: 218, 28: 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 231, 199, 200, 67: 201},
		{9: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 23: 34, 26: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		// 125
		{9: 218, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 23: 70, 26: 70, 70, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 47: 199, 200, 67: 201},
		{9: 218, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 23: 71, 26: 71, 71, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 47: 199, 200, 67: 201},
		{9: 218, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 23: 74, 26: 74, 74, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 47: 199, 200, 67: 201},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 236},
		{9: 218, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 23: 73, 26: 73, 73, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 47: 199, 200, 67: 201},
		// 130
		{10: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 23: 75, 26: 75, 75},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 245, 141},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 22: 64, 24: 64, 64},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 22: 63, 24: 63, 63},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 22: 62, 24: 62, 62},
		// 135
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 22: 61, 24: 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 22: 60, 24: 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 22: 59, 24: 59, 59},
		{10: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 23: 85, 26: 85, 85, 51: 249, 250, 248, 252, 251, 253, 79: 247, 88: 246},
		{10: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 23: 84, 26: 84, 84, 51: 249, 250, 248, 252, 251, 253, 79: 256},
		// 140
		{10: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 23: 83, 26: 83, 83, 51: 83, 83, 83, 83, 83, 83},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 255, 141},
		{149, 146, 150, 143, 151, 145, 137, 147, 144, 22: 136, 24: 138, 142, 57: 148, 139, 61: 140, 254, 141},
		{10: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 23: 79, 26: 79, 79, 51: 79, 79, 79, 79, 79, 79},
		{10: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 23: 78, 26: 78, 78, 51: 78, 78, 78, 78, 78, 78},
		// 145
		{10: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 23: 77, 26: 77, 77, 51: 77, 77, 77, 77, 77, 77},
		{10: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 23: 76, 26: 76, 76, 51: 76, 76, 76, 76, 76, 76},
		{10: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 23: 80, 26: 80, 80, 51: 80, 80, 80, 80, 80, 80},
		{10: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 23: 81, 26: 81, 81, 51: 81, 81, 81, 81, 81, 81},
		{10: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 23: 82, 26: 82, 82, 51: 82, 82, 82, 82, 82, 82},
		// 150
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 258, 141, 68: 259},
		{9: 218, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 23: 87, 26: 87, 87, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 67: 226},
		{9: 218, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 23: 86, 26: 86, 86, 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 47: 199, 200, 67: 201},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 265},
		{173, 2: 150, 4: 151, 57: 262},
		// 155
		{10: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 23: 100, 26: 263},
		{149, 146, 150, 143, 151, 145, 192, 147, 144, 197, 22: 136, 24: 138, 142, 49: 195, 194, 57: 193, 139, 61: 140, 196, 141, 68: 264},
		{9: 218, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 23: 101, 28: 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 47: 199, 200, 67: 201},
		{9: 218, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 23: 102, 28: 220, 211, 210, 203, 202, 207, 206, 219, 216, 217, 209, 208, 215, 214, 205, 204, 212, 213, 47: 199, 200, 67: 201},
		{10: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 23: 103},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 102

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 3:
		{
			yylex.(*Lexer).wg.Add(1)
			r := yyS[yypt-0].cmd.Run(yylex.(*Lexer))
			if r == ErrStopExecution {
				return -1
			}
		}
	case 4:
		{
			yylex.(*Lexer).wg.Add(1)
			go yyS[yypt-0].cmd.Run(yylex.(*Lexer))
		}
	case 5:
		{
			yyVAL.cmd.SetWhen(yyS[yypt-0].expression)
			yyVAL.cmd = yyS[yypt-2].cmd
		}
	case 6:
		{

			yyS[yypt-4].cmd.SetWhen(yyS[yypt-0].expression)
			yyS[yypt-4].cmd.(IntoCommand).SetInto(yyS[yypt-2].variable.Name)
			yyVAL.cmd = yyS[yypt-4].cmd
		}
	case 7:
		{
			//TODO: check if it compatible with SetInto
			yyS[yypt-2].cmd.(IntoCommand).SetInto(yyS[yypt-0].variable.Name)
			yyVAL.cmd = yyS[yypt-2].cmd
		}
	case 8:
		{
			yyVAL.cmd = yyS[yypt-0].cmd
		}
	case 20:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.Name,
				Value: yyS[yypt-0].expression,
			}
		}
	case 21:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.Name,
				Value: yyS[yypt-0].expression,
			}
		}
	case 22:
		{
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].expression,
			}
		}
	case 23:
		{
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				Url:           yyS[yypt-1].expression,
				CommandParams: yyS[yypt-0].http_command_params,
			}
		}
	case 24:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 25:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 26:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].expression,
			}
		}
	case 27:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].expression,
			}
		}
	case 28:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-0].val.(string),
				ParamValue: &ExprBool{Val: true},
			}
		}
	case 29:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "FOLLOW",
				ParamValue: &ExprBool{Val: false},
			}
		}
	case 30:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "SECURE",
				ParamValue: &ExprBool{Val: false},
			}
		}
	case 31:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "SECURE",
				ParamValue: &ExprBool{Val: true},
			}
		}
	case 32:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].expressions,
			}
		}
	case 33:
		{
			yyVAL.cmd = &EndCommand{Expr: yyS[yypt-0].expression}
		}
	case 34:
		{
			yyVAL.cmd = &EndCommand{Expr: yyS[yypt-0].expression}
		}
	case 35:
		{
			yyVAL.cmd = &EndCommand{}
		}
	case 36:
		{
			yyVAL.cmd = &AssertCommand{Expr: yyS[yypt-0].expression}
		}
	case 37:
		{
			yyVAL.cmd = &MustCommand{Expr: yyS[yypt-0].expression}
		}
	case 38:
		{
			yyVAL.cmd = &ShouldCommand{Expr: yyS[yypt-0].expression}
		}
	case 39:
		{
			yyVAL.cmd = &IncludeCommand{}
		}
	case 40:
		{
			yyVAL.cmd = &SleepCommand{}
		}
	case 41:
		{
			yyVAL.cmd = &CmdCommand{Params: yyS[yypt-0].expressions}
		}
	case 42:
		{
			yyVAL.cmd = &EchoCommand{}
		}
	case 49:
		{
			yyVAL.expressions = ExprArray{}
		}
	case 50:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 51:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 52:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 53:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 54:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 55:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 56:
		{
			yyVAL.expression = &ExprString{
				Val: yyS[yypt-0].val.(string),
			}
		}
	case 57:
		{
			yyVAL.expression = yyS[yypt-0].expression
		}
	case 58:
		{
			yyVAL.expression = &ExprArray{Values: yyS[yypt-0].expressions.Values}
		}
	case 59:
		{
			yyVAL.expression = yyS[yypt-0].expression
		}
	case 60:
		{
			yyVAL.expression = &ExprType{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 61:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "+",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 62:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "-",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 63:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "*",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 64:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "/",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 65:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 66:
		{
			yyVAL.expression = &ExprInteger{
				Val: yyS[yypt-0].val.(int64),
			}
		}
	case 67:
		{
			yyVAL.expression = &ExprFloat{
				Val: yyS[yypt-0].val.(float64),
			}
		}
	case 68:
		{
			yyVAL.expression = &ExprFloat{
				Val: float64(yyS[yypt-0].val.(int64)) / 100,
			}
		}
	case 69:
		{
			yyVAL.expression = &ExprInteger{
				Val: -yyS[yypt-0].val.(int64),
			}
		}
	case 70:
		{
			ca, _ := strconv.ParseFloat(fmt.Sprintf("0.%d", yyS[yypt-0].val), 10)
			yyVAL.expression = &ExprFloat{
				Val: ca,
			}

		}
	case 71:
		{
			yyVAL.expression = &ExprVariable{
				Name: yyS[yypt-0].variable.Name,
			}
		}
	case 72:
		{
			// convert variable to a predicate expression
			yyVAL.expression = &ExprPredicate{
				Left: &ExprVariable{
					Name: yyS[yypt-0].variable.Name,
				},
				Operator: "equals",
				Right: &ExprBool{
					Val: true,
				},
			}
		}
	case 73:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 74:
		{
			yyVAL.expression = &ExprBool{
				Val: true,
			}
		}
	case 75:
		{
			yyVAL.expression = &ExprBool{
				Val: false,
			}
		}
	case 76:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 77:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: "AND",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 78:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: "OR",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 79:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 80:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 81:
		{
			yyVAL.expression = yyS[yypt-0].expression

			t := reflect.TypeOf(yyS[yypt-0].expression)

			if t == reflect.TypeOf(&ExprBool{}).Elem() {
				yyS[yypt-0].expression.(*ExprBool).Val = !(yyS[yypt-0].expression.(*ExprBool).Val)
			} else if t == reflect.TypeOf(&ExprPredicate{}) {
				yyS[yypt-0].expression.(*ExprPredicate).Not = !(yyS[yypt-0].expression.(*ExprPredicate).Not)
			} else {
				yyVAL.expression = &ExprBool{
					Val: !IsTrue(yyS[yypt-0].expression),
				}
			}
		}
	case 82:
		{
			//call $1
			yyVAL.expression = &ExprFunc{
				Name:   yyS[yypt-2].val.(string),
				Params: nil,
			}
		}
	case 83:
		{
			yyVAL.expression = &ExprFunc{
				Name:   yyS[yypt-3].val.(string),
				Params: yyS[yypt-1].expressions.Values,
			}
		}
	case 84:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-2].val.(string),
			}
		}
	case 85:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 86:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 105:
		{
			yyVAL.val = "NOT" + yyS[yypt-0].val.(string)
		}
	case 106:
		{
			yyVAL.val = "NOT" + yyS[yypt-0].val.(string)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func Parse(text string) *Lexer {

	l := &Lexer{
		tokens:     make(chan Token),
		State:      NewStats(),
		GlobalVars: map[string]interface{}{},
		wg:         &sync.WaitGroup{},
	}

	l.GlobalVars["State"] = &l.State

	if Verbose {
		yyDebug = 3
	}

	go func() {
		s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
		for {
			l.tokens <- s.Scan()
		}
	}()

	return l
}

func Run(l *Lexer) {
	yyParse(l)
	l.wg.Wait()
}
