// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"log"
	"strings"
)

var GlobalVars = map[string]interface{}{}

type yySymType struct {
	yys      int
	val      interface{}
	vals     []interface{}
	str      string
	integer  int
	boolean  bool
	flt      int64
	bytes    []byte
	cmd      Command
	variable struct {
		name  string
		value interface{}
	}
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57392
	yyEofCode  = 57344
	AND        = 57386
	ASSERT     = 57360
	BODY       = 57373
	CONNECT    = 57368
	CONTAIN    = 57383
	CONTAINS   = 57382
	DEBUG      = 57358
	DELETE     = 57367
	END        = 57359
	EOF        = 57347
	EOL        = 57346
	EQUAL      = 57375
	EQUALS     = 57374
	FALSE      = 57352
	FLOAT      = 57350
	GE         = 57379
	GET        = 57363
	GT         = 57378
	HEAD       = 57364
	HEADER     = 57372
	HTTP       = 57355
	IDENTIFIER = 57391
	INCLUDE    = 57361
	INTEGER    = 57349
	INTO       = 57390
	KEYWORD    = 57353
	LE         = 57381
	LT         = 57380
	MATCH      = 57389
	MATCHES    = 57388
	MUST       = 57356
	NOTEQUAL   = 57377
	NOTEQUALS  = 57376
	OPTIONS    = 57369
	OR         = 57387
	PATCH      = 57371
	POST       = 57365
	PUT        = 57366
	SET        = 57354
	SHOULD     = 57357
	SLEEP      = 57362
	STARTSWITH = 57384
	STRING     = 57348
	TRACE      = 57370
	TRUE       = 57351
	WHEN       = 57385
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -83
)

var (
	yyPrec = map[int]int{
		'|': 0,
		'&': 1,
		'+': 2,
		'-': 2,
		'*': 3,
		'/': 3,
		'%': 3,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (62x)
		57360: 1,  // ASSERT (62x)
		57358: 2,  // DEBUG (62x)
		57359: 3,  // END (62x)
		57355: 4,  // HTTP (62x)
		57361: 5,  // INCLUDE (62x)
		57356: 6,  // MUST (62x)
		57354: 7,  // SET (62x)
		57357: 8,  // SHOULD (62x)
		57362: 9,  // SLEEP (62x)
		123:   10, // '{' (60x)
		36:    11, // '$' (59x)
		57350: 12, // FLOAT (57x)
		57349: 13, // INTEGER (57x)
		57348: 14, // STRING (57x)
		57385: 15, // WHEN (57x)
		57390: 16, // INTO (56x)
		57386: 17, // AND (35x)
		57387: 18, // OR (35x)
		40:    19, // '(' (34x)
		41:    20, // ')' (30x)
		57416: 21, // variable (28x)
		57352: 22, // FALSE (27x)
		57351: 23, // TRUE (27x)
		57394: 24, // any_value (26x)
		57410: 25, // number (26x)
		37:    26, // '%' (23x)
		42:    27, // '*' (23x)
		43:    28, // '+' (23x)
		45:    29, // '-' (23x)
		47:    30, // '/' (23x)
		57401: 31, // expr (19x)
		57383: 32, // CONTAIN (18x)
		57382: 33, // CONTAINS (18x)
		57375: 34, // EQUAL (18x)
		57374: 35, // EQUALS (18x)
		57379: 36, // GE (18x)
		57378: 37, // GT (18x)
		57381: 38, // LE (18x)
		57380: 39, // LT (18x)
		57389: 40, // MATCH (18x)
		57388: 41, // MATCHES (18x)
		57377: 42, // NOTEQUAL (18x)
		57376: 43, // NOTEQUALS (18x)
		57384: 44, // STARTSWITH (18x)
		57373: 45, // BODY (13x)
		57372: 46, // HEADER (13x)
		57415: 47, // true_false (12x)
		57396: 48, // boolean_exp (11x)
		57402: 49, // expr_opr (11x)
		57411: 50, // operator (4x)
		125:   51, // '}' (2x)
		57404: 52, // http_command_param (2x)
		57391: 53, // IDENTIFIER (2x)
		57393: 54, // any_command (1x)
		57395: 55, // assert_command (1x)
		57397: 56, // command (1x)
		57398: 57, // command_with_condition_opt (1x)
		57368: 58, // CONNECT (1x)
		57399: 59, // debug_command (1x)
		57367: 60, // DELETE (1x)
		57400: 61, // end_command (1x)
		57363: 62, // GET (1x)
		57364: 63, // HEAD (1x)
		57403: 64, // http_command (1x)
		57405: 65, // http_command_params (1x)
		57406: 66, // http_method (1x)
		57407: 67, // include_command (1x)
		57408: 68, // multi_any_value (1x)
		57409: 69, // must_command (1x)
		57369: 70, // OPTIONS (1x)
		57371: 71, // PATCH (1x)
		57365: 72, // POST (1x)
		57366: 73, // PUT (1x)
		57412: 74, // set_command (1x)
		57413: 75, // should_command (1x)
		57414: 76, // sleep_command (1x)
		57370: 77, // TRACE (1x)
		57392: 78, // $default (0x)
		38:    79, // '&' (0x)
		124:   80, // '|' (0x)
		57347: 81, // EOF (0x)
		57346: 82, // EOL (0x)
		57345: 83, // error (0x)
		57353: 84, // KEYWORD (0x)
	}

	yySymNames = []string{
		"$end",
		"ASSERT",
		"DEBUG",
		"END",
		"HTTP",
		"INCLUDE",
		"MUST",
		"SET",
		"SHOULD",
		"SLEEP",
		"'{'",
		"'$'",
		"FLOAT",
		"INTEGER",
		"STRING",
		"WHEN",
		"INTO",
		"AND",
		"OR",
		"'('",
		"')'",
		"variable",
		"FALSE",
		"TRUE",
		"any_value",
		"number",
		"'%'",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"expr",
		"CONTAIN",
		"CONTAINS",
		"EQUAL",
		"EQUALS",
		"GE",
		"GT",
		"LE",
		"LT",
		"MATCH",
		"MATCHES",
		"NOTEQUAL",
		"NOTEQUALS",
		"STARTSWITH",
		"BODY",
		"HEADER",
		"true_false",
		"boolean_exp",
		"expr_opr",
		"operator",
		"'}'",
		"http_command_param",
		"IDENTIFIER",
		"any_command",
		"assert_command",
		"command",
		"command_with_condition_opt",
		"CONNECT",
		"debug_command",
		"DELETE",
		"end_command",
		"GET",
		"HEAD",
		"http_command",
		"http_command_params",
		"http_method",
		"include_command",
		"multi_any_value",
		"must_command",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"set_command",
		"should_command",
		"sleep_command",
		"TRACE",
		"$default",
		"'&'",
		"'|'",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {54, 0},
		2:  {54, 2},
		3:  {57, 5},
		4:  {57, 3},
		5:  {57, 3},
		6:  {57, 1},
		7:  {56, 1},
		8:  {56, 1},
		9:  {56, 1},
		10: {56, 1},
		11: {56, 1},
		12: {56, 1},
		13: {56, 1},
		14: {56, 1},
		15: {56, 1},
		16: {76, 2},
		17: {67, 2},
		18: {59, 2},
		19: {61, 3},
		20: {61, 2},
		21: {61, 1},
		22: {55, 2},
		23: {69, 2},
		24: {75, 2},
		25: {74, 3},
		26: {74, 3},
		27: {64, 4},
		28: {64, 3},
		29: {65, 1},
		30: {65, 2},
		31: {52, 2},
		32: {52, 2},
		33: {66, 1},
		34: {66, 1},
		35: {66, 1},
		36: {66, 1},
		37: {66, 1},
		38: {66, 1},
		39: {66, 1},
		40: {66, 1},
		41: {66, 1},
		42: {68, 1},
		43: {68, 2},
		44: {24, 1},
		45: {24, 1},
		46: {24, 1},
		47: {21, 5},
		48: {21, 2},
		49: {50, 1},
		50: {50, 1},
		51: {50, 1},
		52: {50, 1},
		53: {50, 1},
		54: {50, 1},
		55: {50, 1},
		56: {50, 1},
		57: {50, 1},
		58: {50, 1},
		59: {50, 1},
		60: {50, 1},
		61: {50, 1},
		62: {48, 1},
		63: {48, 3},
		64: {48, 3},
		65: {48, 3},
		66: {48, 1},
		67: {47, 1},
		68: {47, 1},
		69: {49, 3},
		70: {49, 3},
		71: {49, 3},
		72: {49, 3},
		73: {49, 3},
		74: {31, 3},
		75: {31, 3},
		76: {31, 3},
		77: {31, 3},
		78: {31, 3},
		79: {31, 3},
		80: {31, 1},
		81: {25, 1},
		82: {25, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [120][]uint16{
		// 0
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 54: 84},
		{83, 100, 98, 99, 104, 97, 101, 103, 102, 96, 55: 91, 86, 85, 59: 89, 61: 90, 64: 88, 67: 94, 69: 92, 74: 87, 93, 95},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 15: 198, 197},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 15: 76, 76},
		// 5
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 15: 75, 75},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 15: 74, 74},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 15: 73, 73},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 15: 72, 72},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 15: 71, 71},
		// 10
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 15: 70, 70},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 15: 69, 69},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 15: 68, 68},
		{10: 119, 120, 122, 121, 116, 21: 117, 24: 196, 118},
		{10: 119, 120, 122, 121, 116, 21: 117, 24: 195, 118},
		// 15
		{10: 119, 120, 122, 121, 116, 21: 117, 24: 193, 118, 68: 192},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 119, 120, 122, 121, 116, 189, 62, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 190, 141},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 188, 141},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 187, 141},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 186, 141},
		// 20
		{10: 119, 120, 21: 135},
		{58: 111, 60: 110, 62: 106, 107, 66: 105, 70: 112, 114, 108, 109, 77: 113},
		{10: 119, 120, 122, 121, 116, 21: 117, 24: 115, 118},
		{10: 50, 50, 50, 50, 50},
		{10: 49, 49, 49, 49, 49},
		// 25
		{10: 48, 48, 48, 48, 48},
		{10: 47, 47, 47, 47, 47},
		{10: 46, 46, 46, 46, 46},
		{10: 45, 45, 45, 45, 45},
		{10: 44, 44, 44, 44, 44},
		// 30
		{10: 43, 43, 43, 43, 43},
		{10: 42, 42, 42, 42, 42},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15: 55, 55, 45: 131, 130, 52: 129, 65: 128},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 20: 39, 26: 39, 39, 39, 39, 39, 32: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 20: 38, 26: 38, 38, 38, 38, 38, 32: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		// 35
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 20: 37, 26: 37, 37, 37, 37, 37, 32: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{10: 124},
		{53: 123},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20: 2, 26: 2, 2, 2, 2, 2, 32: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20: 1, 26: 1, 1, 1, 1, 1, 32: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		// 40
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 22: 35, 35, 26: 35, 35, 35, 35, 35, 32: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{53: 125},
		{51: 126},
		{51: 127},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 22: 36, 36, 26: 36, 36, 36, 36, 36, 32: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 45
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 15: 56, 56, 45: 131, 130, 52: 134},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 15: 54, 54, 45: 54, 54},
		{10: 119, 120, 122, 121, 116, 21: 117, 24: 133, 118},
		{10: 119, 120, 122, 121, 116, 21: 117, 24: 132, 118},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 15: 51, 51, 45: 51, 51},
		// 50
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 15: 52, 52, 45: 52, 52},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 15: 53, 53, 45: 53, 53},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 136, 47: 138, 137, 141},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 15: 58, 58, 26: 169, 167, 165, 166, 168, 32: 153, 152, 145, 144, 149, 148, 151, 150, 155, 156, 147, 146, 154, 50: 177},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 15: 57, 57, 181, 182},
		// 55
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 15: 21, 21, 21, 21, 20: 21},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 176, 47: 138, 175, 141},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 15: 3, 3, 20: 3, 26: 3, 3, 3, 3, 3, 32: 153, 152, 145, 144, 149, 148, 151, 150, 155, 156, 147, 146, 154, 50: 157},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15: 17, 17, 17, 17, 20: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15: 16, 16, 16, 16, 20: 16},
		// 60
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15: 15, 15, 15, 15, 20: 15},
		{10: 34, 34, 34, 34, 34, 19: 34, 22: 34, 34},
		{10: 33, 33, 33, 33, 33, 19: 33, 22: 33, 33},
		{10: 32, 32, 32, 32, 32, 19: 32, 22: 32, 32},
		{10: 31, 31, 31, 31, 31, 19: 31, 22: 31, 31},
		// 65
		{10: 30, 30, 30, 30, 30, 19: 30, 22: 30, 30},
		{10: 29, 29, 29, 29, 29, 19: 29, 22: 29, 29},
		{10: 28, 28, 28, 28, 28, 19: 28, 22: 28, 28},
		{10: 27, 27, 27, 27, 27, 19: 27, 22: 27, 27},
		{10: 26, 26, 26, 26, 26, 19: 26, 22: 26, 26},
		// 70
		{10: 25, 25, 25, 25, 25, 19: 25, 22: 25, 25},
		{10: 24, 24, 24, 24, 24, 19: 24, 22: 24, 24},
		{10: 23, 23, 23, 23, 23, 19: 23, 22: 23, 23},
		{10: 22, 22, 22, 22, 22, 19: 22, 22: 22, 22},
		{10: 119, 120, 122, 121, 116, 19: 161, 21: 117, 143, 142, 158, 118, 31: 160, 47: 159},
		// 75
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 15: 19, 19, 19, 19, 20: 19, 26: 3, 3, 3, 3, 3},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15: 18, 18, 18, 18, 20: 18},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15: 13, 13, 13, 13, 20: 13, 26: 169, 167, 165, 166, 168},
		{10: 119, 120, 122, 121, 116, 19: 161, 21: 117, 24: 163, 118, 31: 162},
		{20: 164, 26: 169, 167, 165, 166, 168},
		// 80
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 15: 3, 3, 3, 3, 20: 3, 26: 3, 3, 3, 3, 3, 32: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 15: 9, 9, 9, 9, 20: 9, 26: 9, 9, 9, 9, 9, 32: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{10: 119, 120, 122, 121, 116, 19: 161, 21: 117, 24: 163, 118, 31: 174},
		{10: 119, 120, 122, 121, 116, 19: 161, 21: 117, 24: 163, 118, 31: 173},
		{10: 119, 120, 122, 121, 116, 19: 161, 21: 117, 24: 163, 118, 31: 172},
		// 85
		{10: 119, 120, 122, 121, 116, 19: 161, 21: 117, 24: 163, 118, 31: 171},
		{10: 119, 120, 122, 121, 116, 19: 161, 21: 117, 24: 163, 118, 31: 170},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 15: 4, 4, 4, 4, 20: 4, 26: 4, 4, 4, 4, 4, 32: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15: 5, 5, 5, 5, 20: 5, 26: 5, 5, 5, 5, 5, 32: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 15: 6, 6, 6, 6, 20: 6, 26: 6, 6, 6, 6, 6, 32: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		// 90
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 15: 7, 7, 7, 7, 20: 7, 26: 169, 167, 7, 7, 168, 32: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 15: 8, 8, 8, 8, 20: 8, 26: 169, 167, 8, 8, 168, 32: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{17: 181, 182, 20: 180},
		{20: 164, 26: 169, 167, 165, 166, 168, 32: 153, 152, 145, 144, 149, 148, 151, 150, 155, 156, 147, 146, 154, 50: 177},
		{10: 119, 120, 122, 121, 116, 19: 161, 21: 117, 24: 179, 118, 31: 178},
		// 95
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15: 14, 14, 14, 14, 20: 14, 26: 169, 167, 165, 166, 168},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 15: 12, 12, 12, 12, 20: 12, 26: 3, 3, 3, 3, 3},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15: 20, 20, 20, 20, 20: 20},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 185, 141},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 184, 141},
		// 100
		{26: 169, 167, 165, 166, 168, 32: 153, 152, 145, 144, 149, 148, 151, 150, 155, 156, 147, 146, 154, 50: 177},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15: 10, 10, 181, 182, 20: 10},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 15: 11, 11, 181, 182, 20: 11},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 15: 59, 59, 181, 182},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 15: 60, 60, 181, 182},
		// 105
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 15: 61, 61, 181, 182},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 191, 141},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 15: 63, 63, 181, 182},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 15: 64, 64, 181, 182},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 119, 120, 122, 121, 116, 65, 65, 21: 117, 24: 194, 118},
		// 110
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 15: 66, 66},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 15: 67, 67},
		{10: 119, 120, 21: 200},
		// 115
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 199, 141},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 17: 181, 182},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 15: 201},
		{10: 119, 120, 122, 121, 116, 19: 139, 21: 117, 143, 142, 140, 118, 31: 183, 47: 138, 202, 141},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 17: 181, 182},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 83

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 3:
		{
			//run command put result into variable WHEN boolean_exp is true
			if strings.Contains(yyS[yypt-2].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}

			if yyS[yypt-0].boolean {
				GlobalVars[yyS[yypt-2].variable.name] = yyS[yypt-4].cmd.Run()
			}
		}
	case 4:
		{
			//command INTO variable
			if strings.Contains(yyS[yypt-0].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}
			GlobalVars[yyS[yypt-0].variable.name] = yyS[yypt-2].cmd.Run()
		}
	case 5:
		{
			//run the command only if boolean_exp is true
			if yyS[yypt-0].boolean {
				yyS[yypt-2].cmd.Run()
			}
		}
	case 6:
		{
			//just run the command
			yyS[yypt-0].cmd.Run()
			//run command without condition

		}
	case 16:
		{
			yyVAL.cmd = &SleepCommand{
				Millisecond: intVal(yyS[yypt-0].val),
			}
		}
	case 17:
		{
			yyVAL.cmd = &IncludeCommand{
				File: yyS[yypt-0].val.(string),
			}
		}
	case 18:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].vals,
			}
		}
	case 19:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 20:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 21:
		{
			return -1
		}
	case 22:
		{
			if !yyS[yypt-0].boolean {
				State.Assertion.Failed++
			} else {
				State.Assertion.Succeeded++
			}
			yyVAL.cmd = &AssertCommand{}
		}
	case 23:
		{
			if !yyS[yypt-0].boolean {
				State.Must.Failed++
			} else {
				State.Must.Succeeded++
			}

			yyVAL.cmd = &MustCommand{}
		}
	case 24:
		{
			if !yyS[yypt-0].boolean {
				State.Should.Failed++
			} else {
				State.Should.Succeeded++
			}
			yyVAL.cmd = &ShouldCommand{}
		}
	case 25:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].val,
			}
		}
	case 26:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].boolean,
			}
		}
	case 27:
		{
			//call http with header here.
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				CommandParams: yyS[yypt-0].http_command_params,
				Url:           yyS[yypt-1].val.(string),
			}
		}
	case 28:
		{
			//simple http command
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].val.(string),
			}
		}
	case 29:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 30:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 31:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].val.(string),
			}
		}
	case 32:
		{
			//adding query param
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].val.(string),
			}
		}
	case 42:
		{
			//getting a single value from multi_value exp
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 43:
		{
			//multi value
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 44:
		{
			//string_or_var : STRING
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.val, _ = executeTemplate(yyS[yypt-0].val.(string), GlobalVars)
			} else {

			}
		}
	case 45:
		{
			//any_value : variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.val, _ = executeTemplate(yyS[yypt-0].variable.value.(string), GlobalVars)
				} else {
					yyVAL.val = yyS[yypt-0].variable.value
				}
			default:
				yyVAL.val = yyS[yypt-0].variable.value
			}
		}
	case 47:
		{
			//getting variable
			yyVAL.variable.name = yyS[yypt-2].val.(string)
			yyVAL.variable.value = query(yyS[yypt-2].val.(string), GlobalVars)
		}
	case 48:
		{
			yyVAL.variable.name = yyS[yypt-0].val.(string)
			yyVAL.variable.value = query(yyS[yypt-0].val.(string), GlobalVars)
		}
	case 63:
		{
			//boolean_ex: '(' boolean_exp ')'
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 64:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 65:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].boolean)
			yyVAL.boolean = operator_result
		}
	case 67:
		{
			yyVAL.boolean = true
		}
	case 68:
		{
			yyVAL.boolean = false
		}
	case 69:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 70:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 71:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 72:
		{
			//boolean_ex: boolean_exp AND boolean_exp
			yyVAL.boolean = yyS[yypt-2].boolean && yyS[yypt-0].boolean
		}
	case 73:
		{
			//boolean_ex: boolean_exp OR boolean_exp
			yyVAL.boolean = yyS[yypt-2].boolean || yyS[yypt-0].boolean
		}
	case 74:
		{
			yyVAL.val = yyS[yypt-1].val
		}
	case 75:
		{
			yyVAL.val, _ = add(yyS[yypt-2].val, yyS[yypt-0].val)
		}
	case 76:
		{
			yyVAL.val, _ = subtract(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 77:
		{
			yyVAL.val, _ = multiply(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 78:
		{
			yyVAL.val, _ = divide(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 79:
		{
			yyVAL.val, _ = mod(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 81:
		{
			//number: INTEGER
			yyVAL.val = yyS[yypt-0].val
		}
	case 82:
		{
			//number: FLOAT
			yyVAL.val = yyS[yypt-0].val
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

type lex struct {
	tokens []Token
}

func (l *lex) Lex(lval *yySymType) int {
	if len(l.tokens) == 0 {
		return 0
	}

	v := l.tokens[0]
	l.tokens = l.tokens[1:]
	lval.val = v.Val
	return v.Type
}

func (l *lex) Error(e string) {
	log.Fatal(e)
}

//TODO: use channels here.
//Parse parses a given string and returns a lex
func Parse(text string) *lex {

	SetStateErrors()

	s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
	tokens := make(Tokens, 0)

	for {
		token := s.Scan()
		//fmt.Println(token)
		if token.Type == EOF || token.Type == -1 {
			break
		}
		tokens = append(tokens, token)
	}
	l := &lex{tokens}
	return l
}

//Resets the state to start over
func Reset() {
	GlobalVars = map[string]interface{}{}
	State = NewStats()
}

func Run(l *lex) {
	yyParse(l)
}
