// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"io/ioutil"
	"os"
	"reflect"
	"strconv"
	"strings"
	"sync"
)

type yySymType struct {
	yys                 int
	expression          Expression
	expressions         ExprArray
	val                 interface{}
	vals                []interface{}
	str                 ExprString
	integer             ExprInteger
	boolean             ExprBool
	bytes               []byte
	cmd                 Command
	cmd_list            []Command
	variable            ExprVariable
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57408
	yyEofCode  = 57344
	AND        = 57397
	ASSERT     = 57361
	ASYNC      = 57365
	BODY       = 57379
	CMD        = 57364
	CONNECT    = 57374
	CONTAIN    = 57393
	CONTAINS   = 57392
	DEBUG      = 57359
	DELETE     = 57373
	ECHO       = 57366
	END        = 57360
	ENDLOOP    = 57368
	EOF        = 57347
	EOL        = 57346
	EQUAL      = 57385
	EQUALS     = 57384
	FALSE      = 57352
	FLOAT      = 57350
	FOLLOW     = 57380
	GE         = 57389
	GET        = 57369
	GT         = 57388
	HEAD       = 57370
	HEADER     = 57378
	HTTP       = 57356
	IDENTIFIER = 57406
	IN         = 57404
	INCLUDE    = 57362
	INSECURE   = 57383
	INTEGER    = 57349
	INTO       = 57405
	IS         = 57401
	ISNOT      = 57402
	KEYWORD    = 57354
	LE         = 57391
	LOOP       = 57367
	LT         = 57390
	MATCH      = 57400
	MATCHES    = 57399
	MUST       = 57357
	NOFOLLOW   = 57381
	NOT        = 57403
	NOTEQUAL   = 57387
	NOTEQUALS  = 57386
	NULL       = 57353
	OPTIONS    = 57375
	OR         = 57398
	PATCH      = 57377
	POST       = 57371
	PUT        = 57372
	SECURE     = 57382
	SET        = 57355
	SHOULD     = 57358
	SLEEP      = 57363
	STARTSWITH = 57394
	STARTWITH  = 57395
	STRING     = 57348
	TRACE      = 57376
	TRUE       = 57351
	TYPE       = 57407
	WHEN       = 57396
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -112
)

var (
	yyPrec = map[int]int{
		AND:        0,
		OR:         0,
		EQUALS:     1,
		EQUAL:      1,
		NOTEQUALS:  1,
		NOTEQUAL:   1,
		GT:         1,
		GE:         1,
		LT:         1,
		LE:         1,
		CONTAINS:   1,
		CONTAIN:    1,
		STARTSWITH: 1,
		STARTWITH:  1,
		MATCHES:    1,
		MATCH:      1,
		IS:         1,
		ISNOT:      1,
		NOT:        1,
		IN:         1,
		'+':        2,
		'-':        2,
		'*':        3,
		'/':        3,
		'%':        3,
	}

	yyXLAT = map[int]int{
		57406: 0,   // IDENTIFIER (105x)
		123:   1,   // '{' (104x)
		36:    2,   // '$' (103x)
		57349: 3,   // INTEGER (102x)
		45:    4,   // '-' (101x)
		37:    5,   // '%' (99x)
		40:    6,   // '(' (99x)
		46:    7,   // '.' (99x)
		57350: 8,   // FLOAT (99x)
		91:    9,   // '[' (94x)
		57348: 10,  // STRING (94x)
		57407: 11,  // TYPE (94x)
		57361: 12,  // ASSERT (91x)
		57365: 13,  // ASYNC (91x)
		57364: 14,  // CMD (91x)
		57359: 15,  // DEBUG (91x)
		57366: 16,  // ECHO (91x)
		57360: 17,  // END (91x)
		57356: 18,  // HTTP (91x)
		57362: 19,  // INCLUDE (91x)
		57367: 20,  // LOOP (91x)
		57357: 21,  // MUST (91x)
		57355: 22,  // SET (91x)
		57358: 23,  // SHOULD (91x)
		57363: 24,  // SLEEP (91x)
		57368: 25,  // ENDLOOP (85x)
		57344: 26,  // $end (84x)
		57403: 27,  // NOT (80x)
		57396: 28,  // WHEN (79x)
		57405: 29,  // INTO (77x)
		57404: 30,  // IN (49x)
		57393: 31,  // CONTAIN (48x)
		57392: 32,  // CONTAINS (48x)
		57385: 33,  // EQUAL (48x)
		57384: 34,  // EQUALS (48x)
		57389: 35,  // GE (48x)
		57388: 36,  // GT (48x)
		57401: 37,  // IS (48x)
		57402: 38,  // ISNOT (48x)
		57391: 39,  // LE (48x)
		57390: 40,  // LT (48x)
		57400: 41,  // MATCH (48x)
		57399: 42,  // MATCHES (48x)
		57387: 43,  // NOTEQUAL (48x)
		57386: 44,  // NOTEQUALS (48x)
		57394: 45,  // STARTSWITH (48x)
		57395: 46,  // STARTWITH (48x)
		41:    47,  // ')' (43x)
		57397: 48,  // AND (43x)
		57398: 49,  // OR (43x)
		57437: 50,  // variable (42x)
		57427: 51,  // math_expression (38x)
		57379: 52,  // BODY (35x)
		57352: 53,  // FALSE (35x)
		57380: 54,  // FOLLOW (35x)
		57378: 55,  // HEADER (35x)
		57383: 56,  // INSECURE (35x)
		57381: 57,  // NOFOLLOW (35x)
		57382: 58,  // SECURE (35x)
		57351: 59,  // TRUE (35x)
		57409: 60,  // array (33x)
		57420: 61,  // expr (33x)
		57421: 62,  // func_call (33x)
		44:    63,  // ',' (29x)
		93:    64,  // ']' (29x)
		42:    65,  // '*' (18x)
		43:    66,  // '+' (18x)
		47:    67,  // '/' (18x)
		57431: 68,  // operator (18x)
		57433: 69,  // predicate_expr (13x)
		57410: 70,  // assert_command (6x)
		57411: 71,  // cmd_command (6x)
		57412: 72,  // comm_in_loop (6x)
		57414: 73,  // command (6x)
		57415: 74,  // command_cond (6x)
		57417: 75,  // debug_command (6x)
		57418: 76,  // echo_command (6x)
		57419: 77,  // end_command (6x)
		57422: 78,  // http_command (6x)
		57426: 79,  // include_command (6x)
		57430: 80,  // must_command (6x)
		57434: 81,  // set_command (6x)
		57435: 82,  // should_command (6x)
		57436: 83,  // sleep_command (6x)
		57429: 84,  // multi_expressions (3x)
		125:   85,  // '}' (2x)
		57413: 86,  // comma_separated_expressions (2x)
		57416: 87,  // command_list (2x)
		57423: 88,  // http_command_param (2x)
		57369: 89,  // GET (1x)
		57370: 90,  // HEAD (1x)
		57424: 91,  // http_command_params (1x)
		57425: 92,  // http_method (1x)
		57428: 93,  // microspector (1x)
		57375: 94,  // OPTIONS (1x)
		57377: 95,  // PATCH (1x)
		57371: 96,  // POST (1x)
		57372: 97,  // PUT (1x)
		57408: 98,  // $default (0x)
		57374: 99,  // CONNECT (0x)
		57373: 100, // DELETE (0x)
		57347: 101, // EOF (0x)
		57346: 102, // EOL (0x)
		57345: 103, // error (0x)
		57354: 104, // KEYWORD (0x)
		57353: 105, // NULL (0x)
		57432: 106, // operator_math (0x)
		57376: 107, // TRACE (0x)
	}

	yySymNames = []string{
		"IDENTIFIER",
		"'{'",
		"'$'",
		"INTEGER",
		"'-'",
		"'%'",
		"'('",
		"'.'",
		"FLOAT",
		"'['",
		"STRING",
		"TYPE",
		"ASSERT",
		"ASYNC",
		"CMD",
		"DEBUG",
		"ECHO",
		"END",
		"HTTP",
		"INCLUDE",
		"LOOP",
		"MUST",
		"SET",
		"SHOULD",
		"SLEEP",
		"ENDLOOP",
		"$end",
		"NOT",
		"WHEN",
		"INTO",
		"IN",
		"CONTAIN",
		"CONTAINS",
		"EQUAL",
		"EQUALS",
		"GE",
		"GT",
		"IS",
		"ISNOT",
		"LE",
		"LT",
		"MATCH",
		"MATCHES",
		"NOTEQUAL",
		"NOTEQUALS",
		"STARTSWITH",
		"STARTWITH",
		"')'",
		"AND",
		"OR",
		"variable",
		"math_expression",
		"BODY",
		"FALSE",
		"FOLLOW",
		"HEADER",
		"INSECURE",
		"NOFOLLOW",
		"SECURE",
		"TRUE",
		"array",
		"expr",
		"func_call",
		"','",
		"']'",
		"'*'",
		"'+'",
		"'/'",
		"operator",
		"predicate_expr",
		"assert_command",
		"cmd_command",
		"comm_in_loop",
		"command",
		"command_cond",
		"debug_command",
		"echo_command",
		"end_command",
		"http_command",
		"include_command",
		"must_command",
		"set_command",
		"should_command",
		"sleep_command",
		"multi_expressions",
		"'}'",
		"comma_separated_expressions",
		"command_list",
		"http_command_param",
		"GET",
		"HEAD",
		"http_command_params",
		"http_method",
		"microspector",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"$default",
		"CONNECT",
		"DELETE",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
		"NULL",
		"operator_math",
		"TRACE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {93, 0},
		2:   {93, 2},
		3:   {87, 1},
		4:   {87, 2},
		5:   {74, 3},
		6:   {74, 5},
		7:   {74, 3},
		8:   {74, 1},
		9:   {74, 2},
		10:  {73, 1},
		11:  {73, 1},
		12:  {73, 1},
		13:  {73, 1},
		14:  {73, 1},
		15:  {73, 1},
		16:  {73, 1},
		17:  {73, 1},
		18:  {73, 1},
		19:  {73, 1},
		20:  {73, 1},
		21:  {73, 1},
		22:  {81, 3},
		23:  {81, 3},
		24:  {78, 3},
		25:  {78, 4},
		26:  {91, 1},
		27:  {91, 2},
		28:  {88, 2},
		29:  {88, 2},
		30:  {88, 1},
		31:  {88, 1},
		32:  {88, 1},
		33:  {88, 1},
		34:  {72, 6},
		35:  {72, 8},
		36:  {75, 2},
		37:  {77, 2},
		38:  {77, 1},
		39:  {70, 2},
		40:  {70, 3},
		41:  {80, 2},
		42:  {80, 3},
		43:  {82, 2},
		44:  {82, 3},
		45:  {79, 2},
		46:  {83, 2},
		47:  {71, 2},
		48:  {76, 2},
		49:  {76, 3},
		50:  {92, 1},
		51:  {92, 1},
		52:  {92, 1},
		53:  {92, 1},
		54:  {92, 1},
		55:  {92, 1},
		56:  {60, 2},
		57:  {60, 3},
		58:  {86, 1},
		59:  {86, 3},
		60:  {84, 1},
		61:  {84, 2},
		62:  {61, 3},
		63:  {61, 1},
		64:  {61, 1},
		65:  {61, 1},
		66:  {61, 1},
		67:  {61, 1},
		68:  {51, 3},
		69:  {51, 3},
		70:  {51, 3},
		71:  {51, 3},
		72:  {51, 3},
		73:  {51, 1},
		74:  {51, 1},
		75:  {51, 2},
		76:  {51, 2},
		77:  {51, 2},
		78:  {51, 1},
		79:  {69, 3},
		80:  {69, 1},
		81:  {69, 1},
		82:  {69, 3},
		83:  {69, 3},
		84:  {69, 3},
		85:  {69, 3},
		86:  {69, 3},
		87:  {69, 2},
		88:  {62, 3},
		89:  {62, 4},
		90:  {50, 5},
		91:  {50, 2},
		92:  {50, 1},
		93:  {68, 1},
		94:  {68, 1},
		95:  {68, 1},
		96:  {68, 1},
		97:  {68, 1},
		98:  {68, 1},
		99:  {68, 1},
		100: {68, 1},
		101: {68, 1},
		102: {68, 1},
		103: {68, 1},
		104: {68, 1},
		105: {68, 1},
		106: {68, 1},
		107: {68, 1},
		108: {68, 1},
		109: {68, 1},
		110: {68, 2},
		111: {68, 2},
		112: {106, 1},
		113: {106, 1},
		114: {106, 1},
		115: {106, 1},
		116: {106, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [171][]uint16{
		// 0
		{12: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 26: 111, 93: 113},
		{12: 134, 116, 139, 132, 140, 133, 130, 137, 131, 135, 129, 136, 138, 26: 112, 70: 121, 126, 128, 115, 114, 119, 127, 120, 118, 124, 122, 117, 123, 125},
		{12: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 26: 110},
		{12: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 28: 277, 278},
		{12: 134, 116, 139, 132, 140, 133, 130, 137, 131, 135, 129, 136, 138, 70: 121, 126, 128, 115, 276, 119, 127, 120, 118, 124, 122, 117, 123, 125},
		// 5
		{12: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 28: 102, 102},
		{12: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 28: 101, 101},
		{12: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 28: 100, 100},
		{12: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 28: 99, 99},
		{12: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 28: 98, 98},
		// 10
		{12: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 28: 97, 97},
		{12: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 28: 96, 96},
		{12: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 28: 95, 95},
		{12: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 28: 94, 94},
		{12: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 28: 93, 93},
		// 15
		{12: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 28: 92, 92},
		{12: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 28: 91, 91},
		{179, 156, 157, 50: 273},
		{89: 255, 257, 92: 254, 94: 258, 260, 256, 259},
		{179, 156, 157, 50: 243},
		// 20
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 192, 147, 84: 242},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 202, 74, 74, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 241},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 239},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 237},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 197},
		// 25
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 196, 147},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 195, 147},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 192, 147, 84: 194},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 141, 147},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 28: 64, 64, 50: 154, 145, 60: 146, 192, 147, 84: 191},
		// 30
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 164, 147, 64: 188, 86: 189},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 186, 60: 146, 185, 147},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 52: 49, 54: 49, 49, 49, 49, 49, 63: 49, 49},
		{48, 48, 48, 48, 174, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52: 48, 54: 48, 48, 48, 48, 48, 63: 48, 48, 175, 173, 176},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 52: 47, 54: 47, 47, 47, 47, 47, 63: 47, 47},
		// 35
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 52: 46, 54: 46, 46, 46, 46, 46, 63: 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 52: 45, 54: 45, 45, 45, 45, 45, 63: 45, 45},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 52: 39, 54: 39, 39, 39, 39, 39, 63: 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 52: 38, 54: 38, 38, 38, 38, 38, 63: 38, 38, 38, 38, 38},
		{3: 172},
		// 40
		{3: 171},
		{3: 170},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 52: 34, 54: 34, 34, 34, 34, 34, 63: 34, 34, 34, 34, 34},
		{20, 20, 20, 20, 20, 20, 163, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 52: 20, 54: 20, 20, 20, 20, 20, 63: 20, 20, 20, 20, 20},
		{1: 159},
		// 45
		{158},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 52: 21, 21, 21, 21, 21, 21, 21, 21, 63: 21, 21, 21, 21, 21},
		{160},
		{85: 161},
		{85: 162},
		// 50
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 52: 22, 22, 22, 22, 22, 22, 22, 22, 63: 22, 22, 22, 22, 22},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 47: 166, 50: 154, 145, 60: 146, 164, 147, 86: 165},
		{47: 54, 63: 54, 54},
		{47: 168, 63: 167},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 52: 24, 54: 24, 24, 24, 24, 24, 63: 24, 24},
		// 55
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 169, 147},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 52: 23, 54: 23, 23, 23, 23, 23, 63: 23, 23},
		{47: 53, 63: 53, 53},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 52: 35, 54: 35, 35, 35, 35, 35, 63: 35, 35, 35, 35, 35},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 52: 36, 54: 36, 36, 36, 36, 36, 63: 36, 36, 36, 36, 36},
		// 60
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 52: 37, 54: 37, 37, 37, 37, 37, 63: 37, 37, 37, 37, 37},
		{179, 156, 157, 149, 152, 151, 178, 153, 150, 50: 154, 184},
		{179, 156, 157, 149, 152, 151, 178, 153, 150, 50: 154, 183},
		{179, 156, 157, 149, 152, 151, 178, 153, 150, 50: 154, 182},
		{179, 156, 157, 149, 152, 151, 178, 153, 150, 50: 154, 177},
		// 65
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 52: 41, 54: 41, 41, 41, 41, 41, 63: 41, 41, 41, 41, 41},
		{179, 156, 157, 149, 152, 151, 178, 153, 150, 50: 154, 180},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 52: 20, 20, 20, 20, 20, 20, 20, 20, 63: 20, 20, 20, 20, 20},
		{4: 174, 47: 181, 65: 175, 173, 176},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 52: 40, 54: 40, 40, 40, 40, 40, 63: 40, 40, 40, 40, 40},
		// 70
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 52: 42, 54: 42, 42, 42, 42, 42, 63: 42, 42, 42, 42, 42},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 52: 43, 54: 43, 43, 43, 43, 43, 63: 43, 43, 175, 43, 176},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 52: 44, 54: 44, 44, 44, 44, 44, 63: 44, 44, 175, 44, 176},
		{47: 187},
		{4: 174, 27: 48, 30: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 181, 65: 175, 173, 176},
		// 75
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 52: 50, 54: 50, 50, 50, 50, 50, 63: 50, 50},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 52: 56, 54: 56, 56, 56, 56, 56, 63: 56, 56},
		{63: 167, 190},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 52: 55, 54: 55, 55, 55, 55, 55, 63: 55, 55},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 28: 63, 63, 50: 154, 145, 60: 146, 193, 147},
		// 80
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 28: 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 28: 51, 51},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 28: 65, 65, 50: 154, 145, 60: 146, 193, 147},
		{12: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 28: 66, 66},
		{12: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 28: 67, 67},
		// 85
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 224, 69, 69, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 48: 204, 205, 154, 145, 60: 146, 236, 147, 68: 206},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 186, 53: 200, 59: 199, 146, 233, 147, 69: 234},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{27: 224, 30: 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 68: 230},
		// 90
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 203},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 224, 25, 25, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 25, 25, 25, 68: 206},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 229},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 228},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 227, 147},
		// 95
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 27: 19, 53: 19, 59: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 27: 18, 53: 18, 59: 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 27: 17, 53: 17, 59: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 27: 16, 53: 16, 59: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 27: 15, 53: 15, 59: 15},
		// 100
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 27: 14, 53: 14, 59: 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 27: 13, 53: 13, 59: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 27: 12, 53: 12, 59: 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 27: 11, 53: 11, 59: 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 27: 10, 53: 10, 59: 10},
		// 105
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 27: 9, 53: 9, 59: 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 27: 8, 53: 8, 59: 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 27: 7, 53: 7, 59: 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 27: 6, 53: 6, 59: 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 27: 226, 53: 5, 59: 5},
		// 110
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 27: 4, 53: 4, 59: 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 27: 3, 53: 3, 59: 3},
		{27: 224, 30: 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 68: 225},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 27: 2, 53: 2, 59: 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27: 1, 53: 1, 59: 1},
		// 115
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 224, 28, 28, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 28, 28, 28, 68: 206},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 224, 29, 29, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 29, 29, 29, 68: 206},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 231, 147, 69: 232},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 224, 30, 30, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 30, 30, 30, 68: 230},
		// 120
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 224, 27, 27, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 27, 204, 205, 68: 206},
		{27: 224, 30: 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 187, 68: 230},
		{27: 224, 30: 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 235, 204, 205, 68: 206},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{12: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 28: 68, 68},
		// 125
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 224, 71, 71, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 48: 204, 205, 154, 145, 60: 146, 238, 147, 68: 206},
		{12: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 28: 70, 70},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 224, 73, 73, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 48: 204, 205, 154, 145, 60: 146, 240, 147, 68: 206},
		{12: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 28: 72, 72},
		{12: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 224, 75, 75, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 48: 204, 205, 68: 206},
		// 130
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 28: 76, 76, 50: 154, 145, 60: 146, 193, 147},
		{30: 244},
		{179, 156, 157, 50: 245},
		{12: 134, 116, 139, 132, 140, 133, 130, 137, 131, 135, 129, 136, 138, 28: 248, 70: 121, 126, 128, 115, 246, 119, 127, 120, 118, 124, 122, 117, 123, 125, 87: 247},
		{12: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		// 135
		{12: 134, 116, 139, 132, 140, 133, 130, 137, 131, 135, 129, 136, 138, 253, 70: 121, 126, 128, 115, 251, 119, 127, 120, 118, 124, 122, 117, 123, 125},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 249},
		{12: 134, 116, 139, 132, 140, 133, 130, 137, 131, 135, 129, 136, 138, 27: 224, 30: 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 48: 204, 205, 68: 206, 70: 121, 126, 128, 115, 246, 119, 127, 120, 118, 124, 122, 117, 123, 125, 87: 250},
		{12: 134, 116, 139, 132, 140, 133, 130, 137, 131, 135, 129, 136, 138, 252, 70: 121, 126, 128, 115, 251, 119, 127, 120, 118, 124, 122, 117, 123, 125},
		{12: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		// 140
		{12: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 28: 77, 77},
		{12: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 28: 78, 78},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 261, 147},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		// 145
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{12: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 28: 88, 88, 52: 265, 54: 266, 264, 268, 267, 269, 88: 263, 91: 262},
		// 150
		{12: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 28: 87, 87, 52: 265, 54: 266, 264, 268, 267, 269, 88: 272},
		{12: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 28: 86, 86, 52: 86, 54: 86, 86, 86, 86, 86},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 271, 147},
		{155, 156, 157, 149, 152, 151, 143, 153, 150, 142, 144, 148, 50: 154, 145, 60: 146, 270, 147},
		{12: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 28: 82, 82, 52: 82, 54: 82, 82, 82, 82, 82},
		// 155
		{12: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 28: 81, 81, 52: 81, 54: 81, 81, 81, 81, 81},
		{12: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 28: 80, 80, 52: 80, 54: 80, 80, 80, 80, 80},
		{12: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 28: 79, 79, 52: 79, 54: 79, 79, 79, 79, 79},
		{12: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 28: 83, 83, 52: 83, 54: 83, 83, 83, 83, 83},
		{12: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 28: 84, 84, 52: 84, 54: 84, 84, 84, 84, 84},
		// 160
		{12: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 28: 85, 85, 52: 85, 54: 85, 85, 85, 85, 85},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 274, 147, 69: 275},
		{12: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 224, 90, 90, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 68: 230},
		{12: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 224, 89, 89, 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 48: 204, 205, 68: 206},
		{12: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		// 165
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 282},
		{179, 156, 157, 50: 279},
		{12: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 28: 280},
		{155, 156, 157, 149, 152, 151, 198, 153, 150, 142, 144, 148, 27: 202, 50: 154, 145, 53: 200, 59: 199, 146, 201, 147, 69: 281},
		{12: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 224, 30: 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 48: 204, 205, 68: 206},
		// 170
		{12: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 224, 30: 223, 216, 215, 208, 207, 212, 211, 221, 222, 214, 213, 220, 219, 210, 209, 217, 218, 48: 204, 205, 68: 206},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 103

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			//for _,cm := range $2{
			//	yylex.(*Lexer).wg.Add(1)
			//	if cm.IsAsync() {
			//	  go cm.Run(yylex.(*Lexer))
			//	}else{
			//		r:= cm.Run(yylex.(*Lexer))
			//		if r == ErrStopExecution{
			//			return -1
			//		}
			//	}
			//}

			yylex.(*Lexer).wg.Add(1)
			if yyS[yypt-0].cmd.IsAsync() {
				go yyS[yypt-0].cmd.Run(yylex.(*Lexer))
			} else {
				r := yyS[yypt-0].cmd.Run(yylex.(*Lexer))
				if r == ErrStopExecution {
					return -1
				}
			}
		}
	case 3:
		{
			yyVAL.cmd_list = append(yyVAL.cmd_list, yyS[yypt-0].cmd)
		}
	case 4:
		{
			yyVAL.cmd_list = append(yyVAL.cmd_list, yyS[yypt-0].cmd)
		}
	case 5:
		{
			yyS[yypt-2].cmd.SetWhen(yyS[yypt-0].expression)
			yyVAL.cmd = yyS[yypt-2].cmd
		}
	case 6:
		{

			yyS[yypt-4].cmd.SetWhen(yyS[yypt-0].expression)
			yyS[yypt-4].cmd.(IntoCommand).SetInto(yyS[yypt-2].variable.Name)
			yyVAL.cmd = yyS[yypt-4].cmd
		}
	case 7:
		{
			//TODO: check if it compatible with SetInto
			yyS[yypt-2].cmd.(IntoCommand).SetInto(yyS[yypt-0].variable.Name)
			yyVAL.cmd = yyS[yypt-2].cmd
		}
	case 8:
		{
			yyVAL.cmd = yyS[yypt-0].cmd
		}
	case 9:
		{
			yyS[yypt-0].cmd.SetAsync(true)
			yyVAL.cmd = yyS[yypt-0].cmd
		}
	case 22:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.Name,
				Value: yyS[yypt-0].expression,
			}
		}
	case 23:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.Name,
				Value: yyS[yypt-0].expression,
			}
		}
	case 24:
		{
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].expression,
			}
		}
	case 25:
		{
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				Url:           yyS[yypt-1].expression,
				CommandParams: yyS[yypt-0].http_command_params,
			}
		}
	case 26:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 27:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 28:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].expression,
			}
		}
	case 29:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].expression,
			}
		}
	case 30:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-0].val.(string),
				ParamValue: &ExprBool{Val: true},
			}
		}
	case 31:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "FOLLOW",
				ParamValue: &ExprBool{Val: false},
			}
		}
	case 32:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "SECURE",
				ParamValue: &ExprBool{Val: false},
			}
		}
	case 33:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "SECURE",
				ParamValue: &ExprBool{Val: true},
			}
		}
	case 34:
		{
			yyVAL.cmd = &LoopCommand{
				Var:      yyS[yypt-4].variable,
				In:       yyS[yypt-2].variable,
				Commands: yyS[yypt-1].cmd_list,
			}

		}
	case 35:
		{
			yyVAL.cmd = &LoopCommand{
				Var:      yyS[yypt-6].variable,
				In:       yyS[yypt-4].variable,
				Commands: yyS[yypt-1].cmd_list,
				When:     yyS[yypt-2].expression,
			}

		}
	case 36:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].expressions,
			}
		}
	case 37:
		{
			yyVAL.cmd = &EndCommand{Expr: yyS[yypt-0].expression}
		}
	case 38:
		{
			yyVAL.cmd = &EndCommand{}
		}
	case 39:
		{
			yyVAL.cmd = &AssertCommand{Expr: yyS[yypt-0].expression}
		}
	case 40:
		{
			yyVAL.cmd = &AssertCommand{Expr: yyS[yypt-1].expression, Message: yyS[yypt-0].expression}
		}
	case 41:
		{
			yyVAL.cmd = &MustCommand{Expr: yyS[yypt-0].expression}
		}
	case 42:
		{
			yyVAL.cmd = &MustCommand{Expr: yyS[yypt-1].expression, Message: yyS[yypt-0].expression}
		}
	case 43:
		{
			yyVAL.cmd = &ShouldCommand{Expr: yyS[yypt-0].expression}
		}
	case 44:
		{
			yyVAL.cmd = &ShouldCommand{Expr: yyS[yypt-1].expression, Message: yyS[yypt-0].expression}
		}
	case 45:
		{
			yyVAL.cmd = &IncludeCommand{Expr: yyS[yypt-0].expression}
		}
	case 46:
		{
			yyVAL.cmd = &SleepCommand{Expr: yyS[yypt-0].expression}
		}
	case 47:
		{
			yyVAL.cmd = &CmdCommand{Params: yyS[yypt-0].expressions}
		}
	case 48:
		{
			yyVAL.cmd = &EchoCommand{Expr: yyS[yypt-0].expression}
		}
	case 49:
		{
			yyVAL.cmd = &EchoCommand{Expr: yyS[yypt-1].expression, Params: yyS[yypt-0].expressions}
		}
	case 56:
		{
			yyVAL.expressions = ExprArray{}
		}
	case 57:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 58:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 59:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 60:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 61:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 62:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 63:
		{
			yyVAL.expression = &ExprString{
				Val: yyS[yypt-0].val.(string),
			}
		}
	case 64:
		{
			yyVAL.expression = yyS[yypt-0].expression
		}
	case 65:
		{
			yyVAL.expression = &ExprArray{Values: yyS[yypt-0].expressions.Values}
		}
	case 66:
		{
			yyVAL.expression = yyS[yypt-0].expression
		}
	case 67:
		{
			yyVAL.expression = &ExprType{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 68:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "+",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 69:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "-",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 70:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "*",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 71:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "/",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 72:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 73:
		{
			yyVAL.expression = &ExprInteger{
				Val: yyS[yypt-0].val.(int64),
			}
		}
	case 74:
		{
			yyVAL.expression = &ExprFloat{
				Val: yyS[yypt-0].val.(float64),
			}
		}
	case 75:
		{
			yyVAL.expression = &ExprFloat{
				Val: float64(yyS[yypt-0].val.(int64)) / 100,
			}
		}
	case 76:
		{
			yyVAL.expression = &ExprInteger{
				Val: -yyS[yypt-0].val.(int64),
			}
		}
	case 77:
		{
			ca, _ := strconv.ParseFloat(fmt.Sprintf("0.%d", yyS[yypt-0].val), 10)
			yyVAL.expression = &ExprFloat{
				Val: ca,
			}

		}
	case 78:
		{
			yyVAL.expression = &ExprVariable{
				Name: yyS[yypt-0].variable.Name,
			}
		}
	case 79:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 80:
		{
			yyVAL.expression = &ExprBool{
				Val: true,
			}
		}
	case 81:
		{
			yyVAL.expression = &ExprBool{
				Val: false,
			}
		}
	case 82:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 83:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: "AND",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 84:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: "OR",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 85:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 86:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 87:
		{
			yyVAL.expression = yyS[yypt-0].expression

			t := reflect.TypeOf(yyS[yypt-0].expression)

			if t == reflect.TypeOf(&ExprBool{}).Elem() {
				yyS[yypt-0].expression.(*ExprBool).Val = !(yyS[yypt-0].expression.(*ExprBool).Val)
			} else if t == reflect.TypeOf(&ExprPredicate{}) {
				yyS[yypt-0].expression.(*ExprPredicate).Not = !(yyS[yypt-0].expression.(*ExprPredicate).Not)
			} else {
				yyVAL.expression = &ExprBool{
					Val: !IsTrue(yyS[yypt-0].expression),
				}
			}
		}
	case 88:
		{
			//call $1
			yyVAL.expression = &ExprFunc{
				Name:   yyS[yypt-2].val.(string),
				Params: nil,
			}
		}
	case 89:
		{
			yyVAL.expression = &ExprFunc{
				Name:   yyS[yypt-3].val.(string),
				Params: yyS[yypt-1].expressions.Values,
			}
		}
	case 90:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-2].val.(string),
			}
		}
	case 91:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 92:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 110:
		{
			yyVAL.val = "NOT" + yyS[yypt-0].val.(string)
		}
	case 111:
		{
			yyVAL.val = "ISNOT"
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func ParseFile(file string) *Lexer {

	bytes, err := ioutil.ReadFile(file)

	if err != nil {
		fmt.Println(fmt.Errorf("error including file: %s", err))
		os.Exit(1)
	}
	return Parse(string(bytes))
}

func Parse(text string) *Lexer {

	l := &Lexer{
		tokens:     make(chan Token),
		State:      NewStats(),
		GlobalVars: map[string]interface{}{},
		wg:         &sync.WaitGroup{},
	}

	l.GlobalVars["State"] = &l.State

	if Verbose {
		yyDebug = 3
	}

	go func() {
		s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
		for {
			l.tokens <- s.Scan()
		}
	}()

	return l
}

func Run(l *Lexer) {
	yyParse(l)
	l.wg.Wait()
}
