// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
)

type yySymType struct {
	yys                 int
	expression          Expression
	expressions         ExprArray
	val                 interface{}
	vals                []interface{}
	str                 ExprString
	integer             ExprInteger
	boolean             ExprBool
	bytes               []byte
	cmd                 Command
	variable            ExprVariable
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57407
	yyEofCode  = 57344
	AND        = 57395
	ANR        = 57406
	ASSERT     = 57361
	ASYNC      = 57365
	BODY       = 57377
	CMD        = 57364
	CONNECT    = 57372
	CONTAIN    = 57391
	CONTAINS   = 57390
	DEBUG      = 57359
	DELETE     = 57371
	ECHO       = 57366
	END        = 57360
	EOF        = 57347
	EOL        = 57346
	EQUAL      = 57383
	EQUALS     = 57382
	FALSE      = 57352
	FLOAT      = 57350
	FOLLOW     = 57378
	GE         = 57387
	GET        = 57367
	GT         = 57386
	HEAD       = 57368
	HEADER     = 57376
	HTTP       = 57356
	IDENTIFIER = 57404
	IN         = 57402
	INCLUDE    = 57362
	INSECURE   = 57381
	INTEGER    = 57349
	INTO       = 57403
	IS         = 57399
	ISNOT      = 57400
	KEYWORD    = 57354
	LE         = 57389
	LT         = 57388
	MATCH      = 57398
	MATCHES    = 57397
	MUST       = 57357
	NOFOLLOW   = 57379
	NOT        = 57401
	NOTEQUAL   = 57385
	NOTEQUALS  = 57384
	NULL       = 57353
	OPTIONS    = 57373
	OR         = 57396
	PATCH      = 57375
	POST       = 57369
	PUT        = 57370
	SECURE     = 57380
	SET        = 57355
	SHOULD     = 57358
	SLEEP      = 57363
	STARTSWITH = 57392
	STARTWITH  = 57393
	STRING     = 57348
	TRACE      = 57374
	TRUE       = 57351
	TYPE       = 57405
	WHEN       = 57394
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -106
)

var (
	yyPrec = map[int]int{
		ANR:        0,
		OR:         0,
		EQUALS:     1,
		EQUAL:      1,
		NOTEQUALS:  1,
		NOTEQUAL:   1,
		GT:         1,
		GE:         1,
		LT:         1,
		LE:         1,
		CONTAINS:   1,
		CONTAIN:    1,
		STARTSWITH: 1,
		STARTWITH:  1,
		WHEN:       1,
		MATCHES:    1,
		MATCH:      1,
		IS:         1,
		ISNOT:      1,
		NOT:        1,
		IN:         1,
		'+':        2,
		'-':        2,
		'*':        3,
		'/':        3,
		'%':        3,
	}

	yyXLAT = map[int]int{
		57404: 0,   // IDENTIFIER (88x)
		123:   1,   // '{' (87x)
		36:    2,   // '$' (86x)
		45:    3,   // '-' (86x)
		57349: 4,   // INTEGER (86x)
		37:    5,   // '%' (83x)
		40:    6,   // '(' (83x)
		46:    7,   // '.' (83x)
		57350: 8,   // FLOAT (83x)
		57361: 9,   // ASSERT (81x)
		57364: 10,  // CMD (81x)
		57359: 11,  // DEBUG (81x)
		57366: 12,  // ECHO (81x)
		57360: 13,  // END (81x)
		57356: 14,  // HTTP (81x)
		57362: 15,  // INCLUDE (81x)
		57357: 16,  // MUST (81x)
		57355: 17,  // SET (81x)
		57358: 18,  // SHOULD (81x)
		57363: 19,  // SLEEP (81x)
		57344: 20,  // $end (80x)
		57365: 21,  // ASYNC (80x)
		57401: 22,  // NOT (79x)
		91:    23,  // '[' (78x)
		57348: 24,  // STRING (78x)
		57405: 25,  // TYPE (78x)
		57403: 26,  // INTO (73x)
		57394: 27,  // WHEN (72x)
		57391: 28,  // CONTAIN (49x)
		57390: 29,  // CONTAINS (49x)
		57383: 30,  // EQUAL (49x)
		57382: 31,  // EQUALS (49x)
		57387: 32,  // GE (49x)
		57386: 33,  // GT (49x)
		57402: 34,  // IN (49x)
		57399: 35,  // IS (49x)
		57400: 36,  // ISNOT (49x)
		57389: 37,  // LE (49x)
		57388: 38,  // LT (49x)
		57398: 39,  // MATCH (49x)
		57397: 40,  // MATCHES (49x)
		57385: 41,  // NOTEQUAL (49x)
		57384: 42,  // NOTEQUALS (49x)
		57392: 43,  // STARTSWITH (49x)
		57393: 44,  // STARTWITH (49x)
		41:    45,  // ')' (44x)
		57395: 46,  // AND (43x)
		57396: 47,  // OR (43x)
		57377: 48,  // BODY (35x)
		57378: 49,  // FOLLOW (35x)
		57376: 50,  // HEADER (35x)
		57381: 51,  // INSECURE (35x)
		57379: 52,  // NOFOLLOW (35x)
		57380: 53,  // SECURE (35x)
		57352: 54,  // FALSE (34x)
		57351: 55,  // TRUE (34x)
		57435: 56,  // variable (34x)
		44:    57,  // ',' (31x)
		57424: 58,  // math_expression (31x)
		93:    59,  // ']' (29x)
		57408: 60,  // array (26x)
		57417: 61,  // expr (26x)
		57418: 62,  // func_call (26x)
		42:    63,  // '*' (19x)
		43:    64,  // '+' (19x)
		47:    65,  // '/' (19x)
		57428: 66,  // operator (18x)
		57430: 67,  // predicate_expr (12x)
		57411: 68,  // comma_separated_expressions (4x)
		125:   69,  // '}' (2x)
		57409: 70,  // assert_command (2x)
		57410: 71,  // cmd_command (2x)
		57412: 72,  // command (2x)
		57413: 73,  // command_cond (2x)
		57414: 74,  // debug_command (2x)
		57415: 75,  // echo_command (2x)
		57416: 76,  // end_command (2x)
		57419: 77,  // http_command (2x)
		57420: 78,  // http_command_param (2x)
		57423: 79,  // include_command (2x)
		57426: 80,  // multi_expressions (2x)
		57427: 81,  // must_command (2x)
		57432: 82,  // set_command (2x)
		57433: 83,  // should_command (2x)
		57434: 84,  // sleep_command (2x)
		57367: 85,  // GET (1x)
		57368: 86,  // HEAD (1x)
		57421: 87,  // http_command_params (1x)
		57422: 88,  // http_method (1x)
		57425: 89,  // microspector (1x)
		57373: 90,  // OPTIONS (1x)
		57375: 91,  // PATCH (1x)
		57369: 92,  // POST (1x)
		57370: 93,  // PUT (1x)
		57431: 94,  // run_comm (1x)
		57407: 95,  // $default (0x)
		57406: 96,  // ANR (0x)
		57372: 97,  // CONNECT (0x)
		57371: 98,  // DELETE (0x)
		57347: 99,  // EOF (0x)
		57346: 100, // EOL (0x)
		57345: 101, // error (0x)
		57354: 102, // KEYWORD (0x)
		57353: 103, // NULL (0x)
		57429: 104, // operator_math (0x)
		57374: 105, // TRACE (0x)
	}

	yySymNames = []string{
		"IDENTIFIER",
		"'{'",
		"'$'",
		"'-'",
		"INTEGER",
		"'%'",
		"'('",
		"'.'",
		"FLOAT",
		"ASSERT",
		"CMD",
		"DEBUG",
		"ECHO",
		"END",
		"HTTP",
		"INCLUDE",
		"MUST",
		"SET",
		"SHOULD",
		"SLEEP",
		"$end",
		"ASYNC",
		"NOT",
		"'['",
		"STRING",
		"TYPE",
		"INTO",
		"WHEN",
		"CONTAIN",
		"CONTAINS",
		"EQUAL",
		"EQUALS",
		"GE",
		"GT",
		"IN",
		"IS",
		"ISNOT",
		"LE",
		"LT",
		"MATCH",
		"MATCHES",
		"NOTEQUAL",
		"NOTEQUALS",
		"STARTSWITH",
		"STARTWITH",
		"')'",
		"AND",
		"OR",
		"BODY",
		"FOLLOW",
		"HEADER",
		"INSECURE",
		"NOFOLLOW",
		"SECURE",
		"FALSE",
		"TRUE",
		"variable",
		"','",
		"math_expression",
		"']'",
		"array",
		"expr",
		"func_call",
		"'*'",
		"'+'",
		"'/'",
		"operator",
		"predicate_expr",
		"comma_separated_expressions",
		"'}'",
		"assert_command",
		"cmd_command",
		"command",
		"command_cond",
		"debug_command",
		"echo_command",
		"end_command",
		"http_command",
		"http_command_param",
		"include_command",
		"multi_expressions",
		"must_command",
		"set_command",
		"should_command",
		"sleep_command",
		"GET",
		"HEAD",
		"http_command_params",
		"http_method",
		"microspector",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"run_comm",
		"$default",
		"ANR",
		"CONNECT",
		"DELETE",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
		"NULL",
		"operator_math",
		"TRACE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {89, 0},
		2:   {89, 2},
		3:   {94, 1},
		4:   {94, 2},
		5:   {73, 3},
		6:   {73, 5},
		7:   {73, 3},
		8:   {73, 1},
		9:   {72, 1},
		10:  {72, 1},
		11:  {72, 1},
		12:  {72, 1},
		13:  {72, 1},
		14:  {72, 1},
		15:  {72, 1},
		16:  {72, 1},
		17:  {72, 1},
		18:  {72, 1},
		19:  {72, 1},
		20:  {82, 3},
		21:  {82, 3},
		22:  {77, 3},
		23:  {77, 4},
		24:  {87, 1},
		25:  {87, 2},
		26:  {78, 2},
		27:  {78, 2},
		28:  {78, 1},
		29:  {78, 1},
		30:  {78, 1},
		31:  {78, 1},
		32:  {74, 2},
		33:  {76, 2},
		34:  {76, 3},
		35:  {76, 1},
		36:  {70, 2},
		37:  {81, 2},
		38:  {83, 2},
		39:  {79, 2},
		40:  {84, 2},
		41:  {71, 2},
		42:  {75, 2},
		43:  {88, 1},
		44:  {88, 1},
		45:  {88, 1},
		46:  {88, 1},
		47:  {88, 1},
		48:  {88, 1},
		49:  {60, 2},
		50:  {60, 3},
		51:  {68, 1},
		52:  {68, 3},
		53:  {80, 1},
		54:  {80, 2},
		55:  {61, 3},
		56:  {61, 1},
		57:  {61, 1},
		58:  {61, 1},
		59:  {61, 1},
		60:  {61, 1},
		61:  {58, 3},
		62:  {58, 3},
		63:  {58, 3},
		64:  {58, 3},
		65:  {58, 3},
		66:  {58, 1},
		67:  {58, 1},
		68:  {58, 2},
		69:  {58, 2},
		70:  {58, 2},
		71:  {58, 1},
		72:  {67, 1},
		73:  {67, 3},
		74:  {67, 1},
		75:  {67, 1},
		76:  {67, 3},
		77:  {67, 3},
		78:  {67, 3},
		79:  {67, 3},
		80:  {67, 3},
		81:  {67, 2},
		82:  {62, 3},
		83:  {62, 4},
		84:  {56, 5},
		85:  {56, 2},
		86:  {56, 1},
		87:  {66, 1},
		88:  {66, 1},
		89:  {66, 1},
		90:  {66, 1},
		91:  {66, 1},
		92:  {66, 1},
		93:  {66, 1},
		94:  {66, 1},
		95:  {66, 1},
		96:  {66, 1},
		97:  {66, 1},
		98:  {66, 1},
		99:  {66, 1},
		100: {66, 1},
		101: {66, 1},
		102: {66, 1},
		103: {66, 1},
		104: {66, 1},
		105: {66, 2},
		106: {104, 1},
		107: {104, 1},
		108: {104, 1},
		109: {104, 1},
		110: {104, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [159][]uint16{
		// 0
		{9: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 89: 107},
		{9: 127, 132, 125, 133, 126, 124, 130, 128, 123, 129, 131, 106, 110, 70: 116, 121, 111, 109, 114, 122, 115, 113, 79: 119, 81: 117, 112, 118, 120, 94: 108},
		{9: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{9: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{9: 127, 132, 125, 133, 126, 124, 130, 128, 123, 129, 131, 70: 116, 121, 111, 264, 114, 122, 115, 113, 79: 119, 81: 117, 112, 118, 120},
		// 5
		{9: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 26: 258, 257},
		{9: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 26: 97, 97},
		{9: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 26: 96, 96},
		{9: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 26: 95, 95},
		{9: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 26: 94, 94},
		// 10
		{9: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 26: 93, 93},
		{9: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 26: 92, 92},
		{9: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 26: 91, 91},
		{9: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 26: 90, 90},
		{9: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 26: 89, 89},
		// 15
		{9: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 26: 88, 88},
		{9: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 26: 87, 87},
		{172, 149, 150, 56: 254},
		{85: 236, 238, 88: 235, 90: 239, 241, 237, 240},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 185, 140, 68: 186, 80: 234},
		// 20
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 196, 135, 137, 141, 71, 232, 54: 194, 193, 192, 58: 138, 60: 139, 195, 140, 67: 231},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 195, 140, 67: 230},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 195, 140, 67: 229},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 195, 140, 67: 190},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 189, 140},
		// 25
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 188, 140},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 185, 140, 68: 186, 80: 184},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 134, 140},
		{9: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 26: 64, 64},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 181, 139, 157, 140, 68: 182},
		// 30
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 179, 60: 139, 178, 140},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 57: 50, 59: 50},
		{49, 49, 49, 167, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 57: 49, 59: 49, 63: 168, 166, 169},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 57: 48, 59: 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 57: 47, 59: 47},
		// 35
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 57: 46, 59: 46},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 57: 40, 59: 40, 63: 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 57: 39, 59: 39, 63: 39, 39, 39},
		{4: 165},
		{4: 164},
		// 40
		{4: 163},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 57: 35, 59: 35, 63: 35, 35, 35},
		{20, 20, 20, 20, 20, 20, 156, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 57: 20, 59: 20, 63: 20, 20, 20},
		{1: 152},
		{151},
		// 45
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 57: 21, 59: 21, 63: 21, 21, 21},
		{153},
		{69: 154},
		{69: 155},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 57: 22, 59: 22, 63: 22, 22, 22},
		// 50
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 45: 159, 56: 147, 58: 138, 60: 139, 157, 140, 68: 158},
		{45: 55, 57: 55, 59: 55},
		{45: 161, 57: 160},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 57: 24, 59: 24},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 162, 140},
		// 55
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 57: 23, 59: 23},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 23: 54, 54, 54, 45: 54, 57: 54, 59: 54},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 57: 36, 59: 36, 63: 36, 36, 36},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 57: 37, 59: 37, 63: 37, 37, 37},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 57: 38, 59: 38, 63: 38, 38, 38},
		// 60
		{172, 149, 150, 145, 142, 144, 171, 146, 143, 56: 147, 58: 177},
		{172, 149, 150, 145, 142, 144, 171, 146, 143, 56: 147, 58: 176},
		{172, 149, 150, 145, 142, 144, 171, 146, 143, 56: 147, 58: 175},
		{172, 149, 150, 145, 142, 144, 171, 146, 143, 56: 147, 58: 170},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 57: 42, 59: 42, 63: 42, 42, 42},
		// 65
		{172, 149, 150, 145, 142, 144, 171, 146, 143, 56: 147, 58: 173},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 57: 20, 59: 20, 63: 20, 20, 20},
		{3: 167, 45: 174, 63: 168, 166, 169},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 57: 41, 59: 41, 63: 41, 41, 41},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 57: 43, 59: 43, 63: 43, 43, 43},
		// 70
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 57: 44, 59: 44, 63: 168, 44, 169},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 57: 45, 59: 45, 63: 168, 45, 169},
		{45: 180},
		{3: 167, 22: 49, 28: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 174, 63: 168, 166, 169},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 57: 51, 59: 51},
		// 75
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57: 57, 59: 57},
		{57: 160, 59: 183},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57: 56, 59: 56},
		{9: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 26: 65, 65},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 23: 55, 55, 55, 53, 53, 57: 55},
		// 80
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 160, 138, 60: 139, 187, 140},
		{9: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 26: 52, 52},
		{9: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 26: 66, 66},
		{9: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 26: 67, 67},
		{9: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 217, 26: 68, 68, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 46: 198, 199, 66: 200},
		// 85
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 179, 60: 139, 226, 140, 67: 227},
		{3: 35, 9: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 26: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 63: 35, 35, 35},
		{9: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 26: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{9: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 26: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{22: 217, 28: 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 66: 223},
		// 90
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 195, 140, 67: 197},
		{9: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 198, 25, 66: 200},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 195, 140, 67: 222},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 195, 140, 67: 221},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 220, 140},
		// 95
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 22: 19, 19, 19, 19, 54: 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 22: 18, 18, 18, 18, 54: 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 22: 17, 17, 17, 17, 54: 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 22: 16, 16, 16, 16, 54: 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 22: 15, 15, 15, 15, 54: 15, 15},
		// 100
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 22: 14, 14, 14, 14, 54: 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 22: 13, 13, 13, 13, 54: 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 22: 12, 12, 12, 12, 54: 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 22: 11, 11, 11, 11, 54: 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 22: 10, 10, 10, 10, 54: 10, 10},
		// 105
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 22: 9, 9, 9, 9, 54: 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 22: 8, 8, 8, 8, 54: 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 22: 7, 7, 7, 7, 54: 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 22: 6, 6, 6, 6, 54: 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 22: 5, 5, 5, 5, 54: 5, 5},
		// 110
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 22: 4, 4, 4, 4, 54: 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 22: 3, 3, 3, 3, 28: 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 54: 3, 3, 66: 219},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 22: 2, 2, 2, 2, 54: 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 22: 1, 1, 1, 1, 54: 1, 1},
		{9: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 115
		{9: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 217, 26: 28, 28, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 28, 198, 28, 66: 200},
		{9: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 217, 26: 29, 29, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 29, 198, 199, 66: 200},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 224, 140, 67: 225},
		{9: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 217, 26: 30, 30, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 30, 30, 30, 66: 223},
		{9: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 217, 26: 27, 27, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 27, 198, 199, 66: 200},
		// 120
		{22: 217, 28: 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 180, 66: 223},
		{22: 217, 28: 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 228, 198, 199, 66: 200},
		{9: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 26: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{9: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 217, 26: 69, 69, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 46: 198, 199, 66: 200},
		{9: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 217, 26: 70, 70, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 46: 198, 199, 66: 200},
		// 125
		{9: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 217, 26: 73, 73, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 46: 198, 199, 66: 200},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 195, 140, 67: 233},
		{9: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 217, 26: 72, 72, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 46: 198, 199, 66: 200},
		{9: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 26: 74, 74},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 242, 140},
		// 130
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 23: 63, 63, 63},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 23: 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 23: 61, 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 23: 60, 60, 60},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 23: 59, 59, 59},
		// 135
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 23: 58, 58, 58},
		{9: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 26: 84, 84, 48: 246, 247, 245, 249, 248, 250, 78: 244, 87: 243},
		{9: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 26: 83, 83, 48: 246, 247, 245, 249, 248, 250, 78: 253},
		{9: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 26: 82, 82, 48: 82, 82, 82, 82, 82, 82},
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 252, 140},
		// 140
		{148, 149, 150, 145, 142, 144, 136, 146, 143, 23: 135, 137, 141, 56: 147, 58: 138, 60: 139, 251, 140},
		{9: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 26: 78, 78, 48: 78, 78, 78, 78, 78, 78},
		{9: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 26: 77, 77, 48: 77, 77, 77, 77, 77, 77},
		{9: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 26: 76, 76, 48: 76, 76, 76, 76, 76, 76},
		{9: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 26: 75, 75, 48: 75, 75, 75, 75, 75, 75},
		// 145
		{9: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 26: 79, 79, 48: 79, 79, 79, 79, 79, 79},
		{9: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 26: 80, 80, 48: 80, 80, 80, 80, 80, 80},
		{9: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 26: 81, 81, 48: 81, 81, 81, 81, 81, 81},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 255, 140, 67: 256},
		{9: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 217, 26: 86, 86, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 66: 223},
		// 150
		{9: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 217, 26: 85, 85, 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 46: 198, 199, 66: 200},
		{148, 149, 150, 145, 142, 144, 191, 146, 143, 22: 196, 135, 137, 141, 54: 194, 193, 192, 58: 138, 60: 139, 261, 140, 67: 260},
		{172, 149, 150, 56: 259},
		{9: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{9: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 217, 28: 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 46: 198, 199, 66: 200},
		// 155
		{22: 217, 26: 262, 28: 210, 209, 202, 201, 206, 205, 218, 215, 216, 208, 207, 214, 213, 204, 203, 211, 212, 66: 223},
		{172, 149, 150, 56: 263},
		{9: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{9: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 101

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 3:
		{
			yylex.(*Lexer).wg.Add(1)
			r := yyS[yypt-0].cmd.Run(yylex.(*Lexer))
			if r == ErrStopExecution {
				return -1
			}
		}
	case 4:
		{
			yylex.(*Lexer).wg.Add(1)
			go yyS[yypt-0].cmd.Run(yylex.(*Lexer))
		}
	case 5:
		{
			yyVAL.cmd = yyS[yypt-2].cmd
			yyVAL.cmd.SetWhen(yyS[yypt-0].expression)
		}
	case 6:
		{

			yyS[yypt-4].cmd.SetWhen(yyS[yypt-2].expression)
			yyS[yypt-4].cmd.(IntoCommand).SetInto(yyS[yypt-0].variable.Name)
			yyVAL.cmd = yyS[yypt-4].cmd
		}
	case 7:
		{
			//TODO: check if it compatible with SetInto
			yyS[yypt-2].cmd.(IntoCommand).SetInto(yyS[yypt-0].variable.Name)
			yyVAL.cmd = yyS[yypt-2].cmd
		}
	case 8:
		{
			yyVAL.cmd = yyS[yypt-0].cmd
		}
	case 20:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.Name,
				Value: yyS[yypt-0].expression,
			}
		}
	case 21:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.Name,
				Value: yyS[yypt-0].expression,
			}
		}
	case 22:
		{
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].expression,
			}
		}
	case 23:
		{
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				Url:           yyS[yypt-1].expression,
				CommandParams: yyS[yypt-0].http_command_params,
			}
		}
	case 24:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 25:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 26:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].expression,
			}
		}
	case 27:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].expression,
			}
		}
	case 28:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-0].val.(string),
				ParamValue: &ExprBool{Val: true},
			}
		}
	case 29:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "FOLLOW",
				ParamValue: &ExprBool{Val: false},
			}
		}
	case 30:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "SECURE",
				ParamValue: &ExprBool{Val: false},
			}
		}
	case 31:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  "SECURE",
				ParamValue: &ExprBool{Val: true},
			}
		}
	case 32:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].expressions,
			}
		}
	case 33:
		{
			yyVAL.cmd = &EndCommand{Expr: yyS[yypt-0].expression}
		}
	case 34:
		{
			yyVAL.cmd = &EndCommand{Expr: yyS[yypt-0].expression}
		}
	case 35:
		{
			yyVAL.cmd = &EndCommand{}
		}
	case 36:
		{
			yyVAL.cmd = &AssertCommand{Expr: yyS[yypt-0].expression}
		}
	case 37:
		{
			yyVAL.cmd = &MustCommand{Expr: yyS[yypt-0].expression}
		}
	case 38:
		{
			yyVAL.cmd = &ShouldCommand{Expr: yyS[yypt-0].expression}
		}
	case 39:
		{
			yyVAL.cmd = &IncludeCommand{}
		}
	case 40:
		{
			yyVAL.cmd = &SleepCommand{}
		}
	case 41:
		{
			yyVAL.cmd = &CmdCommand{Params: yyS[yypt-0].expressions}
		}
	case 42:
		{
			yyVAL.cmd = &EchoCommand{}
		}
	case 49:
		{
			yyVAL.expressions = ExprArray{}
		}
	case 50:
		{
			yyVAL.expressions = yyS[yypt-1].expressions
		}
	case 51:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 52:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 53:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 54:
		{
			yyVAL.expressions.Values = append(yyVAL.expressions.Values, yyS[yypt-0].expression)
		}
	case 55:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 56:
		{
			yyVAL.expression = &ExprString{
				Val: yyS[yypt-0].val.(string),
			}
		}
	case 57:
		{
			yyVAL.expression = yyS[yypt-0].expression
		}
	case 58:
		{
			yyVAL.expression = &ExprArray{Values: yyS[yypt-0].expressions.Values}
		}
	case 59:
		{
			yyVAL.expression = yyS[yypt-0].expression
		}
	case 60:
		{
			yyVAL.expression = &ExprType{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 61:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "+",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 62:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "-",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 63:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "*",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 64:
		{
			yyVAL.expression = &ExprArithmetic{
				Left:     yyS[yypt-2].expression,
				Operator: "/",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 65:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 66:
		{
			yyVAL.expression = &ExprInteger{
				Val: yyS[yypt-0].val.(int64),
			}
		}
	case 67:
		{
			yyVAL.expression = &ExprFloat{
				Val: yyS[yypt-0].val.(float64),
			}
		}
	case 68:
		{
			yyVAL.expression = &ExprFloat{
				Val: float64(yyS[yypt-0].val.(int64)) / 100,
			}
		}
	case 69:
		{
			yyVAL.expression = &ExprInteger{
				Val: -yyS[yypt-0].val.(int64),
			}
		}
	case 70:
		{
			ca, _ := strconv.ParseFloat(fmt.Sprintf("0.%d", yyS[yypt-0].val), 10)
			yyVAL.expression = &ExprFloat{
				Val: ca,
			}

		}
	case 71:
		{
			yyVAL.expression = &ExprVariable{
				Name: yyS[yypt-0].variable.Name,
			}
		}
	case 72:
		{
			yyVAL.expression = &ExprPredicate{
				Left: &ExprVariable{
					Name: yyS[yypt-0].variable.Name,
				},
				Operator: "equals",
				Right: &ExprBool{
					Val: true,
				},
			}
		}
	case 73:
		{
			yyVAL.expression = yyS[yypt-1].expression
		}
	case 74:
		{
			yyVAL.expression = &ExprBool{
				Val: true,
			}
		}
	case 75:
		{
			yyVAL.expression = &ExprBool{
				Val: false,
			}
		}
	case 76:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 77:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: "AND",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 78:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: "OR",
				Right:    yyS[yypt-0].expression,
			}
		}
	case 79:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 80:
		{
			yyVAL.expression = &ExprPredicate{
				Left:     yyS[yypt-2].expression,
				Operator: yyS[yypt-1].val.(string),
				Right:    yyS[yypt-0].expression,
			}
		}
	case 81:
		{
			yyVAL.expression = yyS[yypt-0].expression

			t := reflect.TypeOf(yyS[yypt-0].expression)

			if t == reflect.TypeOf(&ExprBool{}).Elem() {
				yyS[yypt-0].expression.(*ExprBool).Val = !(yyS[yypt-0].expression.(*ExprBool).Val)
			} else if t == reflect.TypeOf(&ExprPredicate{}) {
				yyS[yypt-0].expression.(*ExprPredicate).Not = !(yyS[yypt-0].expression.(*ExprPredicate).Not)
			} else {
				yyVAL.expression = &ExprBool{
					Val: !IsTrue(yyS[yypt-0].expression),
				}
			}
		}
	case 82:
		{
			//call $1
			yyVAL.expression = &ExprFunc{
				Name:   yyS[yypt-2].val.(string),
				Params: nil,
			}
		}
	case 83:
		{
			yyVAL.expression = &ExprFunc{
				Name:   yyS[yypt-3].val.(string),
				Params: yyS[yypt-1].expressions.Values,
			}
		}
	case 84:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-2].val.(string),
			}
		}
	case 85:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 86:
		{
			yyVAL.variable = ExprVariable{
				Name: yyS[yypt-0].val.(string),
			}
		}
	case 105:
		{
			yyVAL.val = "NOT" + yyS[yypt-0].val.(string)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func Parse(text string) *Lexer {

	l := &Lexer{
		tokens:     make(chan Token),
		State:      NewStats(),
		GlobalVars: map[string]interface{}{},
		wg:         &sync.WaitGroup{},
	}

	l.GlobalVars["State"] = &l.State

	if Verbose {
		yyDebug = 3
	}

	go func() {
		s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
		for {
			l.tokens <- s.Scan()
		}
	}()

	return l
}

func Run(l *Lexer) {
	yyParse(l)
	l.wg.Wait()
}
