// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"fmt"
	"github.com/microspector/microspector/pkg/templating"
	"strings"
)

type yySymType struct {
	yys      int
	val      interface{}
	vals     []interface{}
	str      string
	integer  int64
	boolean  bool
	bytes    []byte
	cmd      Command
	variable struct {
		name  string
		value interface{}
	}
	http_command_params []HttpCommandParam
	http_command_param  HttpCommandParam
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57397
	yyEofCode  = 57344
	AND        = 57388
	ASSERT     = 57361
	BODY       = 57374
	CONNECT    = 57369
	CONTAIN    = 57384
	CONTAINS   = 57383
	DEBUG      = 57359
	DELETE     = 57368
	END        = 57360
	EOF        = 57347
	EOL        = 57346
	EQUAL      = 57376
	EQUALS     = 57375
	FALSE      = 57352
	FLOAT      = 57350
	GE         = 57380
	GET        = 57364
	GT         = 57379
	HEAD       = 57365
	HEADER     = 57373
	HTTP       = 57356
	IDENTIFIER = 57395
	INCLUDE    = 57362
	INTEGER    = 57349
	INTO       = 57394
	IS         = 57392
	ISNOT      = 57393
	KEYWORD    = 57354
	LE         = 57382
	LT         = 57381
	MATCH      = 57391
	MATCHES    = 57390
	MUST       = 57357
	NOTEQUAL   = 57378
	NOTEQUALS  = 57377
	NULL       = 57353
	OPTIONS    = 57370
	OR         = 57389
	PATCH      = 57372
	POST       = 57366
	PUT        = 57367
	SET        = 57355
	SHOULD     = 57358
	SLEEP      = 57363
	STARTSWITH = 57385
	STARTWITH  = 57386
	STRING     = 57348
	TRACE      = 57371
	TRUE       = 57351
	TYPE       = 57396
	WHEN       = 57387
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -101
)

var (
	yyPrec = map[int]int{
		'|': 0,
		'&': 1,
		'+': 2,
		'-': 2,
		'*': 3,
		'/': 3,
		'%': 3,
	}

	yyXLAT = map[int]int{
		57395: 0,  // IDENTIFIER (104x)
		123:   1,  // '{' (103x)
		36:    2,  // '$' (102x)
		57348: 3,  // STRING (96x)
		57344: 4,  // $end (75x)
		57361: 5,  // ASSERT (75x)
		57359: 6,  // DEBUG (75x)
		57360: 7,  // END (75x)
		57356: 8,  // HTTP (75x)
		57362: 9,  // INCLUDE (75x)
		57357: 10, // MUST (75x)
		57355: 11, // SET (75x)
		57358: 12, // SHOULD (75x)
		57363: 13, // SLEEP (75x)
		45:    14, // '-' (70x)
		57387: 15, // WHEN (70x)
		57394: 16, // INTO (69x)
		91:    17, // '[' (43x)
		57388: 18, // AND (43x)
		57350: 19, // FLOAT (43x)
		57349: 20, // INTEGER (43x)
		57353: 21, // NULL (43x)
		57389: 22, // OR (43x)
		57396: 23, // TYPE (43x)
		40:    24, // '(' (38x)
		41:    25, // ')' (38x)
		57423: 26, // variable (34x)
		57352: 27, // FALSE (31x)
		57351: 28, // TRUE (31x)
		37:    29, // '%' (30x)
		42:    30, // '*' (30x)
		43:    31, // '+' (30x)
		47:    32, // '/' (30x)
		57384: 33, // CONTAIN (25x)
		57383: 34, // CONTAINS (25x)
		57376: 35, // EQUAL (25x)
		57375: 36, // EQUALS (25x)
		57380: 37, // GE (25x)
		57379: 38, // GT (25x)
		57392: 39, // IS (25x)
		57393: 40, // ISNOT (25x)
		57382: 41, // LE (25x)
		57381: 42, // LT (25x)
		57391: 43, // MATCH (25x)
		57390: 44, // MATCHES (25x)
		57378: 45, // NOTEQUAL (25x)
		57377: 46, // NOTEQUALS (25x)
		57385: 47, // STARTSWITH (25x)
		57386: 48, // STARTWITH (25x)
		57399: 49, // any_value (24x)
		57400: 50, // array (24x)
		57408: 51, // expr (19x)
		93:    52, // ']' (17x)
		44:    53, // ',' (16x)
		57422: 54, // true_false (12x)
		57374: 55, // BODY (11x)
		57402: 56, // boolean_exp (11x)
		57409: 57, // expr_opr (11x)
		57373: 58, // HEADER (11x)
		57421: 59, // string_var (6x)
		57417: 60, // operator (4x)
		125:   61, // '}' (2x)
		57411: 62, // http_command_param (2x)
		57398: 63, // any_command (1x)
		57401: 64, // assert_command (1x)
		57403: 65, // comma_separated_values (1x)
		57404: 66, // command (1x)
		57405: 67, // command_with_condition_opt (1x)
		57369: 68, // CONNECT (1x)
		57406: 69, // debug_command (1x)
		57368: 70, // DELETE (1x)
		57407: 71, // end_command (1x)
		57364: 72, // GET (1x)
		57365: 73, // HEAD (1x)
		57410: 74, // http_command (1x)
		57412: 75, // http_command_params (1x)
		57413: 76, // http_method (1x)
		57414: 77, // include_command (1x)
		57415: 78, // multi_variable (1x)
		57416: 79, // must_command (1x)
		57370: 80, // OPTIONS (1x)
		57372: 81, // PATCH (1x)
		57366: 82, // POST (1x)
		57367: 83, // PUT (1x)
		57418: 84, // set_command (1x)
		57419: 85, // should_command (1x)
		57420: 86, // sleep_command (1x)
		57371: 87, // TRACE (1x)
		57397: 88, // $default (0x)
		38:    89, // '&' (0x)
		124:   90, // '|' (0x)
		57347: 91, // EOF (0x)
		57346: 92, // EOL (0x)
		57345: 93, // error (0x)
		57354: 94, // KEYWORD (0x)
	}

	yySymNames = []string{
		"IDENTIFIER",
		"'{'",
		"'$'",
		"STRING",
		"$end",
		"ASSERT",
		"DEBUG",
		"END",
		"HTTP",
		"INCLUDE",
		"MUST",
		"SET",
		"SHOULD",
		"SLEEP",
		"'-'",
		"WHEN",
		"INTO",
		"'['",
		"AND",
		"FLOAT",
		"INTEGER",
		"NULL",
		"OR",
		"TYPE",
		"'('",
		"')'",
		"variable",
		"FALSE",
		"TRUE",
		"'%'",
		"'*'",
		"'+'",
		"'/'",
		"CONTAIN",
		"CONTAINS",
		"EQUAL",
		"EQUALS",
		"GE",
		"GT",
		"IS",
		"ISNOT",
		"LE",
		"LT",
		"MATCH",
		"MATCHES",
		"NOTEQUAL",
		"NOTEQUALS",
		"STARTSWITH",
		"STARTWITH",
		"any_value",
		"array",
		"expr",
		"']'",
		"','",
		"true_false",
		"BODY",
		"boolean_exp",
		"expr_opr",
		"HEADER",
		"string_var",
		"operator",
		"'}'",
		"http_command_param",
		"any_command",
		"assert_command",
		"comma_separated_values",
		"command",
		"command_with_condition_opt",
		"CONNECT",
		"debug_command",
		"DELETE",
		"end_command",
		"GET",
		"HEAD",
		"http_command",
		"http_command_params",
		"http_method",
		"include_command",
		"multi_variable",
		"must_command",
		"OPTIONS",
		"PATCH",
		"POST",
		"PUT",
		"set_command",
		"should_command",
		"sleep_command",
		"TRACE",
		"$default",
		"'&'",
		"'|'",
		"EOF",
		"EOL",
		"error",
		"KEYWORD",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {63, 0},
		2:   {63, 2},
		3:   {67, 5},
		4:   {67, 3},
		5:   {67, 3},
		6:   {67, 1},
		7:   {66, 1},
		8:   {66, 1},
		9:   {66, 1},
		10:  {66, 1},
		11:  {66, 1},
		12:  {66, 1},
		13:  {66, 1},
		14:  {66, 1},
		15:  {66, 1},
		16:  {86, 2},
		17:  {77, 2},
		18:  {69, 2},
		19:  {71, 3},
		20:  {71, 2},
		21:  {71, 1},
		22:  {64, 2},
		23:  {64, 2},
		24:  {79, 2},
		25:  {79, 2},
		26:  {85, 2},
		27:  {85, 2},
		28:  {84, 3},
		29:  {84, 3},
		30:  {84, 3},
		31:  {74, 4},
		32:  {74, 3},
		33:  {75, 1},
		34:  {75, 2},
		35:  {62, 2},
		36:  {62, 2},
		37:  {76, 1},
		38:  {76, 1},
		39:  {76, 1},
		40:  {76, 1},
		41:  {76, 1},
		42:  {76, 1},
		43:  {76, 1},
		44:  {76, 1},
		45:  {76, 1},
		46:  {78, 1},
		47:  {78, 2},
		48:  {49, 1},
		49:  {49, 1},
		50:  {49, 1},
		51:  {49, 1},
		52:  {49, 1},
		53:  {49, 1},
		54:  {49, 1},
		55:  {49, 2},
		56:  {26, 5},
		57:  {26, 2},
		58:  {26, 1},
		59:  {60, 1},
		60:  {60, 1},
		61:  {60, 1},
		62:  {60, 1},
		63:  {60, 1},
		64:  {60, 1},
		65:  {60, 1},
		66:  {60, 1},
		67:  {60, 1},
		68:  {60, 1},
		69:  {60, 1},
		70:  {60, 1},
		71:  {60, 1},
		72:  {60, 1},
		73:  {60, 1},
		74:  {60, 1},
		75:  {56, 3},
		76:  {56, 1},
		77:  {56, 3},
		78:  {56, 3},
		79:  {56, 1},
		80:  {54, 1},
		81:  {54, 1},
		82:  {57, 3},
		83:  {57, 3},
		84:  {57, 3},
		85:  {57, 3},
		86:  {57, 3},
		87:  {57, 3},
		88:  {59, 1},
		89:  {59, 1},
		90:  {51, 3},
		91:  {51, 3},
		92:  {51, 3},
		93:  {51, 3},
		94:  {51, 3},
		95:  {51, 3},
		96:  {51, 1},
		97:  {50, 2},
		98:  {50, 3},
		99:  {65, 1},
		100: {65, 3},
	}

	yyXErrors = map[yyXError]string{
		yyXError{33, -1}:  "expected '{'",
		yyXError{40, -1}:  "expected '}'",
		yyXError{41, -1}:  "expected '}'",
		yyXError{34, -1}:  "expected IDENTIFIER",
		yyXError{39, -1}:  "expected IDENTIFIER",
		yyXError{0, -1}:   "expected any_command or one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{111, -1}: "expected any_value or expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{90, -1}:  "expected any_value or expr or true_false or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{13, -1}:  "expected any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{14, -1}:  "expected any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{60, -1}:  "expected any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{73, -1}:  "expected any_value or one of ['$', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{50, -1}:  "expected array or boolean_exp or expr or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{61, -1}:  "expected boolean_exp or expr or expr_opr or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{16, -1}:  "expected boolean_exp or one of [$end, '$', '(', '-', '[', '{', ASSERT, DEBUG, END, FALSE, FLOAT, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, MUST, NULL, SET, SHOULD, SLEEP, STRING, TRUE, TYPE, WHEN]",
		yyXError{17, -1}:  "expected boolean_exp or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{18, -1}:  "expected boolean_exp or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{19, -1}:  "expected boolean_exp or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{116, -1}: "expected boolean_exp or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{117, -1}: "expected boolean_exp or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{125, -1}: "expected boolean_exp or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{137, -1}: "expected boolean_exp or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{140, -1}: "expected boolean_exp or one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{67, -1}:  "expected comma_separated_values or one of ['$', '-', '[', ']', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{1, -1}:   "expected command_with_condition_opt or one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{94, -1}:  "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{98, -1}:  "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{99, -1}:  "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{100, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{101, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{102, -1}: "expected expr or one of ['$', '(', '-', '[', '{', FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TYPE]",
		yyXError{43, -1}:  "expected http_command_param or one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{32, -1}:  "expected http_command_params or one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{21, -1}:  "expected http_method or one of [CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE]",
		yyXError{15, -1}:  "expected multi_variable or one of ['$', '{', IDENTIFIER]",
		yyXError{35, -1}:  "expected one of [$end, '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, BODY, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FALSE, FLOAT, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, TRUE, TYPE, WHEN]",
		yyXError{38, -1}:  "expected one of [$end, '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, BODY, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FALSE, FLOAT, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, TRUE, TYPE, WHEN]",
		yyXError{42, -1}:  "expected one of [$end, '$', '%', '(', ')', '*', '+', ',', '-', '/', '[', ']', '{', AND, ASSERT, BODY, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, FALSE, FLOAT, GE, GT, HEADER, HTTP, IDENTIFIER, INCLUDE, INTEGER, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, NULL, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, TRUE, TYPE, WHEN]",
		yyXError{54, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{55, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{56, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{57, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{58, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{59, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{68, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{69, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{72, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{121, -1}: "expected one of [$end, '$', '%', ')', '*', '+', ',', '-', '/', ']', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{96, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{97, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{103, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{104, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{105, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{106, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{107, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, IDENTIFIER, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, OR, SET, SHOULD, SLEEP, STARTSWITH, STRING, WHEN]",
		yyXError{91, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{93, -1}:  "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{112, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{113, -1}: "expected one of [$end, '$', '%', ')', '*', '+', '-', '/', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{62, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{64, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{65, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{66, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{92, -1}:  "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{114, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{115, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{119, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{120, -1}: "expected one of [$end, '$', ')', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{122, -1}: "expected one of [$end, '$', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{123, -1}: "expected one of [$end, '$', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{124, -1}: "expected one of [$end, '$', '{', AND, ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{36, -1}:  "expected one of [$end, '$', '{', ASSERT, BODY, DEBUG, END, HEADER, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{37, -1}:  "expected one of [$end, '$', '{', ASSERT, BODY, DEBUG, END, HEADER, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{133, -1}: "expected one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{134, -1}: "expected one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{135, -1}: "expected one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{129, -1}: "expected one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{130, -1}: "expected one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{51, -1}:  "expected one of [$end, '%', '*', '+', '-', '/', ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{53, -1}:  "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{126, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{127, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, OR, SET, SHOULD, SLEEP, WHEN]",
		yyXError{138, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, OR, SET, SHOULD, SLEEP]",
		yyXError{141, -1}: "expected one of [$end, AND, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, OR, SET, SHOULD, SLEEP]",
		yyXError{44, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{47, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{48, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{49, -1}:  "expected one of [$end, ASSERT, BODY, DEBUG, END, HEADER, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{3, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{4, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{5, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{6, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{7, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{11, -1}:  "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{12, -1}:  "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{131, -1}: "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{132, -1}: "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{139, -1}: "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{2, -1}:   "expected one of [$end, ASSERT, DEBUG, END, HTTP, INCLUDE, MUST, SET, SHOULD, SLEEP]",
		yyXError{75, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{76, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{77, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{78, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{79, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{80, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{81, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{82, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{83, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{84, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{85, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{86, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{87, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{88, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{89, -1}:  "expected one of ['$', '(', '-', '[', '{', FALSE, FLOAT, IDENTIFIER, INTEGER, NULL, STRING, TRUE, TYPE]",
		yyXError{23, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{24, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{25, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{26, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{27, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{28, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{29, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{30, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{31, -1}:  "expected one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{95, -1}:  "expected one of ['%', ')', '*', '+', '-', '/']",
		yyXError{108, -1}: "expected one of [')', AND, OR]",
		yyXError{109, -1}: "expected one of [')', AND, OR]",
		yyXError{70, -1}:  "expected one of [',', ']']",
		yyXError{71, -1}:  "expected one of [',', ']']",
		yyXError{74, -1}:  "expected one of [',', ']']",
		yyXError{63, -1}:  "expected operator or one of [$end, '%', ')', '*', '+', '-', '/', ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{52, -1}:  "expected operator or one of [$end, '%', '*', '+', '-', '/', ASSERT, CONTAIN, CONTAINS, DEBUG, END, EQUAL, EQUALS, GE, GT, HTTP, INCLUDE, INTO, IS, ISNOT, LE, LT, MATCH, MATCHES, MUST, NOTEQUAL, NOTEQUALS, SET, SHOULD, SLEEP, STARTSWITH, WHEN]",
		yyXError{110, -1}: "expected operator or one of ['%', ')', '*', '+', '-', '/', CONTAIN, CONTAINS, EQUAL, EQUALS, GE, GT, IS, ISNOT, LE, LT, MATCH, MATCHES, NOTEQUAL, NOTEQUALS, STARTSWITH]",
		yyXError{118, -1}: "expected operator or one of ['%', '*', '+', '-', '/', CONTAIN, CONTAINS, EQUAL, EQUALS, GE, GT, IS, ISNOT, LE, LT, MATCH, MATCHES, NOTEQUAL, NOTEQUALS, STARTSWITH]",
		yyXError{8, -1}:   "expected string_var or one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{9, -1}:   "expected string_var or one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{10, -1}:  "expected string_var or one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, STRING, WHEN]",
		yyXError{22, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{45, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{46, -1}:  "expected string_var or one of ['$', '{', IDENTIFIER, STRING]",
		yyXError{128, -1}: "expected variable or one of [$end, '$', '{', ASSERT, DEBUG, END, HTTP, IDENTIFIER, INCLUDE, INTO, MUST, SET, SHOULD, SLEEP, WHEN]",
		yyXError{20, -1}:  "expected variable or one of ['$', '{', IDENTIFIER]",
		yyXError{136, -1}: "expected variable or one of ['$', '{', IDENTIFIER]",
	}

	yyParseTab = [143][]uint16{
		// 0
		{4: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 63: 102},
		{4: 101, 118, 116, 117, 122, 115, 119, 121, 120, 114, 64: 109, 66: 104, 103, 69: 107, 71: 108, 74: 106, 77: 112, 79: 110, 84: 105, 111, 113},
		{4: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{4: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 15: 239, 238},
		{4: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 15: 94, 94},
		// 5
		{4: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 15: 93, 93},
		{4: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 15: 92, 92},
		{4: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 15: 91, 91},
		{136, 134, 135, 137, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 15: 90, 90, 26: 138, 59: 237},
		{136, 134, 135, 137, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 15: 89, 89, 26: 138, 59: 236},
		// 10
		{136, 134, 135, 137, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 15: 88, 88, 26: 138, 59: 235},
		{4: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 15: 87, 87},
		{4: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 15: 86, 86},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 26: 156, 49: 234, 169},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 26: 156, 49: 233, 169},
		// 15
		{136, 134, 135, 26: 231, 78: 230},
		{136, 134, 135, 155, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 161, 227, 80, 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 228, 165},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 226, 165},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 225, 165},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 224, 165},
		// 20
		{136, 134, 135, 26: 151},
		{68: 129, 70: 128, 72: 124, 125, 76: 123, 80: 130, 132, 126, 127, 87: 131},
		{136, 134, 135, 137, 26: 138, 59: 133},
		{64, 64, 64, 64},
		{63, 63, 63, 63},
		// 25
		{62, 62, 62, 62},
		{61, 61, 61, 61},
		{60, 60, 60, 60},
		{59, 59, 59, 59},
		{58, 58, 58, 58},
		// 30
		{57, 57, 57, 57},
		{56, 56, 56, 56},
		{4: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 15: 69, 69, 55: 147, 58: 146, 62: 145, 75: 144},
		{1: 140},
		{139},
		// 35
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 27: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 52: 43, 43, 55: 43, 58: 43},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15: 13, 13, 55: 13, 58: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 15: 12, 12, 55: 12, 58: 12},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 27: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 52: 44, 44, 55: 44, 58: 44},
		{141},
		// 40
		{61: 142},
		{61: 143},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 27: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 52: 45, 45, 55: 45, 58: 45},
		{4: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 15: 70, 70, 55: 147, 58: 146, 62: 150},
		{4: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 15: 68, 68, 55: 68, 58: 68},
		// 45
		{136, 134, 135, 137, 26: 138, 59: 149},
		{136, 134, 135, 137, 26: 138, 59: 148},
		{4: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 15: 65, 65, 55: 65, 58: 65},
		{4: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 15: 66, 66, 55: 66, 58: 66},
		{4: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 15: 67, 67, 55: 67, 58: 67},
		// 50
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 152, 153, 54: 163, 56: 154, 165},
		{4: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 47, 73, 73, 29: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{4: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 201, 72, 72, 29: 204, 202, 200, 203, 185, 184, 177, 176, 181, 180, 190, 191, 183, 182, 188, 189, 179, 178, 186, 187, 60: 213},
		{4: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 15: 71, 71, 18: 218, 22: 219},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 18: 53, 22: 53, 25: 53, 29: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52: 53, 53},
		// 55
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 18: 52, 22: 52, 25: 52, 29: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52: 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 18: 51, 22: 51, 25: 51, 29: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52: 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 18: 50, 22: 50, 25: 50, 29: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 52: 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 18: 49, 22: 49, 25: 49, 29: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 52: 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 18: 48, 22: 48, 25: 48, 29: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52: 48, 48},
		// 60
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 26: 156, 49: 223, 169},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 212, 54: 163, 56: 210, 211},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 15: 25, 25, 18: 25, 22: 25, 25: 25},
		{4: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25: 5, 29: 5, 5, 5, 5, 185, 184, 177, 176, 181, 180, 190, 191, 183, 182, 188, 189, 179, 178, 186, 187, 60: 192},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 15: 22, 22, 18: 22, 22: 22, 25: 22},
		// 65
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 15: 21, 21, 18: 21, 22: 21, 25: 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15: 20, 20, 18: 20, 22: 20, 25: 20},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 26: 156, 49: 172, 169, 52: 170, 65: 171},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 18: 47, 22: 47, 25: 47, 29: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 52: 47, 47},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 18: 4, 22: 4, 25: 4, 29: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 52: 4, 4},
		// 70
		{52: 173, 174},
		{52: 2, 2},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 18: 3, 22: 3, 25: 3, 29: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 52: 3, 3},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 26: 156, 49: 175, 169},
		{52: 1, 1},
		// 75
		{42, 42, 42, 42, 14: 42, 17: 42, 19: 42, 42, 42, 23: 42, 42, 27: 42, 42},
		{41, 41, 41, 41, 14: 41, 17: 41, 19: 41, 41, 41, 23: 41, 41, 27: 41, 41},
		{40, 40, 40, 40, 14: 40, 17: 40, 19: 40, 40, 40, 23: 40, 40, 27: 40, 40},
		{39, 39, 39, 39, 14: 39, 17: 39, 19: 39, 39, 39, 23: 39, 39, 27: 39, 39},
		{38, 38, 38, 38, 14: 38, 17: 38, 19: 38, 38, 38, 23: 38, 38, 27: 38, 38},
		// 80
		{37, 37, 37, 37, 14: 37, 17: 37, 19: 37, 37, 37, 23: 37, 37, 27: 37, 37},
		{36, 36, 36, 36, 14: 36, 17: 36, 19: 36, 36, 36, 23: 36, 36, 27: 36, 36},
		{35, 35, 35, 35, 14: 35, 17: 35, 19: 35, 35, 35, 23: 35, 35, 27: 35, 35},
		{34, 34, 34, 34, 14: 34, 17: 34, 19: 34, 34, 34, 23: 34, 34, 27: 34, 34},
		{33, 33, 33, 33, 14: 33, 17: 33, 19: 33, 33, 33, 23: 33, 33, 27: 33, 33},
		// 85
		{32, 32, 32, 32, 14: 32, 17: 32, 19: 32, 32, 32, 23: 32, 32, 27: 32, 32},
		{31, 31, 31, 31, 14: 31, 17: 31, 19: 31, 31, 31, 23: 31, 31, 27: 31, 31},
		{30, 30, 30, 30, 14: 30, 17: 30, 19: 30, 30, 30, 23: 30, 30, 27: 30, 30},
		{29, 29, 29, 29, 14: 29, 17: 29, 19: 29, 29, 29, 23: 29, 29, 27: 29, 29},
		{28, 28, 28, 28, 14: 28, 17: 28, 19: 28, 28, 28, 23: 28, 28, 27: 28, 28},
		// 90
		{27, 27, 27, 27, 14: 27, 17: 27, 19: 27, 27, 27, 23: 27, 27, 27: 27, 27},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 196, 26: 156, 167, 166, 49: 193, 169, 195, 54: 194},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 5, 24, 24, 18: 24, 22: 24, 25: 24, 29: 5, 5, 5, 5},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 15: 23, 23, 18: 23, 22: 23, 25: 23},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 201, 17, 17, 18: 17, 22: 17, 25: 17, 29: 204, 202, 200, 203},
		// 95
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 196, 26: 156, 49: 198, 169, 197},
		{14: 201, 25: 199, 29: 204, 202, 200, 203},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18: 5, 22: 5, 25: 5, 29: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 18: 11, 22: 11, 25: 11, 29: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 196, 26: 156, 49: 198, 169, 209},
		// 100
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 196, 26: 156, 49: 198, 169, 208},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 196, 26: 156, 49: 198, 169, 207},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 196, 26: 156, 49: 198, 169, 206},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 196, 26: 156, 49: 198, 169, 205},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 18: 6, 22: 6, 25: 6, 29: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		// 105
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 18: 7, 22: 7, 25: 7, 29: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 18: 8, 22: 8, 25: 8, 29: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 18: 9, 22: 9, 25: 9, 29: 204, 202, 9, 203, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 18: 10, 22: 10, 25: 10, 29: 204, 202, 10, 203, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{18: 218, 22: 219, 25: 217},
		// 110
		{18: 22, 22: 22, 25: 216},
		{14: 201, 25: 199, 29: 204, 202, 200, 203, 185, 184, 177, 176, 181, 180, 190, 191, 183, 182, 188, 189, 179, 178, 186, 187, 60: 213},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 196, 26: 156, 49: 215, 169, 214},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 201, 18, 18, 18: 18, 22: 18, 25: 18, 29: 204, 202, 200, 203},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 5, 16, 16, 18: 16, 22: 16, 25: 16, 29: 5, 5, 5, 5},
		// 115
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 15: 19, 19, 18: 19, 22: 19, 25: 19},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 15: 26, 26, 18: 26, 22: 26, 25: 26},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 222, 165},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 221, 165},
		{14: 201, 29: 204, 202, 200, 203, 185, 184, 177, 176, 181, 180, 190, 191, 183, 182, 188, 189, 179, 178, 186, 187, 60: 213},
		// 120
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15: 14, 14, 18: 218, 22: 219, 25: 14},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15: 15, 15, 18: 218, 22: 219, 25: 15},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 18: 46, 22: 46, 25: 46, 29: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 52: 46, 46},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 15: 74, 74, 18: 218, 22: 219},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 15: 76, 76, 18: 218, 22: 219},
		// 125
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 15: 78, 78, 18: 218, 22: 219},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 229, 165},
		{4: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 15: 81, 81, 18: 218, 22: 219},
		{4: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 15: 82, 82, 18: 218, 22: 219},
		{136, 134, 135, 4: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 15: 83, 83, 26: 232},
		// 130
		{55, 55, 55, 4: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 15: 55, 55},
		{54, 54, 54, 4: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 15: 54, 54},
		{4: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 15: 84, 84},
		{4: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 15: 85, 85},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 15: 75, 75},
		// 135
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 15: 77, 77},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 15: 79, 79},
		{136, 134, 135, 26: 241},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 240, 165},
		{4: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 18: 218, 22: 219},
		// 140
		{4: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 15: 242},
		{136, 134, 135, 155, 14: 161, 17: 168, 19: 158, 157, 160, 23: 159, 162, 26: 156, 167, 166, 49: 164, 169, 220, 54: 163, 56: 243, 165},
		{4: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 18: 218, 22: 219},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 93

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 3:
		{
			//run command put result into variable WHEN boolean_exp is true
			if strings.Contains(yyS[yypt-2].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}

			if yyS[yypt-0].boolean {
				yylex.(*lex).GlobalVars[yyS[yypt-2].variable.name] = yyS[yypt-4].cmd.Run(yylex.(*lex))
			}
		}
	case 4:
		{
			//command INTO variable
			if strings.Contains(yyS[yypt-0].variable.name, ".") {
				yylex.Error("nested variables are not supported yet")
			}
			yylex.(*lex).GlobalVars[yyS[yypt-0].variable.name] = yyS[yypt-2].cmd.Run(yylex.(*lex))
		}
	case 5:
		{
			//run the command only if boolean_exp is true
			if yyS[yypt-0].boolean {
				yyS[yypt-2].cmd.Run(yylex.(*lex))
			}
		}
	case 6:
		{
			//just run the command
			yyS[yypt-0].cmd.Run(yylex.(*lex))
			//run command without condition

		}
	case 16:
		{
			yyVAL.cmd = &SleepCommand{
				Millisecond: intVal(yyS[yypt-0].val),
			}
		}
	case 17:
		{
			yyVAL.cmd = &IncludeCommand{
				File: yyS[yypt-0].val.(string),
			}
		}
	case 18:
		{
			yyVAL.cmd = &DebugCommand{
				Values: yyS[yypt-0].vals,
			}
		}
	case 19:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 20:
		{
			if yyS[yypt-0].boolean {
				return -1
			}

			yyVAL.cmd = &EndCommand{}
		}
	case 21:
		{
			return -1
		}
	case 22:
		{
			if yyS[yypt-1].cmd.(*AssertCommand).Failed {
				yylex.(*lex).State.Assert.Messages = append(yylex.(*lex).State.Assert.Messages, yyS[yypt-0].str)
			}

			yyVAL.cmd = yyS[yypt-1].cmd
		}
	case 23:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Assert.Failed++
			} else {
				yylex.(*lex).State.Assert.Succeeded++
			}
			yyVAL.cmd = &AssertCommand{
				Failed: !yyS[yypt-0].boolean,
			}
		}
	case 24:
		{
			if yyS[yypt-1].cmd.(*MustCommand).Failed {
				yylex.(*lex).State.Must.Messages = append(yylex.(*lex).State.Must.Messages, yyS[yypt-0].str)
			}

			yyVAL.cmd = yyS[yypt-1].cmd
		}
	case 25:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Must.Failed++
			} else {
				yylex.(*lex).State.Must.Succeeded++
			}

			yyVAL.cmd = &MustCommand{
				Failed: !yyS[yypt-0].boolean,
			}
		}
	case 26:
		{
			if yyS[yypt-1].cmd.(*ShouldCommand).Failed {
				yylex.(*lex).State.Should.Messages = append(yylex.(*lex).State.Should.Messages, yyS[yypt-0].str)
			}

			yyVAL.cmd = yyS[yypt-1].cmd
		}
	case 27:
		{
			if !yyS[yypt-0].boolean {
				yylex.(*lex).State.Should.Failed++
			} else {
				yylex.(*lex).State.Should.Succeeded++
			}
			yyVAL.cmd = &ShouldCommand{
				Failed: !yyS[yypt-0].boolean,
			}
		}
	case 28:
		{
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].vals,
			}
		}
	case 29:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].val,
			}
		}
	case 30:
		{
			//GlobalVars[$2.name] = $3
			yyVAL.cmd = &SetCommand{
				Name:  yyS[yypt-1].variable.name,
				Value: yyS[yypt-0].boolean,
			}
		}
	case 31:
		{
			//call http with header here.
			yyVAL.cmd = &HttpCommand{
				Method:        yyS[yypt-2].val.(string),
				CommandParams: yyS[yypt-0].http_command_params,
				Url:           yyS[yypt-1].str,
			}
		}
	case 32:
		{
			//simple http command
			yyVAL.cmd = &HttpCommand{
				Method: yyS[yypt-1].val.(string),
				Url:    yyS[yypt-0].str,
			}
		}
	case 33:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}
			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 34:
		{
			if yyVAL.http_command_params == nil {
				yyVAL.http_command_params = make([]HttpCommandParam, 0)
			}

			yyVAL.http_command_params = append(yyVAL.http_command_params, yyS[yypt-0].http_command_param)
		}
	case 35:
		{
			//addin header
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].str,
			}
		}
	case 36:
		{
			yyVAL.http_command_param = HttpCommandParam{
				ParamName:  yyS[yypt-1].val.(string),
				ParamValue: yyS[yypt-0].str,
			}
		}
	case 46:
		{
			//getting a single value from multi_value exp
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].variable)
		}
	case 47:
		{
			//multi value
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].variable)
		}
	case 48:
		{
			//string_or_var : STRING
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.val, _ = templating.ExecuteTemplate(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
			} else {
				yyVAL.val = yyS[yypt-0].val.(string)
			}
		}
	case 49:
		{
			//any_value : variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.val, _ = templating.ExecuteTemplate(yyS[yypt-0].variable.value.(string), yylex.(*lex).GlobalVars)
				} else {
					yyVAL.val = yyS[yypt-0].variable.value
				}
			default:
				yyVAL.val = yyS[yypt-0].variable.value
			}

		}
	case 50:
		{
			//number: INTEGER
			yyVAL.val = yyS[yypt-0].val
		}
	case 51:
		{
			//number: FLOAT
			yyVAL.val = yyS[yypt-0].val
		}
	case 53:
		{
			yyVAL.val = nil
		}
	case 54:
		{
			yyVAL.val = yyS[yypt-0].vals
		}
	case 55:
		{
			yyVAL.val, _ = umin(yyS[yypt-0].val)
		}
	case 56:
		{
			//getting variable
			yyVAL.variable.name = yyS[yypt-2].val.(string)
			yyVAL.variable.value = query(yyS[yypt-2].val.(string), yylex.(*lex).GlobalVars)
		}
	case 57:
		{
			yyVAL.variable.name = yyS[yypt-0].val.(string)
			yyVAL.variable.value = query(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
		}
	case 58:
		{
			yyVAL.variable.name = yyS[yypt-0].val.(string)
			yyVAL.variable.value = query(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
		}
	case 75:
		{
			//boolean_ex: '(' boolean_exp ')'
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 77:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 78:
		{
			//boolean_ex: any_value operator any_value, oh conflicts start here :(
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].boolean)
			yyVAL.boolean = operator_result
		}
	case 80:
		{
			yyVAL.boolean = true
		}
	case 81:
		{
			yyVAL.boolean = false
		}
	case 82:
		{
			yyVAL.boolean = yyS[yypt-1].boolean
		}
	case 83:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 84:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 85:
		{
			operator_result := runop(yyS[yypt-2].val, yyS[yypt-1].val, yyS[yypt-0].val)
			yyVAL.boolean = operator_result
		}
	case 86:
		{
			//boolean_ex: boolean_exp AND boolean_exp
			yyVAL.boolean = yyS[yypt-2].boolean && yyS[yypt-0].boolean
		}
	case 87:
		{
			//boolean_ex: boolean_exp OR boolean_exp
			yyVAL.boolean = yyS[yypt-2].boolean || yyS[yypt-0].boolean
		}
	case 88:
		{
			//string_var : STRING
			if isTemplate(yyS[yypt-0].val.(string)) {
				yyVAL.str, _ = templating.ExecuteTemplate(yyS[yypt-0].val.(string), yylex.(*lex).GlobalVars)
			} else {
				yyVAL.str = yyS[yypt-0].val.(string)
			}
		}
	case 89:
		{
			//string_var : variable
			switch yyS[yypt-0].variable.value.(type) {
			case string:
				if isTemplate(yyS[yypt-0].variable.value.(string)) {
					yyVAL.str, _ = templating.ExecuteTemplate(yyS[yypt-0].variable.value.(string), yylex.(*lex).GlobalVars)
				} else {
					yyVAL.str = yyS[yypt-0].variable.value.(string)
				}
			default:
				yyVAL.str = fmt.Sprintf("%s", yyS[yypt-0].variable.value)
			}

		}
	case 90:
		{
			yyVAL.val = yyS[yypt-1].val
		}
	case 91:
		{
			yyVAL.val, _ = add(yyS[yypt-2].val, yyS[yypt-0].val)
		}
	case 92:
		{
			yyVAL.val, _ = subtract(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 93:
		{
			yyVAL.val, _ = multiply(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 94:
		{
			yyVAL.val, _ = divide(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 95:
		{
			yyVAL.val, _ = mod(yyS[yypt-0].val, yyS[yypt-2].val)
		}
	case 97:
		{
			yyVAL.vals = make([]interface{}, 0)
		}
	case 98:
		{
			yyVAL.vals = yyS[yypt-1].vals
		}
	case 99:
		{
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}
	case 100:
		{
			yyVAL.vals = append(yyVAL.vals, yyS[yypt-0].val)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func Parse(text string) *lex {

	l := &lex{
		tokens:     make(chan Token),
		State:      NewStats(),
		GlobalVars: map[string]interface{}{},
	}

	if Verbose {
		yyDebug = 3
	}

	go func() {
		s := NewScanner(strings.NewReader(strings.TrimSpace(text)))
		for {
			l.tokens <- s.Scan()
		}
	}()

	return l
}

func Run(l *lex) {
	yyParse(l)
}
